<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.10">
<title>JMS Support</title>
<link rel="stylesheet" href="css/spring.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>#header #revnumber{display:none}</style>
</head>
<body class="book toc2 toc-left">
<div id="header">
<div id="toc" class="toc2">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#jms">JMS Support</a>
<ul class="sectlevel2">
<li><a href="#jms-inbound-channel-adapter">Inbound Channel Adapter</a>
<ul class="sectlevel3">
<li><a href="#jms-ib-transactions">Transactions</a></li>
</ul>
</li>
<li><a href="#jms-message-driven-channel-adapter">Message-driven Channel Adapter</a>
<ul class="sectlevel3">
<li><a href="#jms-md-conversion-errors">Inbound Conversion Errors</a></li>
</ul>
</li>
<li><a href="#jms-outbound-channel-adapter">Outbound Channel Adapter</a>
<ul class="sectlevel3">
<li><a href="#jms-ob-transactions">Transactions</a></li>
</ul>
</li>
<li><a href="#jms-inbound-gateway">Inbound Gateway</a></li>
<li><a href="#jms-outbound-gateway">Outbound Gateway</a>
<ul class="sectlevel3">
<li><a href="#jms-outbound-gateway-reply-listener">Using a <code>&lt;reply-listener/&gt;</code></a></li>
<li><a href="#idle-reply-listeners">Idle Reply Listeners</a></li>
<li><a href="#gateway-reply-correlation">Gateway Reply Correlation</a></li>
<li><a href="#jms-async-gateway">Async Gateway</a></li>
<li><a href="#jms-og-attributes">Attribute Reference</a></li>
</ul>
</li>
<li><a href="#jms-header-mapping">Mapping Message Headers to and from JMS Message</a></li>
<li><a href="#jms-conversion-and-marshalling">Message Conversion, Marshalling, and Unmarshalling</a></li>
<li><a href="#jms-channel">JMS-backed Message Channels</a></li>
<li><a href="#jms-selectors">Using JMS Message Selectors</a></li>
<li><a href="#jms-samples">JMS Samples</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div id="content">
<div class="sect1">
<h2 id="jms"><a class="anchor" href="#jms"></a>JMS Support</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Spring Integration provides channel adapters for receiving and sending JMS messages.</p>
</div>
<div class="paragraph">
<p>You need to include this dependency into your project:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="title">Maven</div>
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.integration&lt;/groupId&gt;
    &lt;artifactId&gt;spring-integration-jms&lt;/artifactId&gt;
    &lt;version&gt;5.3.2.RELEASE&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Gradle</div>
<div class="content">
<pre class="highlightjs highlight"><code data-lang="groovy" class="language-groovy hljs">compile "org.springframework.integration:spring-integration-jms:5.3.2.RELEASE"</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The <code>javax.jms:javax.jms-api</code> must be added explicitly via some JMS vendor-specific implementation, e.g. Apache ActiveMQ.</p>
</div>
<div class="paragraph">
<p>There are actually two JMS-based inbound Channel Adapters.
The first uses Spring&#8217;s <code>JmsTemplate</code> to receive based on a polling period.
The second is &#8220;message-driven&#8221; and relies on a Spring <code>MessageListener</code> container.
The outbound channel adapter uses the <code>JmsTemplate</code> to convert and send a JMS message on demand.</p>
</div>
<div class="paragraph">
<p>By using <code>JmsTemplate</code> and the <code>MessageListener</code> container, Spring Integration relies on Spring&#8217;s JMS support.
This is important to understand, since most of the attributes exposed on these adapters configure the underlying <code>JmsTemplate</code> and <code>MessageListener</code> container.
For more details about <code>JmsTemplate</code> and the <code>MessageListener</code> container, see the <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/jms.html">Spring JMS documentation</a>.</p>
</div>
<div class="paragraph">
<p>Whereas the JMS channel adapters are intended for unidirectional messaging (send-only or receive-only), Spring Integration also provides inbound and outbound JMS Gateways for request and reply operations.
The inbound gateway relies on one of Spring&#8217;s <code>MessageListener</code> container implementations for message-driven reception.
It is also capable of sending a return value to the <code>reply-to</code> destination, as provided by the received message.
The outbound gateway sends a JMS message to a <code>request-destination</code> (or <code>request-destination-name</code> or <code>request-destination-expression</code>) and then receives a reply message.
You can explicitly configure the <code>reply-destination</code> reference (or <code>reply-destination-name</code> or <code>reply-destination-expression</code>).
Otherwise, the outbound gateway uses a JMS <a href="https://docs.oracle.com/javaee/6/api/javax/jms/TemporaryQueue.html">TemporaryQueue</a>.</p>
</div>
<div class="paragraph">
<p>Prior to Spring Integration 2.2, if necessary, a <code>TemporaryQueue</code> was created (and removed) for each request or reply.
Beginning with Spring Integration 2.2, you can configure the outbound gateway to use a <code>MessageListener</code> container to receive replies instead of directly using a new (or cached) <code>Consumer</code> to receive the reply for each request.
When so configured, and no explicit reply destination is provided, a single <code>TemporaryQueue</code> is used for each gateway instead of one for each request.</p>
</div>
<div class="sect2">
<h3 id="jms-inbound-channel-adapter"><a class="anchor" href="#jms-inbound-channel-adapter"></a>Inbound Channel Adapter</h3>
<div class="paragraph">
<p>The inbound channel adapter requires a reference to either a single <code>JmsTemplate</code> instance or both a <code>ConnectionFactory</code> and a <code>Destination</code> (you can provide a 'destinationName' in place of the 'destination' reference).
The following example defines an inbound channel adapter with a <code>Destination</code> reference:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:inbound-channel-adapter id="jmsIn" destination="inQueue" channel="exampleChannel"&gt;
    &lt;int:poller fixed-rate="30000"/&gt;
&lt;/int-jms:inbound-channel-adapter&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
Notice from the preceding configuration that the <code>inbound-channel-adapter</code> is a polling consumer.
That means that it invokes <code>receive()</code> when triggered.
You should use this should only in situations where polling is done relatively infrequently and timeliness is not important.
For all other situations (a vast majority of JMS-based use-cases), the <code>message-driven-channel-adapter</code> (<a href="#jms-message-driven-channel-adapter">described later</a>) is a better option.
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
By default, all of the JMS adapters that require a reference to the <code>ConnectionFactory</code> automatically look for a bean named <code>jmsConnectionFactory</code>.
That is why you do not see a <code>connection-factory</code> attribute in many of the examples.
However, if your JMS <code>ConnectionFactory</code> has a different bean name, you need to provide that attribute.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If <code>extract-payload</code> is set to <code>true</code> (the default), the received JMS Message is passed through the <code>MessageConverter</code>.
When relying on the default <code>SimpleMessageConverter</code>, this means that the resulting Spring Integration Message has the JMS message&#8217;s body as its payload.
A JMS <code>TextMessage</code> produces a string-based payload, a JMS <code>BytesMessage</code> produces a byte array payload, and the serializable instance of a JMS <code>ObjectMessage</code> becomes the Spring Integration message&#8217;s payload.
If you prefer to have the raw JMS message as the Spring Integration message&#8217;s payload, set <code>extract-payload</code> to <code>false</code>, as the following example shows:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:inbound-channel-adapter id="jmsIn"
    destination="inQueue"
    channel="exampleChannel"
    extract-payload="false"/&gt;
    &lt;int:poller fixed-rate="30000"/&gt;
&lt;/int-jms:inbound-channel-adapter&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Starting with version 5.0.8, a default value of the <code>receive-timeout</code> is <code>-1</code> (no wait) for the <code>org.springframework.jms.connection.CachingConnectionFactory</code> and <code>cacheConsumers</code>, otherwise it is 1 second.</p>
</div>
<div class="sect3">
<h4 id="jms-ib-transactions"><a class="anchor" href="#jms-ib-transactions"></a>Transactions</h4>
<div class="paragraph">
<p>Starting with version 4.0, the inbound channel adapter supports the <code>session-transacted</code> attribute.
In earlier versions, you had to inject a <code>JmsTemplate</code> with <code>sessionTransacted</code> set to <code>true</code>.
(The adapter did let you set the <code>acknowledge</code> attribute to <code>transacted</code>, but this was incorrect and did not work).</p>
</div>
<div class="paragraph">
<p>Note, however, that setting <code>session-transacted</code> to <code>true</code> has little value, because the transaction is committed
immediately after the <code>receive()</code> operation and before the message is sent to the <code>channel</code>.</p>
</div>
<div class="paragraph">
<p>If you want the entire flow to be transactional (for example, if there is a downstream outbound channel adapter), you must use a <code>transactional</code> poller with a <code>JmsTransactionManager</code>.
Alternatively, consider using a <code>jms-message-driven-channel-adapter</code> with <code>acknowledge</code> set to <code>transacted</code> (the default).</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="jms-message-driven-channel-adapter"><a class="anchor" href="#jms-message-driven-channel-adapter"></a>Message-driven Channel Adapter</h3>
<div class="paragraph">
<p>The <code>message-driven-channel-adapter</code> requires a reference to either an instance of a Spring <code>MessageListener</code> container (any subclass of <code>AbstractMessageListenerContainer</code>) or both <code>ConnectionFactory</code> and <code>Destination</code> (a 'destinationName' can be provided in place of the 'destination' reference).
The following example defines a message-driven channel adapter with a <code>Destination</code> reference:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:message-driven-channel-adapter id="jmsIn" destination="inQueue" channel="exampleChannel"/&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The message-driven adapter also accepts several properties that pertain to the <code>MessageListener</code> container.
These values are considered only if you do not provide a <code>container</code> reference.
In that case, an instance of <code>DefaultMessageListenerContainer</code> is created and configured based on these properties.
For example, you can specify the <code>transaction-manager</code> reference, the <code>concurrent-consumers</code> value, and several other property references and values.
See the <a href="https://docs.spring.io/spring-integration/api/index.html">Javadoc</a> and Spring Integration&#8217;s JMS schema (<code>spring-integration-jms.xsd</code>) for more details.</p>
</div>
<div class="paragraph">
<p>If you have a custom listener container implementation (usually a subclass of <code>DefaultMessageListenerContainer</code>), you can either provide a reference to an instance of it by using the <code>container</code> attribute or provide its fully qualified class name by using the <code>container-class</code> attribute.
In that case, the attributes on the adapter are transferred to an instance of your custom container.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>You can&#8217;t use the Spring JMS namespace element <code>&lt;jms:listener-container/&gt;</code> to configure a container reference for the <code>&lt;int-jms:message-driven-channel-adapter&gt;</code> since that element doesn&#8217;t actually reference a container.
Each <code>&lt;jms:listener/&gt;</code> sub-element gets its own <code>DefaultMessageListenerContainer</code> (with shared attributes defined on the parent <code>&lt;jms:listener-container/&gt;</code> element).
You can give each listener sub-element an <code>id</code>, and use that to inject into the channel adapter, however, the <code>&lt;jms:/&gt;</code> namespace requires a real listener.
Since, for Spring Integration, the adapter itself needs to configure the listener, the configured listener will be overwritten.
If you go this route, you will see a warning for each adapter.</p>
</div>
<div class="paragraph">
<p>It is recommended to configure a regular <code>&lt;bean&gt;</code> for the <code>DefaultMessageListenerContainer</code> and use it as a reference in the channel adapter.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
Starting with version 4.2, the default <code>acknowledge</code> mode is <code>transacted</code>, unless you provide an external
container.
In that case, you should configure the container as needed.
We recommend using <code>transacted</code> with the <code>DefaultMessageListenerContainer</code> to avoid message loss.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The 'extract-payload' property has the same effect, and its default value is 'true'.
The <code>poller</code> element is not applicable for a message-driven channel adapter, as it is actively invoked.
For most scenarios, the message-driven approach is better, since the messages are passed along to the <code>MessageChannel</code> as soon as they are received from the underlying JMS consumer.</p>
</div>
<div class="paragraph">
<p>Finally, the <code>&lt;message-driven-channel-adapter&gt;</code> element also accepts the 'error-channel' attribute.
This provides the same basic functionality, as described in <a href="./gateway.html#gateway-proxy">Enter the <code>GatewayProxyFactoryBean</code></a>.
The following example shows how to set an error channel on a message-driven channel adapter:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:message-driven-channel-adapter id="jmsIn" destination="inQueue"
    channel="exampleChannel"
    error-channel="exampleErrorChannel"/&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>When comparing the preceding example to the generic gateway configuration or the JMS 'inbound-gateway' that we discuss later, the key difference is that we are in a one-way flow, since this is a 'channel-adapter', not a gateway.
Therefore, the flow downstream from the 'error-channel' should also be one-way.
For example, it could send to a logging handler or it could connect to a different JMS <code>&lt;outbound-channel-adapter&gt;</code> element.</p>
</div>
<div class="paragraph">
<p>When consuming from topics, set the <code>pub-sub-domain</code> attribute to true.
Set <code>subscription-durable</code> to <code>true</code> for a durable subscription or <code>subscription-shared</code> for a shared subscription (which requires a JMS 2.0 broker and has been available since version 4.2).
Use <code>subscription-name</code> to name the subscription.</p>
</div>
<div class="paragraph">
<p>Starting with version 5.1, when the endpoint is stopped while the application remains running, the underlying listener container is shut down, closing its shared connection and consumers.
Previously, the connection and consumers remained open.
To revert to the previous behavior, set the <code>shutdownContainerOnStop</code> on the <code>JmsMessageDrivenEndpoint</code> to <code>false</code>.</p>
</div>
<div class="sect3">
<h4 id="jms-md-conversion-errors"><a class="anchor" href="#jms-md-conversion-errors"></a>Inbound Conversion Errors</h4>
<div class="paragraph">
<p>Starting with version 4.2, the 'error-channel' is used for the conversion errors, too.
Previously, if a JMS <code>&lt;message-driven-channel-adapter/&gt;</code> or <code>&lt;inbound-gateway/&gt;</code> could not deliver a message due to a conversion error, an exception would be thrown back to the container.
If the container is configured to use transactions, the message is rolled back and redelivered repeatedly.
The conversion process occurs before and during message construction so that such errors are not sent to the 'error-channel'.
Now such conversion exceptions result in an <code>ErrorMessage</code> being sent to the 'error-channel', with the exception as the <code>payload</code>.
If you wish the transaction to roll back and you have an 'error-channel' defined, the integration flow on the 'error-channel' must re-throw the exception (or another exception).
If the error flow does not throw an exception, the transaction is committed and the message is removed.
If no 'error-channel' is defined, the exception is thrown back to the container, as before.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="jms-outbound-channel-adapter"><a class="anchor" href="#jms-outbound-channel-adapter"></a>Outbound Channel Adapter</h3>
<div class="paragraph">
<p>The <code>JmsSendingMessageHandler</code> implements the <code>MessageHandler</code> interface and is capable of converting Spring Integration <code>Messages</code> to JMS messages and then sending to a JMS destination.
It requires either a <code>jmsTemplate</code> reference or both <code>jmsConnectionFactory</code> and <code>destination</code> references (<code>destinationName</code> may be provided in place of <code>destination</code>).
As with the inbound channel adapter, the easiest way to configure this adapter is with the namespace support.
The following configuration produces an adapter that receives Spring Integration messages from the <code>exampleChannel</code>, converts those into JMS messages, and sends them to the JMS destination reference whose bean name is <code>outQueue</code>:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:outbound-channel-adapter id="jmsOut" destination="outQueue" channel="exampleChannel"/&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>As with the inbound channel adapters, there is an 'extract-payload' property.
However, the meaning is reversed for the outbound adapter.
Rather than applying to the JMS message, the boolean property applies to the Spring Integration message payload.
In other words, the decision is whether to pass the Spring Integration message itself as the JMS message body or to pass the Spring Integration message payload as the JMS message body.
The default value is 'true'.
Therefore, if you pass a Spring Integration message whose payload is a <code>String</code>, a JMS <code>TextMessage</code> is created.
If, on the other hand, you want to send the actual Spring Integration message to another system over JMS, set it to 'false'.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Regardless of the boolean value for payload extraction, the Spring Integration <code>MessageHeaders</code> map to JMS properties, as long as you rely on the default converter or provide a reference to another instance of <code>MessageConverter</code>.
(The same holds true for 'inbound' adapters, except that, in those cases, the JMS properties map to Spring Integration <code>MessageHeaders</code>).
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Starting with version 5.1, the <code>&lt;int-jms:outbound-channel-adapter&gt;</code> (<code>JmsSendingMessageHandler</code>) can be configured with the <code>deliveryModeExpression</code> and <code>timeToLiveExpression</code> properties to evaluate an appropriate QoS values for JMS message to send at runtime against request Spring <code>Message</code>.
The new <code>setMapInboundDeliveryMode(true)</code> and <code>setMapInboundExpiration(true)</code> options of the <code>DefaultJmsHeaderMapper</code> may facilitate as a source of the information for the dynamic <code>deliveryMode</code> and <code>timeToLive</code> from message headers:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:outbound-channel-adapter delivery-mode-expression="headers.jms_deliveryMode"
                        time-to-live-expression="headers.jms_expiration - T(System).currentTimeMillis()"/&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="jms-ob-transactions"><a class="anchor" href="#jms-ob-transactions"></a>Transactions</h4>
<div class="paragraph">
<p>Starting with version 4.0, the outbound channel adapter supports the <code>session-transacted</code> attribute.
In earlier versions, you had to inject a <code>JmsTemplate</code> with <code>sessionTransacted</code> set to <code>true</code>.
The attribute now sets the property on the built-in default <code>JmsTemplate</code>.
If a transaction exists (perhaps from an upstream <code>message-driven-channel-adapter</code>), the send operation is performed within the same transaction.
Otherwise, a new transaction is started.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="jms-inbound-gateway"><a class="anchor" href="#jms-inbound-gateway"></a>Inbound Gateway</h3>
<div class="paragraph">
<p>Spring Integration&#8217;s message-driven JMS inbound-gateway delegates to a <code>MessageListener</code> container, supports dynamically adjusting concurrent consumers, and can also handle replies.
The inbound gateway requires references to a <code>ConnectionFactory</code> and a request <code>Destination</code> (or 'requestDestinationName').
The following example defines a JMS <code>inbound-gateway</code> that receives from the JMS queue referenced by the bean id, <code>inQueue</code>, and sends to the Spring Integration channel named <code>exampleChannel</code>:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:inbound-gateway id="jmsInGateway"
    request-destination="inQueue"
    request-channel="exampleChannel"/&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Since the gateways provide request-reply behavior instead of unidirectional send or receive behavior, they also have two distinct properties for &#8220;payload extraction&#8221; (as <a href="#jms-inbound-channel-adapter">discussed earlier</a> for the channel adapters' 'extract-payload' setting).
For an inbound gateway, the 'extract-request-payload' property determines whether the received JMS Message body is extracted.
If 'false', the JMS message itself becomes the Spring Integration message payload.
The default is 'true'.</p>
</div>
<div class="paragraph">
<p>Similarly, for an inbound-gateway, the 'extract-reply-payload' property applies to the Spring Integration message that is to be converted into a reply JMS Message.
If you want to pass the whole Spring Integration message (as the body of a JMS ObjectMessage), set value this to 'false'.
By default, it is also 'true' that the Spring Integration message payload is converted into a JMS Message (for example, a
<code>String</code> payload becomes a JMS TextMessage).</p>
</div>
<div class="paragraph">
<p>As with anything else, gateway invocation might result in error.
By default, a producer is not notified of the errors that might have occurred on the consumer side and times out waiting for the reply.
However, there might be times when you want to communicate an error condition back to the consumer (in other words, you might want to treat the exception as a valid reply by mapping it to a message).
To accomplish this, JMS inbound gateway provides support for a message channel to which errors can be sent for processing, potentially resulting in a reply message payload that conforms to some contract that defines what a caller may expect as an &#8220;error&#8221; reply.
You can use the error-channel attribute to configure such a channel, as the following example shows:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:inbound-gateway request-destination="requestQueue"
          request-channel="jmsInputChannel"
          error-channel="errorTransformationChannel"/&gt;

&lt;int:transformer input-channel="exceptionTransformationChannel"
        ref="exceptionTransformer" method="createErrorResponse"/&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>You might notice that this example looks very similar to that included within <a href="./gateway.html#gateway-proxy">Enter the <code>GatewayProxyFactoryBean</code></a>.
The same idea applies here: The <code>exceptionTransformer</code> could be a POJO that creates error-response objects, you could reference the <code>nullChannel</code> to suppress the errors, or you could leave 'error-channel' out to let the exception propagate.</p>
</div>
<div class="paragraph">
<p>See <a href="#jms-md-conversion-errors">Inbound Conversion Errors</a>.</p>
</div>
<div class="paragraph">
<p>When consuming from topics, set the <code>pub-sub-domain</code> attribute to true.
Set <code>subscription-durable</code> to <code>true</code> for a durable subscription or <code>subscription-shared</code> for a shared subscription (requires a JMS 2.0 broker and has been available since version 4.2).
Use <code>subscription-name</code> to name the subscription.</p>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
Starting with version 4.2, the default <code>acknowledge</code> mode is <code>transacted</code>, unless an external container is provided.
In that case, you should configure the container as needed.
We recommend that you use <code>transacted</code> with the <code>DefaultMessageListenerContainer</code> to avoid message loss.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Starting with version 5.1, when the endpoint is stopped while the application remains running, the underlying listener container is shut down, closing its shared connection and consumers.
Previously, the connection and consumers remained open.
To revert to the previous behavior, set the <code>shutdownContainerOnStop</code> on the <code>JmsInboundGateway</code> to <code>false</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="jms-outbound-gateway"><a class="anchor" href="#jms-outbound-gateway"></a>Outbound Gateway</h3>
<div class="paragraph">
<p>The outbound gateway creates JMS messages from Spring Integration messages and sends them to a 'request-destination'.
It thens handle the JMS reply message either by using a selector to receive from the 'reply-destination' that you configure or, if no 'reply-destination' is provided, by creating JMS <code>TemporaryQueue</code> instances.</p>
</div>
<div id="jms-outbound-gateway-memory-caution" class="admonitionblock caution">
<table>
<tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Using a <code>reply-destination</code> (or <code>reply-destination-name</code>) together with a <code>CachingConnectionFactory</code> that has cacheConsumers set to <code>true</code> can cause out-of-memory conditions.
This is because each request gets a new consumer with a new selector (selecting on the <code>correlation-key</code> value or, when there is no <code>correlation-key</code>, on the sent JMSMessageID).
Given that these selectors are unique, they remain in the cache (unused) after the current request completes.</p>
</div>
<div class="paragraph">
<p>If you specify a reply destination, you are advised to not use cached consumers.
Alternatively, consider using a <code>&lt;reply-listener/&gt;</code> as <a href="#jms-outbound-gateway-reply-listener">described below</a>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The following example shows how to configure an outbound gateway:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:outbound-gateway id="jmsOutGateway"
    request-destination="outQueue"
    request-channel="outboundJmsRequests"
    reply-channel="jmsReplies"/&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The 'outbound-gateway' payload extraction properties are inversely related to those of the 'inbound-gateway' (see the <a href="#jms-message-driven-channel-adapter">earlier discussion</a>).
That means that the 'extract-request-payload' property value applies to the Spring Integration message being converted into a JMS message to be sent as a request.
The 'extract-reply-payload' property value applies to the JMS message received as a reply and is then converted into a Spring Integration message to be subsequently sent to the 'reply-channel', as shown in the preceding configuration example.</p>
</div>
<div class="sect3">
<h4 id="jms-outbound-gateway-reply-listener"><a class="anchor" href="#jms-outbound-gateway-reply-listener"></a>Using a <code>&lt;reply-listener/&gt;</code></h4>
<div class="paragraph">
<p>Spring Integration 2.2 introduced an alternative technique for handling replies.
If you add a <code>&lt;reply-listener/&gt;</code> child element to the gateway instead of creating a consumer for each reply, a <code>MessageListener</code> container is used to receive the replies and hand them over to the requesting thread.
This provides a number of performance benefits as well as alleviating the cached consumer memory utilization problem described in the <a href="#jms-outbound-gateway-memory-caution">earlier caution</a>.</p>
</div>
<div class="paragraph">
<p>When using a <code>&lt;reply-listener/&gt;</code> with an outbound gateway that has no <code>reply-destination</code>, instead of creating a <code>TemporaryQueue</code> for each request, a single <code>TemporaryQueue</code> is used.
(The gateway creates an additional <code>TemporaryQueue</code>, as necessary, if the connection to the broker is lost and recovered).</p>
</div>
<div class="paragraph">
<p>When using a <code>correlation-key</code>, multiple gateways can share the same reply destination, because the listener container uses a selector that is unique to each gateway.</p>
</div>
<div class="admonitionblock caution">
<table>
<tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>If you specify a reply listener and specify a reply destination (or reply destination name) but provide no correlation key, the gateway logs a warning and falls back to pre-version 2.2 behavior.
This is because there is no way to configure a selector in this case.
Thus, there is no way to avoid a reply going to a different gateway that might be configured with the same reply destination.</p>
</div>
<div class="paragraph">
<p>Note that, in this situation, a new consumer is used for each request, and consumers can build up in memory as described in the caution above; therefore cached consumers should not be used in this case.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The following example shows a reply listener with default attributes:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:outbound-gateway id="jmsOutGateway"
        request-destination="outQueue"
        request-channel="outboundJmsRequests"
        reply-channel="jmsReplies"&gt;
    &lt;int-jms:reply-listener /&gt;
&lt;/int-jms-outbound-gateway&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The listener is very lightweight, and we anticipate that, in most cases, you need only a single consumer.
However, you can add attributes such as <code>concurrent-consumers</code>, <code>max-concurrent-consumers</code>, and others.
See the schema for a complete list of supported attributes, together with the <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/jms.html">Spring JMS documentation</a> for their meanings.</p>
</div>
</div>
<div class="sect3">
<h4 id="idle-reply-listeners"><a class="anchor" href="#idle-reply-listeners"></a>Idle Reply Listeners</h4>
<div class="paragraph">
<p>Starting with version 4.2, you can start the reply listener as needed (and stop it after an idle time) instead of running for the duration of the gateway&#8217;s lifecycle.
This can be useful if you have many gateways in the application context where they are mostly idle.
One such situation is a context with many (inactive) partitioned <a href="https://spring.io/projects/spring-batch">Spring Batch</a> jobs using Spring Integration and JMS for partition distribution.
If all the reply listeners are active, the JMS broker has an active consumer for each gateway.
By enabling the idle timeout, each consumer exists only while the corresponding batch job is running (and for a short time after it finishes).</p>
</div>
<div class="paragraph">
<p>See <code>idle-reply-listener-timeout</code> in <a href="#jms-og-attributes">Attribute Reference</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="gateway-reply-correlation"><a class="anchor" href="#gateway-reply-correlation"></a>Gateway Reply Correlation</h4>
<div class="paragraph">
<p>This section describes the mechanisms used for reply correlation (ensuring the originating gateway receives replies to only its requests), depending on how the gateway is configured.
See <a href="#jms-og-attributes">Attribute Reference</a> for complete description of the attributes discussed here.</p>
</div>
<div class="paragraph">
<p>The following list describes the various scenarios (the numbers are for identification&#8201;&#8212;&#8201;order does not matter):</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>No <code>reply-destination*</code> properties and no <code>&lt;reply-listener&gt;</code></p>
<div class="paragraph">
<p>A <code>TemporaryQueue</code> is created for each request and deleted when the request is complete (successfully or otherwise).
<code>correlation-key</code> is irrelevant.</p>
</div>
</li>
<li>
<p>A <code>reply-destination*</code> property is provided and neither a <code>&lt;reply-listener/&gt;</code> nor a <code>correlation-key</code> is provided</p>
<div class="paragraph">
<p>The <code>JMSCorrelationID</code> equal to the outgoing message IS is used as a message selector for the consumer:</p>
</div>
<div class="paragraph">
<p><code>messageSelector = "JMSCorrelationID = '" + messageId + "'"</code></p>
</div>
<div class="paragraph">
<p>The responding system is expected to return the inbound <code>JMSMessageID</code> in the reply <code>JMSCorrelationID</code>.
This is a common pattern and is implemented by the Spring Integration inbound gateway as well as Spring&#8217;s <code>MessageListenerAdapter</code> for message-driven POJOs.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
When you use this configuration, you should not use a topic for replies.
The reply may be lost.
</td>
</tr>
</table>
</div>
</li>
<li>
<p>A <code>reply-destination*</code> property is provided, no <code>&lt;reply-listener/&gt;</code> is provided, and <code>correlation-key="JMSCorrelationID"</code></p>
<div class="paragraph">
<p>The gateway generates a unique correlation IS and inserts it in the <code>JMSCorrelationID</code> header.
The message selector is:</p>
</div>
<div class="paragraph">
<p><code>messageSelector = "JMSCorrelationID = '" + uniqueId + "'"</code></p>
</div>
<div class="paragraph">
<p>The responding system is expected to return the inbound <code>JMSCorrelationID</code> in the reply <code>JMSCorrelationID</code>.
This is a common pattern and is implemented by the Spring Integration inbound gateway as well as Spring&#8217;s <code>MessageListenerAdapter</code> for message-driven POJOs.</p>
</div>
</li>
<li>
<p>A <code>reply-destination*</code> property is provided, no <code>&lt;reply-listener/&gt;</code> is provided, and <code>correlation-key="myCorrelationHeader"</code></p>
<div class="paragraph">
<p>The gateway generates a unique correlation ID and inserts it in the <code>myCorrelationHeader</code> message property.
The <code>correlation-key</code> can be any user-defined value.
The message selector is:</p>
</div>
<div class="paragraph">
<p><code>messageSelector = "myCorrelationHeader = '" + uniqueId + "'"</code></p>
</div>
<div class="paragraph">
<p>The responding system is expected to return the inbound <code>myCorrelationHeader</code> in the reply <code>myCorrelationHeader</code>.</p>
</div>
</li>
<li>
<p>A <code>reply-destination*</code> property is provided, no <code>&lt;reply-listener/&gt;</code> is provided, and <code>correlation-key="JMSCorrelationID*"</code>
(Note the <code>*</code> in the correlation key.)</p>
<div class="paragraph">
<p>The gateway uses the value in the <code>jms_correlationId</code> header (if present) from the request message and inserts it in the <code>JMSCorrelationID</code> header.
The message selector is:</p>
</div>
<div class="paragraph">
<p><code>messageSelector = "JMSCorrelationID = '" + headers['jms_correlationId'] + "'"</code></p>
</div>
<div class="paragraph">
<p>The user must ensure this value is unique.</p>
</div>
<div class="paragraph">
<p>If the header does not exist, the gateway behaves as in <code>3</code>.</p>
</div>
<div class="paragraph">
<p>The responding system is expected to return the inbound <code>JMSCorrelationID</code> in the reply <code>JMSCorrelationID</code>.
This is a common pattern and is implemented by the Spring Integration inbound gateway as well as Spring&#8217;s <code>MessageListenerAdapter</code> for message-driven POJOs.</p>
</div>
</li>
<li>
<p>No <code>reply-destination*</code> properties is provided, and a <code>&lt;reply-listener&gt;</code> is provided</p>
<div class="paragraph">
<p>A temporary queue is created and used for all replies from this gateway instance.
No correlation data is needed in the message, but the outgoing <code>JMSMessageID</code> is used internally in the gateway to direct the reply to the correct requesting thread.</p>
</div>
</li>
<li>
<p>A <code>reply-destination*</code> property is provided, a <code>&lt;reply-listener&gt;</code> is provided, and no <code>correlation-key</code> is provided</p>
<div class="paragraph">
<p>Not allowed.</p>
</div>
<div class="paragraph">
<p>The <code>&lt;reply-listener/&gt;</code> configuration is ignored, and the gateway behaves as in <code>2</code>.
A warning log message is written to indicate this situation.</p>
</div>
</li>
<li>
<p>A <code>reply-destination*</code> property is provided, a <code>&lt;reply-listener&gt;</code> is provided, and <code>correlation-key="JMSCorrelationID"</code></p>
<div class="paragraph">
<p>The gateway has a unique correlation ID and inserts it, together with an incrementing value in the <code>JMSCorrelationID</code> header (<code>gatewayId + "_" + ++seq</code>).
The message selector is:</p>
</div>
<div class="paragraph">
<p><code>messageSelector = "JMSCorrelationID LIKE '" + gatewayId%'"</code></p>
</div>
<div class="paragraph">
<p>The responding system is expected to return the inbound <code>JMSCorrelationID</code> in the reply <code>JMSCorrelationID</code>.
This is a common pattern and is implemented by the Spring Integration inbound gateway as well as Spring&#8217;s <code>MessageListenerAdapter</code> for message-driven POJOs.
Since each gateway has a unique ID, each instance gets only its own replies.
The complete correlation data is used to route the reply to the correct requesting thread.</p>
</div>
</li>
<li>
<p>A <code>reply-destination*</code> property is provided a <code>&lt;reply-listener/&gt;</code> is provided, and <code>correlation-key="myCorrelationHeader"</code></p>
<div class="paragraph">
<p>The gateway has a unique correlation ID and inserts it, together with an incrementing value in the <code>myCorrelationHeader</code>
property (<code>gatewayId + "_" + ++seq</code>).
The <code>correlation-key</code> can be any user-defined value.
The message selector is:</p>
</div>
<div class="paragraph">
<p><code>messageSelector = "myCorrelationHeader LIKE '" + gatewayId%'"</code></p>
</div>
<div class="paragraph">
<p>The responding system is expected to return the inbound <code>myCorrelationHeader</code> in the reply <code>myCorrelationHeader</code>.
Since each gateway has a unique ID, each instance only gets its own replies.
The complete correlation data is used to route the reply to the correct requesting thread.</p>
</div>
</li>
<li>
<p>A <code>reply-destination*</code> property is provided, a <code>&lt;reply-listener/&gt;</code> is provided, and <code>correlation-key="JMSCorrelationID*"</code></p>
<div class="paragraph">
<p>(Note the <code>*</code> in the correlation key)</p>
</div>
<div class="paragraph">
<p>Not allowed.</p>
</div>
<div class="paragraph">
<p>User-supplied correlation IDs are not permitted with a reply listener.
The gateway does not initialize with this configuration.</p>
</div>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="jms-async-gateway"><a class="anchor" href="#jms-async-gateway"></a>Async Gateway</h4>
<div class="paragraph">
<p>Starting with version 4.3, you can now specify <code>async="true"</code> (or <code>setAsync(true)</code> in Java) when configuring the outbound gateway.</p>
</div>
<div class="paragraph">
<p>By default, when a request is sent to the gateway, the requesting thread is suspended until the reply is received.
The flow then continues on that thread.
If <code>async</code> is <code>true</code>, the requesting thread is released immediately after the send completes, and the reply is returned (and the flow continues) on the listener container thread.
This can be useful when the gateway is invoked on a poller thread.
The thread is released and is available for other tasks within the framework.</p>
</div>
<div class="paragraph">
<p><code>async</code> requires a <code>&lt;reply-listener/&gt;</code> (or <code>setUseReplyContainer(true)</code> when using Java configuration).
It also requires a <code>correlationKey</code> (usually <code>JMSCorrelationID</code>) to be specified.
If either of these conditions are not met, <code>async</code> is ignored.</p>
</div>
</div>
<div class="sect3">
<h4 id="jms-og-attributes"><a class="anchor" href="#jms-og-attributes"></a>Attribute Reference</h4>
<div class="paragraph">
<p>The following listing shows all the available attributes for an <code>outbound-gateway</code>:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:outbound-gateway
    connection-factory="connectionFactory" <i class="conum" data-value="1"></i><b>(1)</b>
    correlation-key="" <i class="conum" data-value="2"></i><b>(2)</b>
    delivery-persistent="" <i class="conum" data-value="3"></i><b>(3)</b>
    destination-resolver="" <i class="conum" data-value="4"></i><b>(4)</b>
    explicit-qos-enabled="" <i class="conum" data-value="5"></i><b>(5)</b>
    extract-reply-payload="true" <i class="conum" data-value="6"></i><b>(6)</b>
    extract-request-payload="true" <i class="conum" data-value="7"></i><b>(7)</b>
    header-mapper="" <i class="conum" data-value="8"></i><b>(8)</b>
    message-converter="" <i class="conum" data-value="9"></i><b>(9)</b>
    priority="" <i class="conum" data-value="10"></i><b>(10)</b>
    receive-timeout="" <i class="conum" data-value="11"></i><b>(11)</b>
    reply-channel="" <i class="conum" data-value="12"></i><b>(12)</b>
    reply-destination="" <i class="conum" data-value="13"></i><b>(13)</b>
    reply-destination-expression="" <i class="conum" data-value="14"></i><b>(14)</b>
    reply-destination-name="" <i class="conum" data-value="15"></i><b>(15)</b>
    reply-pub-sub-domain="" <i class="conum" data-value="16"></i><b>(16)</b>
    reply-timeout="" <i class="conum" data-value="17"></i><b>(17)</b>
    request-channel="" <i class="conum" data-value="18"></i><b>(18)</b>
    request-destination="" <i class="conum" data-value="19"></i><b>(19)</b>
    request-destination-expression="" <i class="conum" data-value="20"></i><b>(20)</b>
    request-destination-name="" <i class="conum" data-value="21"></i><b>(21)</b>
    request-pub-sub-domain="" <i class="conum" data-value="22"></i><b>(22)</b>
    time-to-live="" <i class="conum" data-value="23"></i><b>(23)</b>
    requires-reply="" <i class="conum" data-value="24"></i><b>(24)</b>
    idle-reply-listener-timeout="" <i class="conum" data-value="25"></i><b>(25)</b>
    async=""&gt; <i class="conum" data-value="26"></i><b>(26)</b>
  &lt;int-jms:reply-listener /&gt; <i class="conum" data-value="27"></i><b>(27)</b>
&lt;/int-jms:outbound-gateway&gt;</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Reference to a <code>javax.jms.ConnectionFactory</code>.
The default <code>jmsConnectionFactory</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The name of a property that contains correlation data to correlate responses with replies.
If omitted, the gateway expects the responding system to return the value of the outbound <code>JMSMessageID</code> header in the <code>JMSCorrelationID</code> header.
If specified, the gateway generates a correlation ID and populates the specified property with it.
The responding system must echo back that value in the same property.
It can be set to <code>JMSCorrelationID</code>, in which case the standard header is used instead of a <code>String</code> property to hold the correlation data.
When you use a <code>&lt;reply-container/&gt;</code>, you must specify the <code>correlation-key</code> if you provide an explicit <code>reply-destination</code>.
Starting with version 4.0.1, this attribute also supports the value <code>JMSCorrelationID*</code>, which means that if the outbound message already has a <code>JMSCorrelationID</code> (mapped from the <code>jms_correlationId</code>) header, it is used instead of generating a new one.
Note, the <code>JMSCorrelationID*</code> key is not allowed when you use a <code>&lt;reply-container/&gt;</code>, because the container needs to set up a message selector during initialization.
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
You should understand that the gateway has no way to ensure uniqueness, and unexpected side effects can occur if the provided correlation ID is not unique.
</td>
</tr>
</table>
</div></td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>A boolean value indicating whether the delivery mode should be <code>DeliveryMode.PERSISTENT</code> (<code>true</code>) or <code>DeliveryMode.NON_PERSISTENT</code> (<code>false</code>).
This setting takes effect only if <code>explicit-qos-enabled</code> is <code>true</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>A <code>DestinationResolver</code>.
The default is a <code>DynamicDestinationResolver</code>, which maps the destination name to a queue or topic of that name.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>When set to <code>true</code>, it enables the use of quality of service attributes: <code>priority</code>, <code>delivery-mode</code>, and <code>time-to-live</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>When set to <code>true</code> (the default), the payload of the Spring Integration reply message is created from the JMS Reply message&#8217;s body (by using the <code>MessageConverter</code>).
When set to <code>false</code>, the entire JMS message becomes the payload of the Spring Integration message.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>When set to <code>true</code> (the default), the payload of the Spring Integration message is converted to a <code>JMSMessage</code> (by using the <code>MessageConverter</code>).
When set to <code>false</code>, the entire Spring Integration Message is converted to the <code>JMSMessage</code>.
In both cases, the Spring Integration message headers are mapped to JMS headers and properties by using the <code>HeaderMapper</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>A <code>HeaderMapper</code> used to map Spring Integration message headers to and from JMS message headers and properties.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>A reference to a <code>MessageConverter</code> for converting between JMS messages and the Spring Integration message payloads (or messages if <code>extract-request-payload</code> is <code>false</code>).
The default is a <code>SimpleMessageConverter</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>The default priority of request messages.
Overridden by the message priority header, if present.
Its range is <code>0</code> to <code>9</code>.
This setting takes effect only if <code>explicit-qos-enabled</code> is <code>true</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="11"></i><b>11</b></td>
<td>The time (in milliseconds) to wait for a reply.
The default is <code>5000</code> (five seconds).</td>
</tr>
<tr>
<td><i class="conum" data-value="12"></i><b>12</b></td>
<td>The channel to which the reply message is sent.</td>
</tr>
<tr>
<td><i class="conum" data-value="13"></i><b>13</b></td>
<td>A reference to a <code>Destination</code>, which is set as the <code>JMSReplyTo</code> header.
At most, only one of <code>reply-destination</code>, <code>reply-destination-expression</code>, or <code>reply-destination-name</code> is allowed.
If none is provided, a <code>TemporaryQueue</code> is used for replies to this gateway.</td>
</tr>
<tr>
<td><i class="conum" data-value="14"></i><b>14</b></td>
<td>A SpEL expression evaluating to a <code>Destination</code>, which will be set as the <code>JMSReplyTo</code> header.
The expression can result in a <code>Destination</code> object or a <code>String</code>.
It is used by the <code>DestinationResolver</code> to resolve the actual <code>Destination</code>.
At most, only one of <code>reply-destination</code>, <code>reply-destination-expression</code>, or <code>reply-destination-name</code> is allowed.
If none is provided, a <code>TemporaryQueue</code> is used for replies to this gateway.</td>
</tr>
<tr>
<td><i class="conum" data-value="15"></i><b>15</b></td>
<td>The name of the destination that is set as the JMSReplyTo header.
It is used by the <code>DestinationResolver</code> to resolve the actual <code>Destination</code>.
At most, only one of <code>reply-destination</code>, <code>reply-destination-expression</code>, or <code>reply-destination-name</code> is allowed.
If none is provided, a <code>TemporaryQueue</code> is used for replies to this gateway.</td>
</tr>
<tr>
<td><i class="conum" data-value="16"></i><b>16</b></td>
<td>When set to <code>true</code>, it indicates that any reply <code>Destination</code> resolved by the <code>DestinationResolver</code> should be a <code>Topic</code> rather then a <code>Queue</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="17"></i><b>17</b></td>
<td>The time the gateway waits when sending the reply message to the <code>reply-channel</code>.
This only has an effect if the <code>reply-channel</code> can block&#8201;&#8212;&#8201;such as a <code>QueueChannel</code> with a capacity limit that is currently full.
The default is infinity.</td>
</tr>
<tr>
<td><i class="conum" data-value="18"></i><b>18</b></td>
<td>The channel on which this gateway receives request messages.</td>
</tr>
<tr>
<td><i class="conum" data-value="19"></i><b>19</b></td>
<td>A reference to a <code>Destination</code> to which request messages are sent.
One of <code>reply-destination</code>, <code>reply-destination-expression</code>, or <code>reply-destination-name</code> is required.
You can use only one of those three attributes.</td>
</tr>
<tr>
<td><i class="conum" data-value="20"></i><b>20</b></td>
<td>A SpEL expression evaluating to a <code>Destination</code> to which request messages are sent.
The expression can result in a <code>Destination</code> object or a <code>String</code>.
It is used by the <code>DestinationResolver</code> to resolve the actual <code>Destination</code>.
Oneof <code>reply-destination</code>, <code>reply-destination-expression</code>, or <code>reply-destination-name</code> is required.
You can use only one of those three attributes.</td>
</tr>
<tr>
<td><i class="conum" data-value="21"></i><b>21</b></td>
<td>The name of the destination to which request messages are sent.
It is used by the <code>DestinationResolver</code> to resolve the actual <code>Destination</code>.
One of <code>reply-destination</code>, <code>reply-destination-expression</code>, or <code>reply-destination-name</code> is required.
You can use only one of those three attributes.</td>
</tr>
<tr>
<td><i class="conum" data-value="22"></i><b>22</b></td>
<td>When set to <code>true</code>, it indicates that any request <code>Destination</code> resolved by the <code>DestinationResolver</code> should be a <code>Topic</code> rather then a <code>Queue</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="23"></i><b>23</b></td>
<td>Specifies the message time to live.
This setting takes effect only if <code>explicit-qos-enabled</code> is <code>true</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="24"></i><b>24</b></td>
<td>Specifies whether this outbound gateway must return a non-null value.
By default, this value is <code>true</code>, and a <code>MessageTimeoutException</code> is thrown when the underlying service does not return a value after the <code>receive-timeout</code>.
Note that, if the service is never expected to return a reply, it would be better to use a <code>&lt;int-jms:outbound-channel-adapter/&gt;</code> instead of a <code>&lt;int-jms:outbound-gateway/&gt;</code> with <code>requires-reply="false"</code>.
With the latter, the sending thread is blocked, waiting for a reply for the <code>receive-timeout</code> period.</td>
</tr>
<tr>
<td><i class="conum" data-value="25"></i><b>25</b></td>
<td>When you use a <code>&lt;reply-listener /&gt;</code>, its lifecycle (start and stop) matches that of the gateway by default.
When this value is greater than <code>0</code>, the container is started on demand (when a request is sent).
The container continues to run until at least this time elapses with no requests being received (and until no replies are outstanding).
The container is started again on the next request.
The stop time is a minimum and may actually be up to 1.5x this value.</td>
</tr>
<tr>
<td><i class="conum" data-value="26"></i><b>26</b></td>
<td>See <a href="#jms-async-gateway">Async Gateway</a>.</td>
</tr>
<tr>
<td><i class="conum" data-value="27"></i><b>27</b></td>
<td>When this element is included, replies are received by an asynchronous <code>MessageListenerContainer</code> rather than creating a consumer for each reply.
This can be more efficient in many cases.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="jms-header-mapping"><a class="anchor" href="#jms-header-mapping"></a>Mapping Message Headers to and from JMS Message</h3>
<div class="paragraph">
<p>JMS messages can contain meta-information such as JMS API headers and simple properties.
You can map those to and from Spring Integration message headers by using <code>JmsHeaderMapper</code>.
The JMS API headers are passed to the appropriate setter methods (such as <code>setJMSReplyTo</code>), whereas other headers are copied to the general properties of the JMS Message.
JMS outbound gateway is bootstrapped with the default implementation of <code>JmsHeaderMapper</code>, which will map standard JMS API Headers as well as primitive or <code>String</code> message headers.
You could also provide a custom header mapper by using the <code>header-mapper</code> attribute of inbound and outbound gateways.</p>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
Many JMS vendor-specific clients don&#8217;t allow setting the <code>deliveryMode</code>, <code>priority</code> and <code>timeToLive</code> properties directly on an already created JMS message.
They are considered to be QoS properties and therefore have to be propagated to the target <code>MessageProducer.send(message, deliveryMode, priority, timeToLive)</code> API.
For this reason the <code>DefaultJmsHeaderMapper</code> doesn&#8217;t map appropriate Spring Integration headers (or expression results) into the mentioned JMS message properties.
Instead, a <code>DynamicJmsTemplate</code> is used by the <code>JmsSendingMessageHandler</code> to propagate header values from the request message into the <code>MessageProducer.send()</code> API.
To enable this feature, you must configure the outbound endpoint with a <code>DynamicJmsTemplate</code> with its <code>explicitQosEnabled</code> property set to true.
The Spring Integration Java DSL configures a <code>DynamicJmsTemplate</code> by default but you must still set the <code>explicitQosEnabled</code> property.
</td>
</tr>
</table>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
Since version 4.0, the <code>JMSPriority</code> header is mapped to the standard <code>priority</code> header for inbound messages.
Previously, the <code>priority</code> header was only used for outbound messages.
To revert to the previous behavior (that is, to not map the inbound priority), set the <code>mapInboundPriority</code> property of <code>DefaultJmsHeaderMapper</code> to <code>false</code>.
</td>
</tr>
</table>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
Since version 4.3, the <code>DefaultJmsHeaderMapper</code> maps the standard <code>correlationId</code> header as a message property by invoking its <code>toString()</code> method (<code>correlationId</code> is often a <code>UUID</code>, which is not supported by JMS).
On the inbound side, it is mapped as a <code>String</code>.
This is independent of the <code>jms_correlationId</code> header, which is mapped to and from the <code>JMSCorrelationID</code> header.
The <code>JMSCorrelationID</code> is generally used to correlate requests and replies, whereas the <code>correlationId</code> is often used to combine related messages into a group (such as with an aggregator or a resequencer).
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Starting with version 5.1, the <code>DefaultJmsHeaderMapper</code> can be configured for mapping inbound <code>JMSDeliveryMode</code> and <code>JMSExpiration</code> properties:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Bean
public DefaultJmsHeaderMapper jmsHeaderMapper() {
    DefaultJmsHeaderMapper mapper = new DefaultJmsHeaderMapper();
    mapper.setMapInboundDeliveryMode(true)
    mapper.setMapInboundExpiration(true)
    return mapper;
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>These JMS properties are mapped to the <code>JmsHeaders.DELIVERY_MODE</code> and <code>JmsHeaders.EXPIRATION</code> Spring Message headers respectively.</p>
</div>
</div>
<div class="sect2">
<h3 id="jms-conversion-and-marshalling"><a class="anchor" href="#jms-conversion-and-marshalling"></a>Message Conversion, Marshalling, and Unmarshalling</h3>
<div class="paragraph">
<p>If you need to convert the message, all JMS adapters and gateways let you provide a <code>MessageConverter</code> by setting the <code>message-converter</code> attribute.
To do so, provide the bean name of an instance of <code>MessageConverter</code> that is available within the same ApplicationContext.
Also, to provide some consistency with marshaller and unmarshaller interfaces, Spring provides <code>MarshallingMessageConverter</code>, which you can configure with your own custom marshallers and unmarshallers.
The following example shows how to do so</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:inbound-gateway request-destination="requestQueue"
    request-channel="inbound-gateway-channel"
    message-converter="marshallingMessageConverter"/&gt;

&lt;bean id="marshallingMessageConverter"
    class="org.springframework.jms.support.converter.MarshallingMessageConverter"&gt;
    &lt;constructor-arg&gt;
        &lt;bean class="org.bar.SampleMarshaller"/&gt;
    &lt;/constructor-arg&gt;
    &lt;constructor-arg&gt;
        &lt;bean class="org.bar.SampleUnmarshaller"/&gt;
    &lt;/constructor-arg&gt;
&lt;/bean&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
When you provide your own <code>MessageConverter</code> instance, it is still wrapped within the <code>HeaderMappingMessageConverter</code>.
This means that the 'extract-request-payload' and 'extract-reply-payload' properties can affect the actual objects passed to your converter.
The <code>HeaderMappingMessageConverter</code> itself delegates to a target <code>MessageConverter</code> while also mapping the Spring Integration <code>MessageHeaders</code> to JMS message properties and back again.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="jms-channel"><a class="anchor" href="#jms-channel"></a>JMS-backed Message Channels</h3>
<div class="paragraph">
<p>The channel adapters and gateways featured earlier are all intended for applications that integrate with other external systems.
The inbound options assume that some other system is sending JMS messages to the JMS destination, and the outbound options assume that some other system is receiving from the destination.
The other system may or may not be a Spring Integration application.
Of course, when sending a Spring Integration message instance as the body of the JMS message itself (with 'extract-payload' value set to <code>false</code>), it is assumed that the other system is based on Spring Integration.
However, that is by no means a requirement.
That flexibility is one of the benefits of using a message-based integration option with the abstraction of &#8220;channels&#8221;( or destinations in the case of JMS).</p>
</div>
<div class="paragraph">
<p>Sometimes, both the producer and consumer for a given JMS Destination are intended to be part of the same application, running within the same process.
You can accomplish this by using a pair of inbound and outbound channel adapters.
The problem with that approach is that you need two adapters, even though, conceptually, the goal is to have a single message channel.
A better option is supported as of Spring Integration version 2.0.
Now it is possible to define a single &#8220;channel&#8221; when using the JMS namespace, as the following example shows:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:channel id="jmsChannel" queue="exampleQueue"/&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The channel in the preceding example behaves much like a normal <code>&lt;channel/&gt;</code> element from the main Spring Integration namespace.
It can be referenced by both the <code>input-channel</code> and <code>output-channel</code> attributes of any endpoint.
The difference is that this channel is backed by a JMS Queue instance named <code>exampleQueue</code>.
This means that asynchronous messaging is possible between the producing and consuming endpoints.
However, unlike the simpler asynchronous message channels created by adding a <code>&lt;queue/&gt;</code> element within a non-JMS <code>&lt;channel/&gt;</code> element, the messages are not stored in an in-memory queue.
Instead, those messages are passed within a JMS message body, and the full power of the underlying JMS provider is then available for that channel.
Probably the most common rationale for using this alternative is to take advantage of the persistence made available by the store-and-forward approach of JMS messaging.</p>
</div>
<div class="paragraph">
<p>If configured properly, the JMS-backed message channel also supports transactions.
In other words, a producer would not actually write to a transactional JMS-backed channel if its send operation is part of a transaction that rolls back.
Likewise, a consumer would not physically remove a JMS message from the channel if the reception of that message is part of a transaction that rolls back.
Note that the producer and consumer transactions are separate in such a scenario.
This is significantly different than the propagation of a transactional context across a simple, synchronous <code>&lt;channel/&gt;</code> element that has no <code>&lt;queue/&gt;</code> child element.</p>
</div>
<div class="paragraph">
<p>Since the preceding example above references a JMS Queue instance, it acts as a point-to-point channel.
If, on the other hand, you need publish-subscribe behavior, you can use a separate element and reference a JMS Topic instead.
The following example shows how to do so:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:publish-subscribe-channel id="jmsChannel" topic="exampleTopic"/&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>For either type of JMS-backed channel, the name of the destination may be provided instead of a reference, as the following example shows:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:channel id="jmsQueueChannel" queue-name="exampleQueueName"/&gt;

&lt;jms:publish-subscribe-channel id="jmsTopicChannel" topic-name="exampleTopicName"/&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>In the preceding examples, the destination names are resolved by Spring&#8217;s default <code>DynamicDestinationResolver</code> implementation, but you could provide any implementation of the <code>DestinationResolver</code> interface.
Also, the JMS <code>ConnectionFactory</code> is a required property of the channel, but, by default, the expected bean name would be <code>jmsConnectionFactory</code>.
The following example provides both a custom instance for resolution of the JMS destination names and a different name for the <code>ConnectionFactory</code>:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;int-jms:channel id="jmsChannel" queue-name="exampleQueueName"
    destination-resolver="customDestinationResolver"
    connection-factory="customConnectionFactory"/&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>For the <code>&lt;publish-subscribe-channel /&gt;</code>, set the <code>durable</code> attribute to <code>true</code> for a durable subscription or <code>subscription-shared</code> for a shared subscription (requires a JMS 2.0 broker and has been available since version 4.2).
Use <code>subscription</code> to name the subscription.</p>
</div>
</div>
<div class="sect2">
<h3 id="jms-selectors"><a class="anchor" href="#jms-selectors"></a>Using JMS Message Selectors</h3>
<div class="paragraph">
<p>With JMS message selectors, you can filter <a href="https://docs.oracle.com/javaee/6/api/javax/jms/Message.html">JMS Messages</a> based on JMS headers as well as JMS properties.
For example, if you want to listen to messages whose custom JMS header property, <code>myHeaderProperty</code>, equals <code>something</code>, you can specify the following expression:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">myHeaderProperty = 'something'</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Message selector expressions are a subset of the <a href="https://en.wikipedia.org/wiki/SQL-92">SQL-92</a> conditional expression syntax and are defined as part of the <a href="https://download.oracle.com/otn-pub/jcp/7195-jms-1.1-fr-spec-oth-JSpec/jms-1_1-fr-spec.pdf">Java Message Service</a> specification (Version 1.1, April 12, 2002).
Specifically, see chapter "3.8, Message Selection".
It contains a detailed explanation of the expressions syntax.</p>
</div>
<div class="paragraph">
<p>You can specify the JMS message <code>selector</code> attribute by using XML namespace configuration for the following Spring Integration JMS components:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>JMS Channel</p>
</li>
<li>
<p>JMS Publish Subscribe Channel</p>
</li>
<li>
<p>JMS Inbound Channel Adapter</p>
</li>
<li>
<p>JMS Inbound Gateway</p>
</li>
<li>
<p>JMS Message-driven Channel Adapter</p>
</li>
</ul>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
You cannot reference message body values by using JMS Message selectors.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="jms-samples"><a class="anchor" href="#jms-samples"></a>JMS Samples</h3>
<div class="paragraph">
<p>To experiment with these JMS adapters, check out the JMS samples available in the Spring Integration Samples Git repository at <a href="https://github.com/SpringSource/spring-integration-samples/tree/master/basic/jms">https://github.com/SpringSource/spring-integration-samples/tree/master/basic/jms</a>.</p>
</div>
<div class="paragraph">
<p>That repository includes two samples.
One provides inbound and outbound channel adapters, and the other provides inbound and outbound gateways.
They are configured to run with an embedded <a href="https://activemq.apache.org/">ActiveMQ</a> process, but you can modify the <a href="https://github.com/SpringSource/spring-integration-samples/blob/master/basic/jms/src/main/resources/META-INF/spring/integration/common.xml">common.xml</a> Spring application context file of each sample to support either a different JMS provider or a standalone ActiveMQ process.</p>
</div>
<div class="paragraph">
<p>In other words, you can split the configuration so that the inbound and outbound adapters run in separate JVMs.
If you have ActiveMQ installed, modify the <code>brokerURL</code> property within the common.xml file to use <code>tcp://localhost:61616</code> (instead of <code>vm://localhost</code>).
Both of the samples accept input from stdin and echo back to stdout.
Look at the configuration to see how these messages are routed over JMS.</p>
</div>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Version 5.3.2.RELEASE<br>
Last updated 2020-07-22 17:49:12 UTC
</div>
</div>
<link rel="stylesheet" href="js/highlight/styles/github.min.css">
<script src="js/highlight/highlight.min.js"></script>
<script>hljs.initHighlighting()</script>
<script type="text/javascript" src="js/tocbot/tocbot.min.js"></script>
<script type="text/javascript" src="js/toc.js"></script>
<script>if(window.parent==window){(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create','UA-2728886-23','auto',{'siteSpeedSampleRate':100});ga('send','pageview');}</script></body>
</html>