<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge"><![endif]-->
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 1.5.8">
<meta name="author" content="Oliver Gierke, Thomas Darimont, Christoph Strobl, Mark Pollack, Thomas Risberg, Mark Paluch, Jay Bryant">
<title>Spring Data Commons - Reference Documentation</title>
<link rel="stylesheet" href="./css/spring.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>
<body class="book toc2 toc-left">
<div id="header">
<h1>Spring Data Commons - Reference Documentation</h1>
<div class="details">
<span id="author" class="author">Oliver Gierke</span><br>
<span id="author2" class="author">Thomas Darimont</span><br>
<span id="author3" class="author">Christoph Strobl</span><br>
<span id="author4" class="author">Mark Pollack</span><br>
<span id="author5" class="author">Thomas Risberg</span><br>
<span id="author6" class="author">Mark Paluch</span><br>
<span id="author7" class="author">Jay Bryant</span><br>
<span id="revnumber">version 2.3.2.RELEASE,</span>
<span id="revdate">2020-07-22</span>
</div>
<div id="toc" class="toc2">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel0">
<li><a href="#preface">Preface</a>
<ul class="sectlevel1">
<li><a href="#project">1. Project Metadata</a></li>
</ul>
</li>
<li><a href="#reference-documentation">Reference Documentation</a>
<ul class="sectlevel1">
<li><a href="#dependencies">2. Dependencies</a>
<ul class="sectlevel2">
<li><a href="#dependencies.spring-boot">2.1. Dependency Management with Spring Boot</a></li>
<li><a href="#dependencies.spring-framework">2.2. Spring Framework</a></li>
</ul>
</li>
<li><a href="#mapping.fundamentals">3. Object Mapping Fundamentals</a>
<ul class="sectlevel2">
<li><a href="#mapping.object-creation">3.1. Object creation</a></li>
<li><a href="#mapping.property-population">3.2. Property population</a></li>
<li><a href="#mapping.general-recommendations">3.3. General recommendations</a></li>
<li><a href="#mapping.kotlin">3.4. Kotlin support</a>
<ul class="sectlevel3">
<li><a href="#">3.4.1. Kotlin object creation</a></li>
<li><a href="#">3.4.2. Property population of Kotlin data classes</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#repositories">4. Working with Spring Data Repositories</a>
<ul class="sectlevel2">
<li><a href="#repositories.core-concepts">4.1. Core concepts</a></li>
<li><a href="#repositories.query-methods">4.2. Query methods</a></li>
<li><a href="#repositories.definition">4.3. Defining Repository Interfaces</a>
<ul class="sectlevel3">
<li><a href="#repositories.definition-tuning">4.3.1. Fine-tuning Repository Definition</a></li>
<li><a href="#repositories.multiple-modules">4.3.2. Using Repositories with Multiple Spring Data Modules</a></li>
</ul>
</li>
<li><a href="#repositories.query-methods.details">4.4. Defining Query Methods</a>
<ul class="sectlevel3">
<li><a href="#repositories.query-methods.query-lookup-strategies">4.4.1. Query Lookup Strategies</a></li>
<li><a href="#repositories.query-methods.query-creation">4.4.2. Query Creation</a></li>
<li><a href="#repositories.query-methods.query-property-expressions">4.4.3. Property Expressions</a></li>
<li><a href="#repositories.special-parameters">4.4.4. Special parameter handling</a>
<ul class="sectlevel4">
<li><a href="#repositories.paging-and-sorting">Paging and Sorting</a></li>
</ul>
</li>
<li><a href="#repositories.limit-query-result">4.4.5. Limiting Query Results</a></li>
<li><a href="#repositories.collections-and-iterables">4.4.6. Repository Methods Returning Collections or Iterables</a>
<ul class="sectlevel4">
<li><a href="#repositories.collections-and-iterables.streamable">Using Streamable as Query Method Return Type</a></li>
<li><a href="#repositories.collections-and-iterables.streamable-wrapper">Returning Custom Streamable Wrapper Types</a></li>
<li><a href="#repositories.collections-and-iterables.vavr">Support for Vavr Collections</a></li>
</ul>
</li>
<li><a href="#repositories.nullability">4.4.7. Null Handling of Repository Methods</a>
<ul class="sectlevel4">
<li><a href="#repositories.nullability.annotations">Nullability Annotations</a></li>
<li><a href="#repositories.nullability.kotlin">Nullability in Kotlin-based Repositories</a></li>
</ul>
</li>
<li><a href="#repositories.query-streaming">4.4.8. Streaming query results</a></li>
<li><a href="#repositories.query-async">4.4.9. Async query results</a></li>
</ul>
</li>
<li><a href="#repositories.create-instances">4.5. Creating Repository Instances</a>
<ul class="sectlevel3">
<li><a href="#repositories.create-instances.spring">4.5.1. XML configuration</a>
<ul class="sectlevel4">
<li><a href="#">Using filters</a></li>
</ul>
</li>
<li><a href="#repositories.create-instances.java-config">4.5.2. JavaConfig</a></li>
<li><a href="#repositories.create-instances.standalone">4.5.3. Standalone usage</a></li>
</ul>
</li>
<li><a href="#repositories.custom-implementations">4.6. Custom Implementations for Spring Data Repositories</a>
<ul class="sectlevel3">
<li><a href="#repositories.single-repository-behavior">4.6.1. Customizing Individual Repositories</a>
<ul class="sectlevel4">
<li><a href="#">Configuration</a></li>
</ul>
</li>
<li><a href="#repositories.customize-base-repository">4.6.2. Customize the Base Repository</a></li>
</ul>
</li>
<li><a href="#core.domain-events">4.7. Publishing Events from Aggregate Roots</a></li>
<li><a href="#core.extensions">4.8. Spring Data Extensions</a>
<ul class="sectlevel3">
<li><a href="#core.extensions.querydsl">4.8.1. Querydsl Extension</a></li>
<li><a href="#core.web">4.8.2. Web support</a>
<ul class="sectlevel4">
<li><a href="#core.web.basic">Basic Web Support</a></li>
<li><a href="#core.web.pageables">Hypermedia Support for Pageables</a></li>
<li><a href="#core.web.binding">Web Databinding Support</a></li>
<li><a href="#core.web.type-safe">Querydsl Web Support</a></li>
</ul>
</li>
<li><a href="#core.repository-populators">4.8.3. Repository Populators</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#projections">5. Projections</a>
<ul class="sectlevel2">
<li><a href="#projections.interfaces">5.1. Interface-based Projections</a>
<ul class="sectlevel3">
<li><a href="#projections.interfaces.closed">5.1.1. Closed Projections</a></li>
<li><a href="#projections.interfaces.open">5.1.2. Open Projections</a></li>
</ul>
</li>
<li><a href="#projections.dtos">5.2. Class-based Projections (DTOs)</a></li>
<li><a href="#projection.dynamic">5.3. Dynamic Projections</a></li>
</ul>
</li>
<li><a href="#query-by-example">6. Query by Example</a>
<ul class="sectlevel2">
<li><a href="#query-by-example.introduction">6.1. Introduction</a></li>
<li><a href="#query-by-example.usage">6.2. Usage</a></li>
<li><a href="#query-by-example.matchers">6.3. Example Matchers</a></li>
</ul>
</li>
<li><a href="#auditing">7. Auditing</a>
<ul class="sectlevel2">
<li><a href="#auditing.basics">7.1. Basics</a>
<ul class="sectlevel3">
<li><a href="#auditing.annotations">7.1.1. Annotation-based Auditing Metadata</a></li>
<li><a href="#auditing.interfaces">7.1.2. Interface-based Auditing Metadata</a></li>
<li><a href="#auditing.auditor-aware">7.1.3. <code>AuditorAware</code></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#appendix">8. Appendix</a>
<ul class="sectlevel2">
<li><a href="#repositories.namespace-reference">Appendix A: Namespace reference</a>
<ul class="sectlevel3">
<li><a href="#populator.namespace-dao-config">The <code>&lt;repositories /&gt;</code> Element</a></li>
</ul>
</li>
<li><a href="#populator.namespace-reference">Appendix B: Populators namespace reference</a>
<ul class="sectlevel3">
<li><a href="#namespace-dao-config">The &lt;populator /&gt; element</a></li>
</ul>
</li>
<li><a href="#repository-query-keywords">Appendix C: Repository query keywords</a>
<ul class="sectlevel3">
<li><a href="#">Supported query keywords</a></li>
</ul>
</li>
<li><a href="#repository-query-return-types">Appendix D: Repository query return types</a>
<ul class="sectlevel3">
<li><a href="#">Supported Query Return Types</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>&#169; 2008-2019 The original authors.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.
</td>
</tr>
</table>
</div>
</div>
</div>
<h1 id="preface" class="sect0"><a class="anchor" href="#preface"></a>Preface</h1>
<div class="openblock partintro">
<div class="content">
The Spring Data Commons project applies core Spring concepts to the development of solutions using many relational and non-relational data stores.
</div>
</div>
<div class="sect1">
<h2 id="project"><a class="anchor" href="#project"></a>1. Project Metadata</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Version control: <a href="https://github.com/spring-projects/spring-data-commons" class="bare">https://github.com/spring-projects/spring-data-commons</a></p>
</li>
<li>
<p>Bugtracker: <a href="https://jira.spring.io/browse/DATACMNS" class="bare">https://jira.spring.io/browse/DATACMNS</a></p>
</li>
<li>
<p>Release repository: <a href="https://repo.spring.io/libs-release" class="bare">https://repo.spring.io/libs-release</a></p>
</li>
<li>
<p>Milestone repository: <a href="https://repo.spring.io/libs-milestone" class="bare">https://repo.spring.io/libs-milestone</a></p>
</li>
<li>
<p>Snapshot repository: <a href="https://repo.spring.io/libs-snapshot" class="bare">https://repo.spring.io/libs-snapshot</a></p>
</li>
</ul>
</div>
</div>
</div>
<h1 id="reference-documentation" class="sect0"><a class="anchor" href="#reference-documentation"></a>Reference Documentation</h1>
<div class="sect1">
<h2 id="dependencies"><a class="anchor" href="#dependencies"></a>2. Dependencies</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Due to the different inception dates of individual Spring Data modules, most of them carry different major and minor version numbers. The easiest way to find compatible ones is to rely on the Spring Data Release Train BOM that we ship with the compatible versions defined. In a Maven project, you would declare this dependency in the <code>&lt;dependencyManagement /&gt;</code> section of your POM, as follows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 1. Using the Spring Data release train BOM</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;dependencyManagement&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;
      &lt;artifactId&gt;spring-data-releasetrain&lt;/artifactId&gt;
      &lt;version&gt;Neumann-SR2&lt;/version&gt;
      &lt;scope&gt;import&lt;/scope&gt;
      &lt;type&gt;pom&lt;/type&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;</code></pre>
</div>
</div>
</div>
</div>
<div id="dependencies.train-names" class="paragraph">
<p>The current release train version is <code>Neumann-SR2</code>. The train names ascend alphabetically and the currently available trains are listed <a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-planning">here</a>. The version name follows the following pattern: <code>${name}-${release}</code>, where release can be one of the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>BUILD-SNAPSHOT</code>: Current snapshots</p>
</li>
<li>
<p><code>M1</code>, <code>M2</code>, and so on: Milestones</p>
</li>
<li>
<p><code>RC1</code>, <code>RC2</code>, and so on: Release candidates</p>
</li>
<li>
<p><code>RELEASE</code>: GA release</p>
</li>
<li>
<p><code>SR1</code>, <code>SR2</code>, and so on: Service releases</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A working example of using the BOMs can be found in our <a href="https://github.com/spring-projects/spring-data-examples/tree/master/bom">Spring Data examples repository</a>. With that in place, you can declare the Spring Data modules you would like to use without a version in the <code>&lt;dependencies /&gt;</code> block, as follows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 2. Declaring a dependency to a Spring Data module</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;dependencies&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;
    &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt;
  &lt;/dependency&gt;
&lt;dependencies&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="dependencies.spring-boot"><a class="anchor" href="#dependencies.spring-boot"></a>2.1. Dependency Management with Spring Boot</h3>
<div class="paragraph">
<p>Spring Boot selects a recent version of Spring Data modules for you. If you still want to upgrade to a newer version, configure the property <code>spring-data-releasetrain.version</code> to the <a href="#dependencies.train-names">train name and iteration</a> you would like to use.</p>
</div>
</div>
<div class="sect2">
<h3 id="dependencies.spring-framework"><a class="anchor" href="#dependencies.spring-framework"></a>2.2. Spring Framework</h3>
<div class="paragraph">
<p>The current version of Spring Data modules require Spring Framework in version 5.2.8.RELEASE or better. The modules might also work with an older bugfix version of that minor version. However, using the most recent version within that generation is highly recommended.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="mapping.fundamentals"><a class="anchor" href="#mapping.fundamentals"></a>3. Object Mapping Fundamentals</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This section covers the fundamentals of Spring Data object mapping, object creation, field and property access, mutability and immutability.
Note, that this section only applies to Spring Data modules that do not use the object mapping of the underlying data store (like JPA).
Also be sure to consult the store-specific sections for store-specific object mapping, like indexes, customizing column or field names or the like.</p>
</div>
<div class="paragraph">
<p>Core responsibility of the Spring Data object mapping is to create instances of domain objects and map the store-native data structures onto those.
This means we need two fundamental steps:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Instance creation by using one of the constructors exposed.</p>
</li>
<li>
<p>Instance population to materialize all exposed properties.</p>
</li>
</ol>
</div>
<div class="sect2">
<h3 id="mapping.object-creation"><a class="anchor" href="#mapping.object-creation"></a>3.1. Object creation</h3>
<div class="paragraph">
<p>Spring Data automatically tries to detect a persistent entity&#8217;s constructor to be used to materialize objects of that type.
The resolution algorithm works as follows:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>If there&#8217;s a no-argument constructor, it will be used.
Other constructors will be ignored.</p>
</li>
<li>
<p>If there&#8217;s a single constructor taking arguments, it will be used.</p>
</li>
<li>
<p>If there are multiple constructors taking arguments, the one to be used by Spring Data will have to be annotated with <code>@PersistenceConstructor</code>.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>The value resolution assumes constructor argument names to match the property names of the entity, i.e. the resolution will be performed as if the property was to be populated, including all customizations in mapping (different datastore column or field name etc.).
This also requires either parameter names information available in the class file or an <code>@ConstructorProperties</code> annotation being present on the constructor.</p>
</div>
<div class="paragraph">
<p>The value resolution can be customized by using Spring Framework&#8217;s <code>@Value</code> value annotation using a store-specific SpEL expression.
Please consult the section on store specific mappings for further details.</p>
</div>
<div id="mapping.object-creation.details" class="sidebarblock">
<div class="content">
<div class="title">Object creation internals</div>
<div class="paragraph">
<p>To avoid the overhead of reflection, Spring Data object creation uses a factory class generated at runtime by default, which will call the domain classes constructor directly.
I.e. for this example type:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">class Person {
  Person(String firstname, String lastname) { … }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>we will create a factory class semantically equivalent to this one at runtime:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">class PersonObjectInstantiator implements ObjectInstantiator {

  Object newInstance(Object... args) {
    return new Person((String) args[0], (String) args[1]);
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>This gives us a roundabout 10% performance boost over reflection.
For the domain class to be eligible for such optimization, it needs to adhere to a set of constraints:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>it must not be a private class</p>
</li>
<li>
<p>it must not be a non-static inner class</p>
</li>
<li>
<p>it must not be a CGLib proxy class</p>
</li>
<li>
<p>the constructor to be used by Spring Data must not be private</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If any of these criteria match, Spring Data will fall back to entity instantiation via reflection.</p>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mapping.property-population"><a class="anchor" href="#mapping.property-population"></a>3.2. Property population</h3>
<div class="paragraph">
<p>Once an instance of the entity has been created, Spring Data populates all remaining persistent properties of that class.
Unless already populated by the entity&#8217;s constructor (i.e. consumed through its constructor argument list), the identifier property will be populated first to allow the resolution of cyclic object references.
After that, all non-transient properties that have not already been populated by the constructor are set on the entity instance.
For that we use the following algorithm:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>If the property is immutable but exposes a <code>with…</code> method (see below), we use the <code>with…</code> method to create a new entity instance with the new property value.</p>
</li>
<li>
<p>If property access (i.e. access through getters and setters) is defined, we&#8217;re invoking the setter method.</p>
</li>
<li>
<p>If the property is mutable we set the field directly.</p>
</li>
<li>
<p>If the property is immutable we&#8217;re using the constructor to be used by persistence operations (see <a href="#mapping.object-creation">Object creation</a>) to create a copy of the instance.</p>
</li>
<li>
<p>By default, we set the field value directly.</p>
</li>
</ol>
</div>
<div id="mapping.property-population.details" class="sidebarblock">
<div class="content">
<div class="title">Property population internals</div>
<div class="paragraph">
<p>Similarly to our <a href="#mapping.object-creation.details">optimizations in object construction</a> we also use Spring Data runtime generated accessor classes to interact with the entity instance.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">class Person {

  private final Long id;
  private String firstname;
  private @AccessType(Type.PROPERTY) String lastname;

  Person() {
    this.id = null;
  }

  Person(Long id, String firstname, String lastname) {
    // Field assignments
  }

  Person withId(Long id) {
    return new Person(id, this.firstname, this.lastame);
  }

  void setLastname(String lastname) {
    this.lastname = lastname;
  }
}</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 3. A generated Property Accessor</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">class PersonPropertyAccessor implements PersistentPropertyAccessor {

  private static final MethodHandle firstname;              <i class="conum" data-value="2"></i><b>(2)</b>

  private Person person;                                    <i class="conum" data-value="1"></i><b>(1)</b>

  public void setProperty(PersistentProperty property, Object value) {

    String name = property.getName();

    if ("firstname".equals(name)) {
      firstname.invoke(person, (String) value);             <i class="conum" data-value="2"></i><b>(2)</b>
    } else if ("id".equals(name)) {
      this.person = person.withId((Long) value);            <i class="conum" data-value="3"></i><b>(3)</b>
    } else if ("lastname".equals(name)) {
      this.person.setLastname((String) value);              <i class="conum" data-value="4"></i><b>(4)</b>
    }
  }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>PropertyAccessor&#8217;s hold a mutable instance of the underlying object. This is, to enable mutations of otherwise immutable properties.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>By default, Spring Data uses field-access to read and write property values. As per visibility rules of <code>private</code> fields, <code>MethodHandles</code> are used to interact with fields.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The class exposes a <code>withId(…)</code> method that&#8217;s used to set the identifier, e.g. when an instance is inserted into the datastore and an identifier has been generated. Calling <code>withId(…)</code> creates a new <code>Person</code> object. All subsequent mutations will take place in the new instance leaving the previous untouched.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Using property-access allows direct method invocations without using <code>MethodHandles</code>.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="paragraph">
<p>This gives us a roundabout 25% performance boost over reflection.
For the domain class to be eligible for such optimization, it needs to adhere to a set of constraints:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Types must not reside in the default or under the <code>java</code> package.</p>
</li>
<li>
<p>Types and their constructors must be <code>public</code></p>
</li>
<li>
<p>Types that are inner classes must be <code>static</code>.</p>
</li>
<li>
<p>The used Java Runtime must allow for declaring classes in the originating <code>ClassLoader</code>. Java 9 and newer impose certain limitations.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>By default, Spring Data attempts to use generated property accessors and falls back to reflection-based ones if a limitation is detected.</p>
</div>
</div>
</div>
<div class="paragraph">
<p>Let&#8217;s have a look at the following entity:</p>
</div>
<div class="exampleblock">
<div class="title">Example 4. A sample entity</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">class Person {

  private final @Id Long id;                                                <i class="conum" data-value="1"></i><b>(1)</b>
  private final String firstname, lastname;                                 <i class="conum" data-value="2"></i><b>(2)</b>
  private final LocalDate birthday;
  private final int age;                                                    <i class="conum" data-value="3"></i><b>(3)</b>

  private String comment;                                                   <i class="conum" data-value="4"></i><b>(4)</b>
  private @AccessType(Type.PROPERTY) String remarks;                        <i class="conum" data-value="5"></i><b>(5)</b>

  static Person of(String firstname, String lastname, LocalDate birthday) { <i class="conum" data-value="6"></i><b>(6)</b>

    return new Person(null, firstname, lastname, birthday,
      Period.between(birthday, LocalDate.now()).getYears());
  }

  Person(Long id, String firstname, String lastname, LocalDate birthday, int age) { <i class="conum" data-value="6"></i><b>(6)</b>

    this.id = id;
    this.firstname = firstname;
    this.lastname = lastname;
    this.birthday = birthday;
    this.age = age;
  }

  Person withId(Long id) {                                                  <i class="conum" data-value="1"></i><b>(1)</b>
    return new Person(id, this.firstname, this.lastname, this.birthday, this.age);
  }

  void setRemarks(String remarks) {                                         <i class="conum" data-value="5"></i><b>(5)</b>
    this.remarks = remarks;
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The identifier property is final but set to <code>null</code> in the constructor.
The class exposes a <code>withId(…)</code> method that&#8217;s used to set the identifier, e.g. when an instance is inserted into the datastore and an identifier has been generated.
The original <code>Person</code> instance stays unchanged as a new one is created.
The same pattern is usually applied for other properties that are store managed but might have to be changed for persistence operations.
The wither method is optional as the persistence constructor (see 6) is effectively a copy constructor and setting the property will be translated into creating a fresh instance with the new identifier value applied.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The <code>firstname</code> and <code>lastname</code> properties are ordinary immutable properties potentially exposed through getters.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The <code>age</code> property is an immutable but derived one from the <code>birthday</code> property.
With the design shown, the database value will trump the defaulting as Spring Data uses the only declared constructor.
Even if the intent is that the calculation should be preferred, it&#8217;s important that this constructor also takes <code>age</code> as parameter (to potentially ignore it) as otherwise the property population step will attempt to set the age field and fail due to it being immutable and no <code>with…</code> method being present.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The <code>comment</code> property is mutable is populated by setting its field directly.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The <code>remarks</code> properties are mutable and populated by setting the <code>comment</code> field directly or by invoking the setter method for</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The class exposes a factory method and a constructor for object creation.
The core idea here is to use factory methods instead of additional constructors to avoid the need for constructor disambiguation through <code>@PersistenceConstructor</code>.
Instead, defaulting of properties is handled within the factory method.</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="mapping.general-recommendations"><a class="anchor" href="#mapping.general-recommendations"></a>3.3. General recommendations</h3>
<div class="ulist">
<ul>
<li>
<p><em>Try to stick to immutable objects</em>&#8201;&#8212;&#8201;Immutable objects are straightforward to create as materializing an object is then a matter of calling its constructor only.
Also, this avoids your domain objects to be littered with setter methods that allow client code to manipulate the objects state.
If you need those, prefer to make them package protected so that they can only be invoked by a limited amount of co-located types.
Constructor-only materialization is up to 30% faster than properties population.</p>
</li>
<li>
<p><em>Provide an all-args constructor</em>&#8201;&#8212;&#8201;Even if you cannot or don&#8217;t want to model your entities as immutable values, there&#8217;s still value in providing a constructor that takes all properties of the entity as arguments, including the mutable ones, as this allows the object mapping to skip the property population for optimal performance.</p>
</li>
<li>
<p><em>Use factory methods instead of overloaded constructors to avoid <code>@PersistenceConstructor</code></em>&#8201;&#8212;&#8201;With an all-argument constructor needed for optimal performance, we usually want to expose more application use case specific constructors that omit things like auto-generated identifiers etc.
It&#8217;s an established pattern to rather use static factory methods to expose these variants of the all-args constructor.</p>
</li>
<li>
<p><em>Make sure you adhere to the constraints that allow the generated instantiator and property accessor classes to be used</em>&#8201;&#8212;&#8201;</p>
</li>
<li>
<p><em>For identifiers to be generated, still use a final field in combination with an all-arguments persistence constructor (preferred) or a <code>with…</code> method</em>&#8201;&#8212;&#8201;</p>
</li>
<li>
<p><em>Use Lombok to avoid boilerplate code</em>&#8201;&#8212;&#8201;As persistence operations usually require a constructor taking all arguments, their declaration becomes a tedious repetition of boilerplate parameter to field assignments that can best be avoided by using Lombok&#8217;s <code>@AllArgsConstructor</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="mapping.kotlin"><a class="anchor" href="#mapping.kotlin"></a>3.4. Kotlin support</h3>
<div class="paragraph">
<p>Spring Data adapts specifics of Kotlin to allow object creation and mutation.</p>
</div>
<div class="sect3">
<h4>3.4.1. Kotlin object creation</h4>
<div class="paragraph">
<p>Kotlin classes are supported to be instantiated , all classes are immutable by default and require explicit property declarations to define mutable properties.
Consider the following <code>data</code> class <code>Person</code>:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">data class Person(val id: String, val name: String)</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The class above compiles to a typical class with an explicit constructor. We can customize this class by adding another constructor and annotate it with <code>@PersistenceConstructor</code> to indicate a constructor preference:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">data class Person(var id: String, val name: String) {

    @PersistenceConstructor
    constructor(id: String) : this(id, "unknown")
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Kotlin supports parameter optionality by allowing default values to be used if a parameter is not provided.
When Spring Data detects a constructor with parameter defaulting, then it leaves these parameters absent if the data store does not provide a value (or simply returns <code>null</code>) so Kotlin can apply parameter defaulting. Consider the following class that applies parameter defaulting for <code>name</code></p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">data class Person(var id: String, val name: String = "unknown")</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Every time the <code>name</code> parameter is either not part of the result or its value is <code>null</code>, then the <code>name</code> defaults to <code>unknown</code>.</p>
</div>
</div>
<div class="sect3">
<h4>3.4.2. Property population of Kotlin data classes</h4>
<div class="paragraph">
<p>In Kotlin, all classes are immutable by default and require explicit property declarations to define mutable properties. Consider the following <code>data</code> class <code>Person</code>:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">data class Person(val id: String, val name: String)</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>This class is effectively immutable. It allows to create new instances as Kotlin generates a <code>copy(…)</code> method that creates new object instances copying all property values from the existing object and applying property values provided as arguments to the method.</p>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="repositories"><a class="anchor" href="#repositories"></a>4. Working with Spring Data Repositories</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The goal of the Spring Data repository abstraction is to significantly reduce the amount of boilerplate code required to implement data access layers for various persistence stores.</p>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
<div class="paragraph">
<p><em>Spring Data repository documentation and your module</em></p>
</div>
<div class="paragraph">
<p>This chapter explains the core concepts and interfaces of Spring Data repositories. The information in this chapter is pulled from the Spring Data Commons module. It uses the configuration and code samples for the Java Persistence API (JPA) module. You should adapt the XML namespace declaration and the types to be extended to the equivalents of the particular module that you use. &#8220;<a href="#repositories.namespace-reference">Namespace reference</a>&#8221; covers XML configuration, which is supported across all Spring Data modules supporting the repository API. &#8220;<a href="#repository-query-keywords">Repository query keywords</a>&#8221; covers the query method keywords supported by the repository abstraction in general. For detailed information on the specific features of your module, see the chapter on that module of this document.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="repositories.core-concepts"><a class="anchor" href="#repositories.core-concepts"></a>4.1. Core concepts</h3>
<div class="paragraph">
<p>The central interface in the Spring Data repository abstraction is <code>Repository</code>. It takes the domain class to manage as well as the ID type of the domain class as type arguments. This interface acts primarily as a marker interface to capture the types to work with and to help you to discover interfaces that extend this one. The <code>CrudRepository</code> provides sophisticated CRUD functionality for the entity class that is being managed.</p>
</div>
<div id="repositories.repository" class="exampleblock">
<div class="title">Example 5. <code>CrudRepository</code> interface</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">public interface CrudRepository&lt;T, ID&gt; extends Repository&lt;T, ID&gt; {

  &lt;S extends T&gt; S save(S entity);      <i class="conum" data-value="1"></i><b>(1)</b>

  Optional&lt;T&gt; findById(ID primaryKey); <i class="conum" data-value="2"></i><b>(2)</b>

  Iterable&lt;T&gt; findAll();               <i class="conum" data-value="3"></i><b>(3)</b>

  long count();                        <i class="conum" data-value="4"></i><b>(4)</b>

  void delete(T entity);               <i class="conum" data-value="5"></i><b>(5)</b>

  boolean existsById(ID primaryKey);   <i class="conum" data-value="6"></i><b>(6)</b>

  // … more functionality omitted.
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Saves the given entity.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Returns the entity identified by the given ID.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Returns all entities.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Returns the number of entities.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Deletes the given entity.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Indicates whether an entity with the given ID exists.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
We also provide persistence technology-specific abstractions, such as <code>JpaRepository</code> or <code>MongoRepository</code>. Those interfaces extend <code>CrudRepository</code> and expose the capabilities of the underlying persistence technology in addition to the rather generic persistence technology-agnostic interfaces such as <code>CrudRepository</code>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>On top of the <code>CrudRepository</code>, there is a <code>PagingAndSortingRepository</code> abstraction that adds additional methods to ease paginated access to entities:</p>
</div>
<div class="exampleblock">
<div class="title">Example 6. <code>PagingAndSortingRepository</code> interface</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">public interface PagingAndSortingRepository&lt;T, ID&gt; extends CrudRepository&lt;T, ID&gt; {

  Iterable&lt;T&gt; findAll(Sort sort);

  Page&lt;T&gt; findAll(Pageable pageable);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>To access the second page of <code>User</code> by a page size of 20, you could do something like the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">PagingAndSortingRepository&lt;User, Long&gt; repository = // … get access to a bean
Page&lt;User&gt; users = repository.findAll(PageRequest.of(1, 20));</code></pre>
</div>
</div>
<div class="paragraph">
<p>In addition to query methods, query derivation for both count and delete queries is available. The following list shows the interface definition for a derived count query:</p>
</div>
<div class="exampleblock">
<div class="title">Example 7. Derived Count Query</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface UserRepository extends CrudRepository&lt;User, Long&gt; {

  long countByLastname(String lastname);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The following list shows the interface definition for a derived delete query:</p>
</div>
<div class="exampleblock">
<div class="title">Example 8. Derived Delete Query</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface UserRepository extends CrudRepository&lt;User, Long&gt; {

  long deleteByLastname(String lastname);

  List&lt;User&gt; removeByLastname(String lastname);
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="repositories.query-methods"><a class="anchor" href="#repositories.query-methods"></a>4.2. Query methods</h3>
<div class="paragraph">
<p>Standard CRUD functionality repositories usually have queries on the underlying datastore. With Spring Data, declaring those queries becomes a four-step process:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Declare an interface extending Repository or one of its subinterfaces and type it to the domain class and ID type that it should handle, as shown in the following example:</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface PersonRepository extends Repository&lt;Person, Long&gt; { … }</code></pre>
</div>
</div>
</li>
<li>
<p>Declare query methods on the interface.</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface PersonRepository extends Repository&lt;Person, Long&gt; {
  List&lt;Person&gt; findByLastname(String lastname);
}</code></pre>
</div>
</div>
</li>
<li>
<p>Set up Spring to create proxy instances for those interfaces, either with <a href="#repositories.create-instances.java-config">JavaConfig</a> or with <a href="#repositories.create-instances">XML configuration</a>.</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>To use Java configuration, create a class similar to the following:</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@EnableJpaRepositories
class Config { … }</code></pre>
</div>
</div>
</li>
<li>
<p>To use XML configuration, define a bean similar to the following:</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:jpa="http://www.springframework.org/schema/data/jpa"
   xsi:schemaLocation="http://www.springframework.org/schema/beans
     https://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/data/jpa
     https://www.springframework.org/schema/data/jpa/spring-jpa.xsd"&gt;

   &lt;jpa:repositories base-package="com.acme.repositories"/&gt;

&lt;/beans&gt;</code></pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>The JPA namespace is used in this example. If you use the repository abstraction for any other store, you need to change this to the appropriate namespace declaration of your store module. In other words, you should exchange <code>jpa</code> in favor of, for example, <code>mongodb</code>.</p>
</div>
<div class="paragraph">
<p>+
Also, note that the JavaConfig variant does not configure a package explicitly, because the package of the annotated class is used by default. To customize the package to scan, use one of the <code>basePackage…</code> attributes of the data-store-specific repository&#8217;s <code>@Enable${store}Repositories</code>-annotation.</p>
</div>
</li>
<li>
<p>Inject the repository instance and use it, as shown in the following example:</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">class SomeClient {

  private final PersonRepository repository;

  SomeClient(PersonRepository repository) {
    this.repository = repository;
  }

  void doSomething() {
    List&lt;Person&gt; persons = repository.findByLastname("Matthews");
  }
}</code></pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>The sections that follow explain each step in detail:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="#repositories.definition">Defining Repository Interfaces</a></p>
</li>
<li>
<p><a href="#repositories.query-methods.details">Defining Query Methods</a></p>
</li>
<li>
<p><a href="#repositories.create-instances">Creating Repository Instances</a></p>
</li>
<li>
<p><a href="#repositories.custom-implementations">Custom Implementations for Spring Data Repositories</a></p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="repositories.definition"><a class="anchor" href="#repositories.definition"></a>4.3. Defining Repository Interfaces</h3>
<div class="paragraph">
<p>First, define a domain class-specific repository interface. The interface must extend <code>Repository</code> and be typed to the domain class and an ID type. If you want to expose CRUD methods for that domain type, extend <code>CrudRepository</code> instead of <code>Repository</code>.</p>
</div>
<div class="sect3">
<h4 id="repositories.definition-tuning"><a class="anchor" href="#repositories.definition-tuning"></a>4.3.1. Fine-tuning Repository Definition</h4>
<div class="paragraph">
<p>Typically, your repository interface extends <code>Repository</code>, <code>CrudRepository</code>, or <code>PagingAndSortingRepository</code>. Alternatively, if you do not want to extend Spring Data interfaces, you can also annotate your repository interface with <code>@RepositoryDefinition</code>. Extending <code>CrudRepository</code> exposes a complete set of methods to manipulate your entities. If you prefer to be selective about the methods being exposed, copy the methods you want to expose from <code>CrudRepository</code> into your domain repository.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Doing so lets you define your own abstractions on top of the provided Spring Data Repositories functionality.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The following example shows how to selectively expose CRUD methods (<code>findById</code> and <code>save</code>, in this case):</p>
</div>
<div class="exampleblock">
<div class="title">Example 9. Selectively exposing CRUD methods</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@NoRepositoryBean
interface MyBaseRepository&lt;T, ID&gt; extends Repository&lt;T, ID&gt; {

  Optional&lt;T&gt; findById(ID id);

  &lt;S extends T&gt; S save(S entity);
}

interface UserRepository extends MyBaseRepository&lt;User, Long&gt; {
  User findByEmailAddress(EmailAddress emailAddress);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>In the prior example, you defined a common base interface for all your domain repositories and exposed <code>findById(…)</code> as well as <code>save(…)</code>.These methods are routed into the base repository implementation of the store of your choice provided by Spring Data (for example, if you use JPA, the implementation is <code>SimpleJpaRepository</code>), because they match the method signatures in <code>CrudRepository</code>. So the <code>UserRepository</code> can now save users, find individual users by ID, and trigger a query to find <code>Users</code> by email address.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The intermediate repository interface is annotated with <code>@NoRepositoryBean</code>. Make sure you add that annotation to all repository interfaces for which Spring Data should not create instances at runtime.
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="repositories.multiple-modules"><a class="anchor" href="#repositories.multiple-modules"></a>4.3.2. Using Repositories with Multiple Spring Data Modules</h4>
<div class="paragraph">
<p>Using a unique Spring Data module in your application makes things simple, because all repository interfaces in the defined scope are bound to the Spring Data module. Sometimes, applications require using more than one Spring Data module. In such cases, a repository definition must distinguish between persistence technologies. When it detects multiple repository factories on the class path, Spring Data enters strict repository configuration mode. Strict configuration uses details on the repository or the domain class to decide about Spring Data module binding for a repository definition:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>If the repository definition <a href="#repositories.multiple-modules.types">extends the module-specific repository</a>, then it is a valid candidate for the particular Spring Data module.</p>
</li>
<li>
<p>If the domain class is <a href="#repositories.multiple-modules.annotations">annotated with the module-specific type annotation</a>, then it is a valid candidate for the particular Spring Data module. Spring Data modules accept either third-party annotations (such as JPA&#8217;s <code>@Entity</code>) or provide their own annotations (such as <code>@Document</code> for Spring Data MongoDB and Spring Data Elasticsearch).</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>The following example shows a repository that uses module-specific interfaces (JPA in this case):</p>
</div>
<div id="repositories.multiple-modules.types" class="exampleblock">
<div class="title">Example 10. Repository definitions using module-specific interfaces</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface MyRepository extends JpaRepository&lt;User, Long&gt; { }

@NoRepositoryBean
interface MyBaseRepository&lt;T, ID&gt; extends JpaRepository&lt;T, ID&gt; { … }

interface UserRepository extends MyBaseRepository&lt;User, Long&gt; { … }</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>MyRepository</code> and <code>UserRepository</code> extend <code>JpaRepository</code> in their type hierarchy. They are valid candidates for the Spring Data JPA module.</p>
</div>
</div>
</div>
<div class="paragraph">
<p>The following example shows a repository that uses generic interfaces:</p>
</div>
<div class="exampleblock">
<div class="title">Example 11. Repository definitions using generic interfaces</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface AmbiguousRepository extends Repository&lt;User, Long&gt; { … }

@NoRepositoryBean
interface MyBaseRepository&lt;T, ID&gt; extends CrudRepository&lt;T, ID&gt; { … }

interface AmbiguousUserRepository extends MyBaseRepository&lt;User, Long&gt; { … }</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>AmbiguousRepository</code> and <code>AmbiguousUserRepository</code> extend only <code>Repository</code> and <code>CrudRepository</code> in their type hierarchy. While this is perfectly fine when using a unique Spring Data module, multiple modules cannot distinguish to which particular Spring Data these repositories should be bound.</p>
</div>
</div>
</div>
<div class="paragraph">
<p>The following example shows a repository that uses domain classes with annotations:</p>
</div>
<div id="repositories.multiple-modules.annotations" class="exampleblock">
<div class="title">Example 12. Repository definitions using domain classes with annotations</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface PersonRepository extends Repository&lt;Person, Long&gt; { … }

@Entity
class Person { … }

interface UserRepository extends Repository&lt;User, Long&gt; { … }

@Document
class User { … }</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>PersonRepository</code> references <code>Person</code>, which is annotated with the JPA <code>@Entity</code> annotation, so this repository clearly belongs to Spring Data JPA. <code>UserRepository</code> references <code>User</code>, which is annotated with Spring Data MongoDB&#8217;s <code>@Document</code> annotation.</p>
</div>
</div>
</div>
<div class="paragraph">
<p>The following bad example shows a repository that uses domain classes with mixed annotations:</p>
</div>
<div class="exampleblock">
<div class="title">Example 13. Repository definitions using domain classes with mixed annotations</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface JpaPersonRepository extends Repository&lt;Person, Long&gt; { … }

interface MongoDBPersonRepository extends Repository&lt;Person, Long&gt; { … }

@Entity
@Document
class Person { … }</code></pre>
</div>
</div>
<div class="paragraph">
<p>This example shows a domain class using both JPA and Spring Data MongoDB annotations. It defines two repositories, <code>JpaPersonRepository</code> and <code>MongoDBPersonRepository</code>. One is intended for JPA and the other for MongoDB usage. Spring Data is no longer able to tell the repositories apart, which leads to undefined behavior.</p>
</div>
</div>
</div>
<div class="paragraph">
<p><a href="#repositories.multiple-modules.types">Repository type details</a> and <a href="#repositories.multiple-modules.annotations">distinguishing domain class annotations</a> are used for strict repository configuration to identify repository candidates for a particular Spring Data module. Using multiple persistence technology-specific annotations on the same domain type is possible and enables reuse of domain types across multiple persistence technologies. However, Spring Data can then no longer determine a unique module with which to bind the repository.</p>
</div>
<div class="paragraph">
<p>The last way to distinguish repositories is by scoping repository base packages. Base packages define the starting points for scanning for repository interface definitions, which implies having repository definitions located in the appropriate packages. By default, annotation-driven configuration uses the package of the configuration class. The <a href="#repositories.create-instances.spring">base package in XML-based configuration</a> is mandatory.</p>
</div>
<div class="paragraph">
<p>The following example shows annotation-driven configuration of base packages:</p>
</div>
<div class="exampleblock">
<div class="title">Example 14. Annotation-driven configuration of base packages</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@EnableJpaRepositories(basePackages = "com.acme.repositories.jpa")
@EnableMongoRepositories(basePackages = "com.acme.repositories.mongo")
class Configuration { … }</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="repositories.query-methods.details"><a class="anchor" href="#repositories.query-methods.details"></a>4.4. Defining Query Methods</h3>
<div class="paragraph">
<p>The repository proxy has two ways to derive a store-specific query from the method name:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>By deriving the query from the method name directly.</p>
</li>
<li>
<p>By using a manually defined query.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Available options depend on the actual store. However, there must be a strategy that decides what actual query is created. The next section describes the available options.</p>
</div>
<div class="sect3">
<h4 id="repositories.query-methods.query-lookup-strategies"><a class="anchor" href="#repositories.query-methods.query-lookup-strategies"></a>4.4.1. Query Lookup Strategies</h4>
<div class="paragraph">
<p>The following strategies are available for the repository infrastructure to resolve the query. With XML configuration, you can configure the strategy at the namespace through the <code>query-lookup-strategy</code> attribute. For Java configuration, you can use the <code>queryLookupStrategy</code> attribute of the <code>Enable${store}Repositories</code> annotation. Some strategies may not be supported for particular datastores.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>CREATE</code> attempts to construct a store-specific query from the query method name. The general approach is to remove a given set of well known prefixes from the method name and parse the rest of the method. You can read more about query construction in &#8220;<a href="#repositories.query-methods.query-creation">Query Creation</a>&#8221;.</p>
</li>
<li>
<p><code>USE_DECLARED_QUERY</code> tries to find a declared query and throws an exception if cannot find one. The query can be defined by an annotation somewhere or declared by other means. Consult the documentation of the specific store to find available options for that store. If the repository infrastructure does not find a declared query for the method at bootstrap time, it fails.</p>
</li>
<li>
<p><code>CREATE_IF_NOT_FOUND</code> (default) combines <code>CREATE</code> and <code>USE_DECLARED_QUERY</code>. It looks up a declared query first, and, if no declared query is found, it creates a custom method name-based query. This is the default lookup strategy and, thus, is used if you do not configure anything explicitly. It allows quick query definition by method names but also custom-tuning of these queries by introducing declared queries as needed.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="repositories.query-methods.query-creation"><a class="anchor" href="#repositories.query-methods.query-creation"></a>4.4.2. Query Creation</h4>
<div class="paragraph">
<p>The query builder mechanism built into Spring Data repository infrastructure is useful for building constraining queries over entities of the repository. The mechanism strips the prefixes <code>find…By</code>, <code>read…By</code>, <code>query…By</code>, <code>count…By</code>, and <code>get…By</code> from the method and starts parsing the rest of it. The introducing clause can contain further expressions, such as a <code>Distinct</code> to set a distinct flag on the query to be created. However, the first <code>By</code> acts as delimiter to indicate the start of the actual criteria. At a very basic level, you can define conditions on entity properties and concatenate them with <code>And</code> and <code>Or</code>. The following example shows how to create a number of queries:</p>
</div>
<div class="exampleblock">
<div class="title">Example 15. Query creation from method names</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface PersonRepository extends Repository&lt;Person, Long&gt; {

  List&lt;Person&gt; findByEmailAddressAndLastname(EmailAddress emailAddress, String lastname);

  // Enables the distinct flag for the query
  List&lt;Person&gt; findDistinctPeopleByLastnameOrFirstname(String lastname, String firstname);
  List&lt;Person&gt; findPeopleDistinctByLastnameOrFirstname(String lastname, String firstname);

  // Enabling ignoring case for an individual property
  List&lt;Person&gt; findByLastnameIgnoreCase(String lastname);
  // Enabling ignoring case for all suitable properties
  List&lt;Person&gt; findByLastnameAndFirstnameAllIgnoreCase(String lastname, String firstname);

  // Enabling static ORDER BY for a query
  List&lt;Person&gt; findByLastnameOrderByFirstnameAsc(String lastname);
  List&lt;Person&gt; findByLastnameOrderByFirstnameDesc(String lastname);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The actual result of parsing the method depends on the persistence store for which you create the query. However, there are some general things to notice:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The expressions are usually property traversals combined with operators that can be concatenated. You can combine property expressions with <code>AND</code> and <code>OR</code>. You also get support for operators such as <code>Between</code>, <code>LessThan</code>, <code>GreaterThan</code>, and <code>Like</code> for the property expressions. The supported operators can vary by datastore, so consult the appropriate part of your reference documentation.</p>
</li>
<li>
<p>The method parser supports setting an <code>IgnoreCase</code> flag for individual properties (for example, <code>findByLastnameIgnoreCase(…)</code>) or for all properties of a type that supports ignoring case (usually <code>String</code> instances&#8201;&#8212;&#8201;for example, <code>findByLastnameAndFirstnameAllIgnoreCase(…)</code>). Whether ignoring cases is supported may vary by store, so consult the relevant sections in the reference documentation for the store-specific query method.</p>
</li>
<li>
<p>You can apply static ordering by appending an <code>OrderBy</code> clause to the query method that references a property and by providing a sorting direction (<code>Asc</code> or <code>Desc</code>). To create a query method that supports dynamic sorting, see &#8220;<a href="#repositories.special-parameters">Special parameter handling</a>&#8221;.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="repositories.query-methods.query-property-expressions"><a class="anchor" href="#repositories.query-methods.query-property-expressions"></a>4.4.3. Property Expressions</h4>
<div class="paragraph">
<p>Property expressions can refer only to a direct property of the managed entity, as shown in the preceding example. At query creation time, you already make sure that the parsed property is a property of the managed domain class. However, you can also define constraints by traversing nested properties. Consider the following method signature:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">List&lt;Person&gt; findByAddressZipCode(ZipCode zipCode);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Assume a <code>Person</code> has an <code>Address</code> with a <code>ZipCode</code>. In that case, the method creates the property traversal <code>x.address.zipCode</code>. The resolution algorithm starts by interpreting the entire part (<code>AddressZipCode</code>) as the property and checks the domain class for a property with that name (uncapitalized). If the algorithm succeeds, it uses that property. If not, the algorithm splits up the source at the camel case parts from the right side into a head and a tail and tries to find the corresponding property&#8201;&#8212;&#8201;in our example, <code>AddressZip</code> and <code>Code</code>. If the algorithm finds a property with that head, it takes the tail and continues building the tree down from there, splitting the tail up in the way just described. If the first split does not match, the algorithm moves the split point to the left (<code>Address</code>, <code>ZipCode</code>) and continues.</p>
</div>
<div class="paragraph">
<p>Although this should work for most cases, it is possible for the algorithm to select the wrong property. Suppose the <code>Person</code> class has an <code>addressZip</code> property as well. The algorithm would match in the first split round already, choose the wrong property, and fail (as the type of <code>addressZip</code> probably has no <code>code</code> property).</p>
</div>
<div class="paragraph">
<p>To resolve this ambiguity you can use <code>_</code> inside your method name to manually define traversal points. So our method name would be as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">List&lt;Person&gt; findByAddress_ZipCode(ZipCode zipCode);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Because we treat the underscore character as a reserved character, we strongly advise following standard Java naming conventions (that is, not using underscores in property names but using camel case instead).</p>
</div>
</div>
<div class="sect3">
<h4 id="repositories.special-parameters"><a class="anchor" href="#repositories.special-parameters"></a>4.4.4. Special parameter handling</h4>
<div class="paragraph">
<p>To handle parameters in your query, define method parameters as already seen in the preceding examples. Besides that, the infrastructure recognizes certain specific types like <code>Pageable</code> and <code>Sort</code>, to apply pagination and sorting to your queries dynamically. The following example demonstrates these features:</p>
</div>
<div class="exampleblock">
<div class="title">Example 16. Using <code>Pageable</code>, <code>Slice</code>, and <code>Sort</code> in query methods</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Page&lt;User&gt; findByLastname(String lastname, Pageable pageable);

Slice&lt;User&gt; findByLastname(String lastname, Pageable pageable);

List&lt;User&gt; findByLastname(String lastname, Sort sort);

List&lt;User&gt; findByLastname(String lastname, Pageable pageable);</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
APIs taking <code>Sort</code> and <code>Pageable</code> expect non-<code>null</code> values to be handed into methods.
If you don&#8217;t want to apply any sorting or pagination use <code>Sort.unsorted()</code> and <code>Pageable.unpaged()</code>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The first method lets you pass an <code>org.springframework.data.domain.Pageable</code> instance to the query method to dynamically add paging to your statically defined query. A <code>Page</code> knows about the total number of elements and pages available. It does so by the infrastructure triggering a count query to calculate the overall number. As this might be expensive (depending on the store used), you can instead return a <code>Slice</code>. A <code>Slice</code> only knows about whether a next <code>Slice</code> is available, which might be sufficient when walking through a larger result set.</p>
</div>
<div class="paragraph">
<p>Sorting options are handled through the <code>Pageable</code> instance, too. If you only need sorting, add an <code>org.springframework.data.domain.Sort</code> parameter to your method. As you can see, returning a <code>List</code> is also possible. In this case, the additional metadata required to build the actual <code>Page</code> instance is not created (which, in turn, means that the additional count query that would have been necessary is not issued). Rather, it restricts the query to look up only the given range of entities.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
To find out how many pages you get for an entire query, you have to trigger an additional count query. By default, this query is derived from the query you actually trigger.
</td>
</tr>
</table>
</div>
<div class="sect4">
<h5 id="repositories.paging-and-sorting"><a class="anchor" href="#repositories.paging-and-sorting"></a>Paging and Sorting</h5>
<div class="paragraph">
<p>Simple sorting expressions can be defined by using property names.
Expressions can be concatenated to collect multiple criterias into one expression.</p>
</div>
<div class="exampleblock">
<div class="title">Example 17. Defining sort expressions</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Sort sort = Sort.by("firstname").ascending()
  .and(Sort.by("lastname").descending());</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>For a more type-safe way of defining sort expressions, start with the type to define the sort expression for and use method references to define the properties to sort on.</p>
</div>
<div class="exampleblock">
<div class="title">Example 18. Defining sort expressions using the type-safe API</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">TypedSort&lt;Person&gt; person = Sort.sort(Person.class);

TypedSort&lt;Person&gt; sort = person.by(Person::getFirstname).ascending()
  .and(person.by(Person::getLastname).descending());</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>If your store implementation supports Querydsl, you can also use the metamodel types generated to define sort expressions:</p>
</div>
<div class="exampleblock">
<div class="title">Example 19. Defining sort expressions using the Querydsl API</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">QSort sort = QSort.by(QPerson.firstname.asc())
  .and(QSort.by(QPerson.lastname.desc()));</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="repositories.limit-query-result"><a class="anchor" href="#repositories.limit-query-result"></a>4.4.5. Limiting Query Results</h4>
<div class="paragraph">
<p>The results of query methods can be limited by using the <code>first</code> or <code>top</code> keywords, which can be used interchangeably. An optional numeric value can be appended to <code>top</code> or <code>first</code> to specify the maximum result size to be returned.
If the number is left out, a result size of 1 is assumed. The following example shows how to limit the query size:</p>
</div>
<div class="exampleblock">
<div class="title">Example 20. Limiting the result size of a query with <code>Top</code> and <code>First</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">User findFirstByOrderByLastnameAsc();

User findTopByOrderByAgeDesc();

Page&lt;User&gt; queryFirst10ByLastname(String lastname, Pageable pageable);

Slice&lt;User&gt; findTop3ByLastname(String lastname, Pageable pageable);

List&lt;User&gt; findFirst10ByLastname(String lastname, Sort sort);

List&lt;User&gt; findTop10ByLastname(String lastname, Pageable pageable);</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The limiting expressions also support the <code>Distinct</code> keyword. Also, for the queries limiting the result set to one instance, wrapping the result into with the <code>Optional</code> keyword is supported.</p>
</div>
<div class="paragraph">
<p>If pagination or slicing is applied to a limiting query pagination (and the calculation of the number of pages available), it is applied within the limited result.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Limiting the results in combination with dynamic sorting by using a <code>Sort</code> parameter lets you express query methods for the 'K' smallest as well as for the 'K' biggest elements.
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="repositories.collections-and-iterables"><a class="anchor" href="#repositories.collections-and-iterables"></a>4.4.6. Repository Methods Returning Collections or Iterables</h4>
<div class="paragraph">
<p>Query methods that return multiple results can use standard Java <code>Iterable</code>, <code>List</code>, <code>Set</code>.
Beyond that we support returning Spring Data&#8217;s <code>Streamable</code>, a custom extension of <code>Iterable</code>, as well as collection types provided by <a href="https://www.vavr.io/">Vavr</a>.</p>
</div>
<div class="sect4">
<h5 id="repositories.collections-and-iterables.streamable"><a class="anchor" href="#repositories.collections-and-iterables.streamable"></a>Using Streamable as Query Method Return Type</h5>
<div class="paragraph">
<p><code>Streamable</code> can be used as alternative to <code>Iterable</code> or any collection type.
It provides convenience methods to access a non-parallel <code>Stream</code> (missing from <code>Iterable</code>), the ability to directly <code>….filter(…)</code> and <code>….map(…)</code> over the elements and concatenate the <code>Streamable</code> to others:</p>
</div>
<div class="exampleblock">
<div class="title">Example 21. Using Streamable to combine query method results</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface PersonRepository extends Repository&lt;Person, Long&gt; {
  Streamable&lt;Person&gt; findByFirstnameContaining(String firstname);
  Streamable&lt;Person&gt; findByLastnameContaining(String lastname);
}

Streamable&lt;Person&gt; result = repository.findByFirstnameContaining("av")
  .and(repository.findByLastnameContaining("ea"));</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5 id="repositories.collections-and-iterables.streamable-wrapper"><a class="anchor" href="#repositories.collections-and-iterables.streamable-wrapper"></a>Returning Custom Streamable Wrapper Types</h5>
<div class="paragraph">
<p>Providing dedicated wrapper types for collections is a commonly used pattern to provide API on a query execution result that returns multiple elements.
Usually these types are used by invoking a repository method returning a collection-like type and creating an instance of the wrapper type manually.
That additional step can be avoided as Spring Data allows to use these wrapper types as query method return types if they meet the following criterias:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>The type implements <code>Streamable</code>.</p>
</li>
<li>
<p>The type exposes either a constructor or a static factory method named <code>of(…)</code> or <code>valueOf(…)</code> taking <code>Streamable</code> as argument.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>A sample use case looks as follows:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">class Product { <i class="conum" data-value="1"></i><b>(1)</b>
  MonetaryAmount getPrice() { … }
}

@RequiredArgConstructor(staticName = "of")
class Products implements Streamable&lt;Product&gt; { <i class="conum" data-value="2"></i><b>(2)</b>

  private Streamable&lt;Product&gt; streamable;

  public MonetaryAmount getTotal() { <i class="conum" data-value="3"></i><b>(3)</b>
    return streamable.stream() //
      .map(Priced::getPrice)
      .reduce(Money.of(0), MonetaryAmount::add);
  }
}

interface ProductRepository implements Repository&lt;Product, Long&gt; {
  Products findAllByDescriptionContaining(String text); <i class="conum" data-value="4"></i><b>(4)</b>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>A <code>Product</code> entity that exposes API to access the product&#8217;s price.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>A wrapper type for a <code>Streamable&lt;Product&gt;</code> that can be constructed via <code>Products.of(…)</code> (factory method created via the Lombok annotation).</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The wrapper type exposes additional API calculating new values on the <code>Streamable&lt;Product&gt;</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>That wrapper type can be used as query method return type directly. No need to return <code>Stremable&lt;Product&gt;</code> and manually wrap it in the repository client.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5 id="repositories.collections-and-iterables.vavr"><a class="anchor" href="#repositories.collections-and-iterables.vavr"></a>Support for Vavr Collections</h5>
<div class="paragraph">
<p><a href="https://www.vavr.io/">Vavr</a> is a library to embrace functional programming concepts in Java.
It ships with a custom set of collection types that can be used as query method return types.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Vavr collection type</th>
<th class="tableblock halign-left valign-top">Used Vavr implementation type</th>
<th class="tableblock halign-left valign-top">Valid Java source types</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>io.vavr.collection.Seq</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>io.vavr.collection.List</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>java.util.Iterable</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>io.vavr.collection.Set</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>io.vavr.collection.LinkedHashSet</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>java.util.Iterable</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>io.vavr.collection.Map</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>io.vavr.collection.LinkedHashMap</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>java.util.Map</code></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>The types in the first column (or subtypes thereof) can be used as quer method return types and will get the types in the second column used as implementation type depending on the Java type of the actual query result (thrid column).
Alternatively, <code>Traversable</code> (Vavr the <code>Iterable</code> equivalent) can be declared and we derive the implementation class from the actual return value, i.e. a <code>java.util.List</code> will be turned into a Vavr <code>List</code>/<code>Seq</code>, a <code>java.util.Set</code> becomes a Vavr <code>LinkedHashSet</code>/<code>Set</code> etc.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="repositories.nullability"><a class="anchor" href="#repositories.nullability"></a>4.4.7. Null Handling of Repository Methods</h4>
<div class="paragraph">
<p>As of Spring Data 2.0, repository CRUD methods that return an individual aggregate instance use Java 8&#8217;s <code>Optional</code> to indicate the potential absence of a value.
Besides that, Spring Data supports returning the following wrapper types on query methods:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>com.google.common.base.Optional</code></p>
</li>
<li>
<p><code>scala.Option</code></p>
</li>
<li>
<p><code>io.vavr.control.Option</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Alternatively, query methods can choose not to use a wrapper type at all.
The absence of a query result is then indicated by returning <code>null</code>.
Repository methods returning collections, collection alternatives, wrappers, and streams are guaranteed never to return <code>null</code> but rather the corresponding empty representation.
See &#8220;<a href="#repository-query-return-types">Repository query return types</a>&#8221; for details.</p>
</div>
<div class="sect4">
<h5 id="repositories.nullability.annotations"><a class="anchor" href="#repositories.nullability.annotations"></a>Nullability Annotations</h5>
<div class="paragraph">
<p>You can express nullability constraints for repository methods by using <a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/core.html#null-safety">Spring Framework&#8217;s nullability annotations</a>.
They provide a tooling-friendly approach and opt-in <code>null</code> checks during runtime, as follows:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/javadoc-api/org/springframework/lang/NonNullApi.html"><code>@NonNullApi</code></a>: Used on the package level to declare that the default behavior for parameters and return values is to not accept or produce <code>null</code> values.</p>
</li>
<li>
<p><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/javadoc-api/org/springframework/lang/NonNull.html"><code>@NonNull</code></a>: Used on a parameter or return value that must not be <code>null</code>
(not needed on a parameter and return value where <code>@NonNullApi</code> applies).</p>
</li>
<li>
<p><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/javadoc-api/org/springframework/lang/Nullable.html"><code>@Nullable</code></a>: Used on a parameter or return value that can be <code>null</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Spring annotations are meta-annotated with <a href="https://jcp.org/en/jsr/detail?id=305">JSR 305</a> annotations (a dormant but widely spread JSR). JSR 305 meta-annotations let tooling vendors such as <a href="https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html">IDEA</a>, <a href="https://help.eclipse.org/oxygen/index.jsp?topic=/org.eclipse.jdt.doc.user/tasks/task-using_external_null_annotations.htm">Eclipse</a>, and <a href="https://kotlinlang.org/docs/reference/java-interop.html#null-safety-and-platform-types">Kotlin</a> provide null-safety support in a generic way, without having to hard-code support for Spring annotations.
To enable runtime checking of nullability constraints for query methods, you need to activate non-nullability on the package level by using Spring’s <code>@NonNullApi</code> in <code>package-info.java</code>, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 22. Declaring Non-nullability in <code>package-info.java</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@org.springframework.lang.NonNullApi
package com.acme;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Once non-null defaulting is in place, repository query method invocations get validated at runtime for nullability constraints.
If a query execution result violates the defined constraint, an exception is thrown. This happens when the method would return <code>null</code> but is declared as non-nullable (the default with the annotation defined on the package the repository resides in).
If you want to opt-in to nullable results again, selectively use <code>@Nullable</code> on individual methods.
Using the result wrapper types mentioned at the start of this section continues to work as expected: An empty result is translated into the value that represents absence.</p>
</div>
<div class="paragraph">
<p>The following example shows a number of the techniques just described:</p>
</div>
<div class="exampleblock">
<div class="title">Example 23. Using different nullability constraints</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.acme;                                                       <i class="conum" data-value="1"></i><b>(1)</b>

import org.springframework.lang.Nullable;

interface UserRepository extends Repository&lt;User, Long&gt; {

  User getByEmailAddress(EmailAddress emailAddress);                    <i class="conum" data-value="2"></i><b>(2)</b>

  @Nullable
  User findByEmailAddress(@Nullable EmailAddress emailAdress);          <i class="conum" data-value="3"></i><b>(3)</b>

  Optional&lt;User&gt; findOptionalByEmailAddress(EmailAddress emailAddress); <i class="conum" data-value="4"></i><b>(4)</b>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The repository resides in a package (or sub-package) for which we have defined non-null behavior.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Throws an <code>EmptyResultDataAccessException</code> when the query executed does not produce a result. Throws an <code>IllegalArgumentException</code> when the <code>emailAddress</code> handed to the method is <code>null</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Returns <code>null</code> when the query executed does not produce a result. Also accepts <code>null</code> as the value for <code>emailAddress</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Returns <code>Optional.empty()</code> when the query executed does not produce a result. Throws an <code>IllegalArgumentException</code> when the <code>emailAddress</code> handed to the method is <code>null</code>.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5 id="repositories.nullability.kotlin"><a class="anchor" href="#repositories.nullability.kotlin"></a>Nullability in Kotlin-based Repositories</h5>
<div class="paragraph">
<p>Kotlin has the definition of <a href="https://kotlinlang.org/docs/reference/null-safety.html">nullability constraints</a> baked into the language.
Kotlin code compiles to bytecode, which does not express nullability constraints through method signatures but rather through compiled-in metadata. Make sure to include the <code>kotlin-reflect</code> JAR in your project to enable introspection of Kotlin&#8217;s nullability constraints.
Spring Data repositories use the language mechanism to define those constraints to apply the same runtime checks, as follows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 24. Using nullability constraints on Kotlin repositories</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-kotlin hljs" data-lang="kotlin">interface UserRepository : Repository&lt;User, String&gt; {

  fun findByUsername(username: String): User     <i class="conum" data-value="1"></i><b>(1)</b>

  fun findByFirstname(firstname: String?): User? <i class="conum" data-value="2"></i><b>(2)</b>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The method defines both the parameter and the result as non-nullable (the Kotlin default). The Kotlin compiler rejects method invocations that pass <code>null</code> to the method. If the query execution yields an empty result, an <code>EmptyResultDataAccessException</code> is thrown.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>This method accepts <code>null</code> for the <code>firstname</code> parameter and returns <code>null</code> if the query execution does not produce a result.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="repositories.query-streaming"><a class="anchor" href="#repositories.query-streaming"></a>4.4.8. Streaming query results</h4>
<div class="paragraph">
<p>The results of query methods can be processed incrementally by using a Java 8 <code>Stream&lt;T&gt;</code> as return type. Instead of wrapping the query results in a <code>Stream</code> data store-specific methods are used to perform the streaming, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 25. Stream the result of a query with Java 8 <code>Stream&lt;T&gt;</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Query("select u from User u")
Stream&lt;User&gt; findAllByCustomQueryAndStream();

Stream&lt;User&gt; readAllByFirstnameNotNull();

@Query("select u from User u")
Stream&lt;User&gt; streamAllPaged(Pageable pageable);</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
A <code>Stream</code> potentially wraps underlying data store-specific resources and must, therefore, be closed after usage. You can either manually close the <code>Stream</code> by using the <code>close()</code> method or by using a Java 7 <code>try-with-resources</code> block, as shown in the following example:
</td>
</tr>
</table>
</div>
<div class="exampleblock">
<div class="title">Example 26. Working with a <code>Stream&lt;T&gt;</code> result in a try-with-resources block</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">try (Stream&lt;User&gt; stream = repository.findAllByCustomQueryAndStream()) {
  stream.forEach(…);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Not all Spring Data modules currently support <code>Stream&lt;T&gt;</code> as a return type.
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="repositories.query-async"><a class="anchor" href="#repositories.query-async"></a>4.4.9. Async query results</h4>
<div class="paragraph">
<p>Repository queries can be run asynchronously by using <a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/integration.html#scheduling">Spring&#8217;s asynchronous method execution capability</a>. This means the method returns immediately upon invocation while the actual query execution occurs in a task that has been submitted to a Spring <code>TaskExecutor</code>. Asynchronous query execution is different from reactive query execution and should not be mixed. Refer to store-specific documentation for more details on reactive support. The following example shows a number of asynchronous queries:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Async
Future&lt;User&gt; findByFirstname(String firstname);               <i class="conum" data-value="1"></i><b>(1)</b>

@Async
CompletableFuture&lt;User&gt; findOneByFirstname(String firstname); <i class="conum" data-value="2"></i><b>(2)</b>

@Async
ListenableFuture&lt;User&gt; findOneByLastname(String lastname);    <i class="conum" data-value="3"></i><b>(3)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Use <code>java.util.concurrent.Future</code> as the return type.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Use a Java 8 <code>java.util.concurrent.CompletableFuture</code> as the return type.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Use a <code>org.springframework.util.concurrent.ListenableFuture</code> as the return type.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="repositories.create-instances"><a class="anchor" href="#repositories.create-instances"></a>4.5. Creating Repository Instances</h3>
<div class="paragraph">
<p>In this section, you create instances and bean definitions for the defined repository interfaces. One way to do so is by using the Spring namespace that is shipped with each Spring Data module that supports the repository mechanism, although we generally recommend using Java configuration.</p>
</div>
<div class="sect3">
<h4 id="repositories.create-instances.spring"><a class="anchor" href="#repositories.create-instances.spring"></a>4.5.1. XML configuration</h4>
<div class="paragraph">
<p>Each Spring Data module includes a <code>repositories</code> element that lets you define a base package that Spring scans for you, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 27. Enabling Spring Data repositories via XML</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.springframework.org/schema/data/jpa"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    https://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/data/jpa
    https://www.springframework.org/schema/data/jpa/spring-jpa.xsd"&gt;

  &lt;repositories base-package="com.acme.repositories" /&gt;

&lt;/beans:beans&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>In the preceding example, Spring is instructed to scan <code>com.acme.repositories</code> and all its sub-packages for interfaces extending <code>Repository</code> or one of its sub-interfaces. For each interface found, the infrastructure registers the persistence technology-specific <code>FactoryBean</code> to create the appropriate proxies that handle invocations of the query methods. Each bean is registered under a bean name that is derived from the interface name, so an interface of <code>UserRepository</code> would be registered under <code>userRepository</code>. The <code>base-package</code> attribute allows wildcards so that you can define a pattern of scanned packages.</p>
</div>
<div class="sect4">
<h5>Using filters</h5>
<div class="paragraph">
<p>By default, the infrastructure picks up every interface extending the persistence technology-specific <code>Repository</code> sub-interface located under the configured base package and creates a bean instance for it. However, you might want more fine-grained control over which interfaces have bean instances created for them. To do so, use <code>&lt;include-filter /&gt;</code> and <code>&lt;exclude-filter /&gt;</code> elements inside the <code>&lt;repositories /&gt;</code> element. The semantics are exactly equivalent to the elements in Spring&#8217;s context namespace. For details, see the <a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/core.html#beans-scanning-filters">Spring reference documentation</a> for these elements.</p>
</div>
<div class="paragraph">
<p>For example, to exclude certain interfaces from instantiation as repository beans, you could use the following configuration:</p>
</div>
<div class="exampleblock">
<div class="title">Example 28. Using exclude-filter element</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;repositories base-package="com.acme.repositories"&gt;
  &lt;context:exclude-filter type="regex" expression=".*SomeRepository" /&gt;
&lt;/repositories&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The preceding example excludes all interfaces ending in <code>SomeRepository</code> from being instantiated.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="repositories.create-instances.java-config"><a class="anchor" href="#repositories.create-instances.java-config"></a>4.5.2. JavaConfig</h4>
<div class="paragraph">
<p>The repository infrastructure can also be triggered by using a store-specific <code>@Enable${store}Repositories</code> annotation on a JavaConfig class. For an introduction into Java-based configuration of the Spring container, see <a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/core.html#beans-java">JavaConfig in the Spring reference documentation</a>.</p>
</div>
<div class="paragraph">
<p>A sample configuration to enable Spring Data repositories resembles the following:</p>
</div>
<div class="exampleblock">
<div class="title">Example 29. Sample annotation based repository configuration</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Configuration
@EnableJpaRepositories("com.acme.repositories")
class ApplicationConfiguration {

  @Bean
  EntityManagerFactory entityManagerFactory() {
    // …
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The preceding example uses the JPA-specific annotation, which you would change according to the store module you actually use. The same applies to the definition of the <code>EntityManagerFactory</code> bean. See the sections covering the store-specific configuration.
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="repositories.create-instances.standalone"><a class="anchor" href="#repositories.create-instances.standalone"></a>4.5.3. Standalone usage</h4>
<div class="paragraph">
<p>You can also use the repository infrastructure outside of a Spring container&#8201;&#8212;&#8201;for example, in CDI environments. You still need some Spring libraries in your classpath, but, generally, you can set up repositories programmatically as well. The Spring Data modules that provide repository support ship a persistence technology-specific <code>RepositoryFactory</code> that you can use as follows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 30. Standalone usage of repository factory</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">RepositoryFactorySupport factory = … // Instantiate factory here
UserRepository repository = factory.getRepository(UserRepository.class);</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="repositories.custom-implementations"><a class="anchor" href="#repositories.custom-implementations"></a>4.6. Custom Implementations for Spring Data Repositories</h3>
<div class="paragraph">
<p>This section covers repository customization and how fragments form a composite repository.</p>
</div>
<div class="paragraph">
<p>When a query method requires a different behavior or cannot be implemented by query derivation, then it is necessary to provide a custom implementation. Spring Data repositories let you provide custom repository code and integrate it with generic CRUD abstraction and query method functionality.</p>
</div>
<div class="sect3">
<h4 id="repositories.single-repository-behavior"><a class="anchor" href="#repositories.single-repository-behavior"></a>4.6.1. Customizing Individual Repositories</h4>
<div class="paragraph">
<p>To enrich a repository with custom functionality, you must first define a fragment interface and an implementation for the custom functionality, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 31. Interface for custom repository functionality</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface CustomizedUserRepository {
  void someCustomMethod(User user);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 32. Implementation of custom repository functionality</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">class CustomizedUserRepositoryImpl implements CustomizedUserRepository {

  public void someCustomMethod(User user) {
    // Your custom implementation
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The most important part of the class name that corresponds to the fragment interface is the <code>Impl</code> postfix.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The implementation itself does not depend on Spring Data and can be a regular Spring bean. Consequently, you can use standard dependency injection behavior to inject references to other beans (such as a <code>JdbcTemplate</code>), take part in aspects, and so on.</p>
</div>
<div class="paragraph">
<p>Then you can let your repository interface extend the fragment interface, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 33. Changes to your repository interface</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface UserRepository extends CrudRepository&lt;User, Long&gt;, CustomizedUserRepository {

  // Declare query methods here
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Extending the fragment interface with your repository interface combines the CRUD and custom functionality and makes it available to clients.</p>
</div>
<div class="paragraph">
<p>Spring Data repositories are implemented by using fragments that form a repository composition. Fragments are the base repository, functional aspects (such as <a href="#core.extensions.querydsl">QueryDsl</a>), and custom interfaces along with their implementation. Each time you add an interface to your repository interface, you enhance the composition by adding a fragment. The base repository and repository aspect implementations are provided by each Spring Data module.</p>
</div>
<div class="paragraph">
<p>The following example shows custom interfaces and their implementations:</p>
</div>
<div class="exampleblock">
<div class="title">Example 34. Fragments with their implementations</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface HumanRepository {
  void someHumanMethod(User user);
}

class HumanRepositoryImpl implements HumanRepository {

  public void someHumanMethod(User user) {
    // Your custom implementation
  }
}

interface ContactRepository {

  void someContactMethod(User user);

  User anotherContactMethod(User user);
}

class ContactRepositoryImpl implements ContactRepository {

  public void someContactMethod(User user) {
    // Your custom implementation
  }

  public User anotherContactMethod(User user) {
    // Your custom implementation
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The following example shows the interface for a custom repository that extends <code>CrudRepository</code>:</p>
</div>
<div class="exampleblock">
<div class="title">Example 35. Changes to your repository interface</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface UserRepository extends CrudRepository&lt;User, Long&gt;, HumanRepository, ContactRepository {

  // Declare query methods here
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Repositories may be composed of multiple custom implementations that are imported in the order of their declaration. Custom implementations have a higher priority than the base implementation and repository aspects. This ordering lets you override base repository and aspect methods and resolves ambiguity if two fragments contribute the same method signature. Repository fragments are not limited to use in a single repository interface. Multiple repositories may use a fragment interface, letting you reuse customizations across different repositories.</p>
</div>
<div class="paragraph">
<p>The following example shows a repository fragment and its implementation:</p>
</div>
<div class="exampleblock">
<div class="title">Example 36. Fragments overriding <code>save(…)</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface CustomizedSave&lt;T&gt; {
  &lt;S extends T&gt; S save(S entity);
}

class CustomizedSaveImpl&lt;T&gt; implements CustomizedSave&lt;T&gt; {

  public &lt;S extends T&gt; S save(S entity) {
    // Your custom implementation
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The following example shows a repository that uses the preceding repository fragment:</p>
</div>
<div class="exampleblock">
<div class="title">Example 37. Customized repository interfaces</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface UserRepository extends CrudRepository&lt;User, Long&gt;, CustomizedSave&lt;User&gt; {
}

interface PersonRepository extends CrudRepository&lt;Person, Long&gt;, CustomizedSave&lt;Person&gt; {
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5>Configuration</h5>
<div class="paragraph">
<p>If you use namespace configuration, the repository infrastructure tries to autodetect custom implementation fragments by scanning for classes below the package in which it found a repository. These classes need to follow the naming convention of appending the namespace element&#8217;s <code>repository-impl-postfix</code> attribute to the fragment interface name. This postfix defaults to <code>Impl</code>. The following example shows a repository that uses the default postfix and a repository that sets a custom value for the postfix:</p>
</div>
<div class="exampleblock">
<div class="title">Example 38. Configuration example</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;repositories base-package="com.acme.repository" /&gt;

&lt;repositories base-package="com.acme.repository" repository-impl-postfix="MyPostfix" /&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The first configuration in the preceding example tries to look up a class called <code>com.acme.repository.CustomizedUserRepositoryImpl</code> to act as a custom repository implementation. The second example tries to lookup <code>com.acme.repository.CustomizedUserRepositoryMyPostfix</code>.</p>
</div>
<div class="sect5">
<h6 id="repositories.single-repository-behaviour.ambiguity"><a class="anchor" href="#repositories.single-repository-behaviour.ambiguity"></a>Resolution of Ambiguity</h6>
<div class="paragraph">
<p>If multiple implementations with matching class names are found in different packages, Spring Data uses the bean names to identify which one to use.</p>
</div>
<div class="paragraph">
<p>Given the following two custom implementations for the <code>CustomizedUserRepository</code> shown earlier, the first implementation is used.
Its bean name is <code>customizedUserRepositoryImpl</code>, which matches that of the fragment interface (<code>CustomizedUserRepository</code>) plus the postfix <code>Impl</code>.</p>
</div>
<div class="exampleblock">
<div class="title">Example 39. Resolution of amibiguous implementations</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.acme.impl.one;

class CustomizedUserRepositoryImpl implements CustomizedUserRepository {

  // Your custom implementation
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.acme.impl.two;

@Component("specialCustomImpl")
class CustomizedUserRepositoryImpl implements CustomizedUserRepository {

  // Your custom implementation
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>If you annotate the <code>UserRepository</code> interface with <code>@Component("specialCustom")</code>, the bean name plus <code>Impl</code> then matches the one defined for the repository implementation in <code>com.acme.impl.two</code>, and it is used instead of the first one.</p>
</div>
</div>
<div class="sect5">
<h6 id="repositories.manual-wiring"><a class="anchor" href="#repositories.manual-wiring"></a>Manual Wiring</h6>
<div class="paragraph">
<p>If your custom implementation uses annotation-based configuration and autowiring only, the preceding approach shown works well, because it is treated as any other Spring bean. If your implementation fragment bean needs special wiring, you can declare the bean and name it according to the conventions described in the <a href="#repositories.single-repository-behaviour.ambiguity">preceding section</a>. The infrastructure then refers to the manually defined bean definition by name instead of creating one itself. The following example shows how to manually wire a custom implementation:</p>
</div>
<div class="exampleblock">
<div class="title">Example 40. Manual wiring of custom implementations</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;repositories base-package="com.acme.repository" /&gt;

&lt;beans:bean id="userRepositoryImpl" class="…"&gt;
  &lt;!-- further configuration --&gt;
&lt;/beans:bean&gt;</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="repositories.customize-base-repository"><a class="anchor" href="#repositories.customize-base-repository"></a>4.6.2. Customize the Base Repository</h4>
<div class="paragraph">
<p>The approach described in the <a href="#repositories.manual-wiring">preceding section</a> requires customization of each repository interfaces when you want to customize the base repository behavior so that all repositories are affected. To instead change behavior for all repositories, you can create an implementation that extends the persistence technology-specific repository base class. This class then acts as a custom base class for the repository proxies, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 41. Custom repository base class</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">class MyRepositoryImpl&lt;T, ID&gt;
  extends SimpleJpaRepository&lt;T, ID&gt; {

  private final EntityManager entityManager;

  MyRepositoryImpl(JpaEntityInformation entityInformation,
                          EntityManager entityManager) {
    super(entityInformation, entityManager);

    // Keep the EntityManager around to used from the newly introduced methods.
    this.entityManager = entityManager;
  }

  @Transactional
  public &lt;S extends T&gt; S save(S entity) {
    // implementation goes here
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock caution">
<table>
<tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
The class needs to have a constructor of the super class which the store-specific repository factory implementation uses. If the repository base class has multiple constructors, override the one taking an <code>EntityInformation</code> plus a store specific infrastructure object (such as an <code>EntityManager</code> or a template class).
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The final step is to make the Spring Data infrastructure aware of the customized repository base class. In Java configuration, you can do so by using the <code>repositoryBaseClass</code> attribute of the <code>@Enable${store}Repositories</code> annotation, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 42. Configuring a custom repository base class using JavaConfig</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Configuration
@EnableJpaRepositories(repositoryBaseClass = MyRepositoryImpl.class)
class ApplicationConfiguration { … }</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>A corresponding attribute is available in the XML namespace, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 43. Configuring a custom repository base class using XML</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;repositories base-package="com.acme.repository"
     base-class="….MyRepositoryImpl" /&gt;</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="core.domain-events"><a class="anchor" href="#core.domain-events"></a>4.7. Publishing Events from Aggregate Roots</h3>
<div class="paragraph">
<p>Entities managed by repositories are aggregate roots.
In a Domain-Driven Design application, these aggregate roots usually publish domain events.
Spring Data provides an annotation called <code>@DomainEvents</code> that you can use on a method of your aggregate root to make that publication as easy as possible, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 44. Exposing domain events from an aggregate root</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">class AnAggregateRoot {

    @DomainEvents <i class="conum" data-value="1"></i><b>(1)</b>
    Collection&lt;Object&gt; domainEvents() {
        // … return events you want to get published here
    }

    @AfterDomainEventPublication <i class="conum" data-value="2"></i><b>(2)</b>
    void callbackMethod() {
       // … potentially clean up domain events list
    }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The method using <code>@DomainEvents</code> can return either a single event instance or a collection of events. It must not take any arguments.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>After all events have been published, we have a method annotated with <code>@AfterDomainEventPublication</code>. It can be used to potentially clean the list of events to be published (among other uses).</td>
</tr>
</table>
</div>
</div>
</div>
<div class="paragraph">
<p>The methods are called every time one of a Spring Data repository&#8217;s <code>save(…)</code> methods is called.</p>
</div>
</div>
<div class="sect2">
<h3 id="core.extensions"><a class="anchor" href="#core.extensions"></a>4.8. Spring Data Extensions</h3>
<div class="paragraph">
<p>This section documents a set of Spring Data extensions that enable Spring Data usage in a variety of contexts. Currently, most of the integration is targeted towards Spring MVC.</p>
</div>
<div class="sect3">
<h4 id="core.extensions.querydsl"><a class="anchor" href="#core.extensions.querydsl"></a>4.8.1. Querydsl Extension</h4>
<div class="paragraph">
<p><a href="http://www.querydsl.com/">Querydsl</a> is a framework that enables the construction of statically typed SQL-like queries through its fluent API.</p>
</div>
<div class="paragraph">
<p>Several Spring Data modules offer integration with Querydsl through <code>QuerydslPredicateExecutor</code>, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 45. QuerydslPredicateExecutor interface</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">public interface QuerydslPredicateExecutor&lt;T&gt; {

  Optional&lt;T&gt; findById(Predicate predicate);  <i class="conum" data-value="1"></i><b>(1)</b>

  Iterable&lt;T&gt; findAll(Predicate predicate);   <i class="conum" data-value="2"></i><b>(2)</b>

  long count(Predicate predicate);            <i class="conum" data-value="3"></i><b>(3)</b>

  boolean exists(Predicate predicate);        <i class="conum" data-value="4"></i><b>(4)</b>

  // … more functionality omitted.
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Finds and returns a single entity matching the <code>Predicate</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Finds and returns all entities matching the <code>Predicate</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Returns the number of entities matching the <code>Predicate</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Returns whether an entity that matches the <code>Predicate</code> exists.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="paragraph">
<p>To make use of Querydsl support, extend <code>QuerydslPredicateExecutor</code> on your repository interface, as shown in the following example</p>
</div>
<div class="exampleblock">
<div class="title">Example 46. Querydsl integration on repositories</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface UserRepository extends CrudRepository&lt;User, Long&gt;, QuerydslPredicateExecutor&lt;User&gt; {
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The preceding example lets you write typesafe queries using Querydsl <code>Predicate</code> instances, as shown in the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Predicate predicate = user.firstname.equalsIgnoreCase("dave")
	.and(user.lastname.startsWithIgnoreCase("mathews"));

userRepository.findAll(predicate);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="core.web"><a class="anchor" href="#core.web"></a>4.8.2. Web support</h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
This section contains the documentation for the Spring Data web support as it is implemented in the current (and later) versions of Spring Data Commons. As the newly introduced support changes many things, we kept the documentation of the former behavior in <a href="#web.legacy">[web.legacy]</a>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Spring Data modules that support the repository programming model ship with a variety of web support. The web related components require Spring MVC JARs to be on the classpath. Some of them even provide integration with <a href="https://github.com/SpringSource/spring-hateoas">Spring HATEOAS</a>. In general, the integration support is enabled by using the <code>@EnableSpringDataWebSupport</code> annotation in your JavaConfig configuration class, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 47. Enabling Spring Data web support</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Configuration
@EnableWebMvc
@EnableSpringDataWebSupport
class WebConfiguration {}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The <code>@EnableSpringDataWebSupport</code> annotation registers a few components we will discuss in a bit. It will also detect Spring HATEOAS on the classpath and register integration components for it as well if present.</p>
</div>
<div class="paragraph">
<p>Alternatively, if you use XML configuration, register either <code>SpringDataWebConfiguration</code> or <code>HateoasAwareSpringDataWebConfiguration</code> as Spring beans, as shown in the following example (for <code>SpringDataWebConfiguration</code>):</p>
</div>
<div class="exampleblock">
<div class="title">Example 48. Enabling Spring Data web support in XML</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;bean class="org.springframework.data.web.config.SpringDataWebConfiguration" /&gt;

&lt;!-- If you use Spring HATEOAS, register this one *instead* of the former --&gt;
&lt;bean class="org.springframework.data.web.config.HateoasAwareSpringDataWebConfiguration" /&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5 id="core.web.basic"><a class="anchor" href="#core.web.basic"></a>Basic Web Support</h5>
<div class="paragraph">
<p>The configuration shown in the <a href="#core.web">previous section</a> registers a few basic components:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A <a href="#core.web.basic.domain-class-converter"><code>DomainClassConverter</code></a> to let Spring MVC resolve instances of repository-managed domain classes from request parameters or path variables.</p>
</li>
<li>
<p><a href="#core.web.basic.paging-and-sorting"><code>HandlerMethodArgumentResolver</code></a> implementations to let Spring MVC resolve <code>Pageable</code> and <code>Sort</code> instances from request parameters.</p>
</li>
</ul>
</div>
<div class="sect5">
<h6 id="core.web.basic.domain-class-converter"><a class="anchor" href="#core.web.basic.domain-class-converter"></a><code>DomainClassConverter</code></h6>
<div class="paragraph">
<p>The <code>DomainClassConverter</code> lets you use domain types in your Spring MVC controller method signatures directly, so that you need not manually lookup the instances through the repository, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 49. A Spring MVC controller using domain types in method signatures</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Controller
@RequestMapping("/users")
class UserController {

  @RequestMapping("/{id}")
  String showUserForm(@PathVariable("id") User user, Model model) {

    model.addAttribute("user", user);
    return "userForm";
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>As you can see, the method receives a <code>User</code> instance directly, and no further lookup is necessary. The instance can be resolved by letting Spring MVC convert the path variable into the <code>id</code> type of the domain class first and eventually access the instance through calling <code>findById(…)</code> on the repository instance registered for the domain type.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Currently, the repository has to implement <code>CrudRepository</code> to be eligible to be discovered for conversion.
</td>
</tr>
</table>
</div>
</div>
<div class="sect5">
<h6 id="core.web.basic.paging-and-sorting"><a class="anchor" href="#core.web.basic.paging-and-sorting"></a>HandlerMethodArgumentResolvers for Pageable and Sort</h6>
<div class="paragraph">
<p>The configuration snippet shown in the <a href="#core.web.basic.domain-class-converter">previous section</a> also registers a <code>PageableHandlerMethodArgumentResolver</code> as well as an instance of <code>SortHandlerMethodArgumentResolver</code>. The registration enables <code>Pageable</code> and <code>Sort</code> as valid controller method arguments, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 50. Using Pageable as controller method argument</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Controller
@RequestMapping("/users")
class UserController {

  private final UserRepository repository;

  UserController(UserRepository repository) {
    this.repository = repository;
  }

  @RequestMapping
  String showUsers(Model model, Pageable pageable) {

    model.addAttribute("users", repository.findAll(pageable));
    return "users";
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The preceding method signature causes Spring MVC try to derive a <code>Pageable</code> instance from the request parameters by using the following default configuration:</p>
</div>
<table class="tableblock frame-all grid-all fit-content">
<caption class="title">Table 1. Request parameters evaluated for <code>Pageable</code> instances</caption>
<colgroup>
<col>
<col>
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>page</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Page you want to retrieve. 0-indexed and defaults to 0.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>size</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Size of the page you want to retrieve. Defaults to 20.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>sort</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Properties that should be sorted by in the format <code>property,property(,ASC|DESC)(,IgnoreCase)</code>. Default sort direction is case-sensitive ascending. Use multiple <code>sort</code> parameters if you want to switch direction or case sensitivity&#8201;&#8212;&#8201;for example, <code>?sort=firstname&amp;sort=lastname,asc&amp;sort=city,ignorecase</code>.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>To customize this behavior, register a bean implementing the <code>PageableHandlerMethodArgumentResolverCustomizer</code> interface or the <code>SortHandlerMethodArgumentResolverCustomizer</code> interface, respectively. Its <code>customize()</code> method gets called, letting you change settings, as shown in the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Bean SortHandlerMethodArgumentResolverCustomizer sortCustomizer() {
    return s -&gt; s.setPropertyDelimiter("&lt;--&gt;");
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>If setting the properties of an existing <code>MethodArgumentResolver</code> is not sufficient for your purpose, extend either <code>SpringDataWebConfiguration</code> or the HATEOAS-enabled equivalent, override the <code>pageableResolver()</code> or <code>sortResolver()</code> methods, and import your customized configuration file instead of using the <code>@Enable</code> annotation.</p>
</div>
<div class="paragraph">
<p>If you need multiple <code>Pageable</code> or <code>Sort</code> instances to be resolved from the request (for multiple tables, for example), you can use Spring&#8217;s <code>@Qualifier</code> annotation to distinguish one from another. The request parameters then have to be prefixed with <code>${qualifier}_</code>. The followig example shows the resulting method signature:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">String showUsers(Model model,
      @Qualifier("thing1") Pageable first,
      @Qualifier("thing2") Pageable second) { … }</code></pre>
</div>
</div>
<div class="paragraph">
<p>you have to populate <code>thing1_page</code> and <code>thing2_page</code> and so on.</p>
</div>
<div class="paragraph">
<p>The default <code>Pageable</code> passed into the method is equivalent to a <code>PageRequest.of(0, 20)</code> but can be customized by using the <code>@PageableDefault</code> annotation on the <code>Pageable</code> parameter.</p>
</div>
</div>
</div>
<div class="sect4">
<h5 id="core.web.pageables"><a class="anchor" href="#core.web.pageables"></a>Hypermedia Support for Pageables</h5>
<div class="paragraph">
<p>Spring HATEOAS ships with a representation model class (<code>PagedResources</code>) that allows enriching the content of a <code>Page</code> instance with the necessary <code>Page</code> metadata as well as links to let the clients easily navigate the pages. The conversion of a Page to a <code>PagedResources</code> is done by an implementation of the Spring HATEOAS <code>ResourceAssembler</code> interface, called the <code>PagedResourcesAssembler</code>. The following example shows how to use a <code>PagedResourcesAssembler</code> as a controller method argument:</p>
</div>
<div class="exampleblock">
<div class="title">Example 51. Using a PagedResourcesAssembler as controller method argument</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Controller
class PersonController {

  @Autowired PersonRepository repository;

  @RequestMapping(value = "/persons", method = RequestMethod.GET)
  HttpEntity&lt;PagedResources&lt;Person&gt;&gt; persons(Pageable pageable,
    PagedResourcesAssembler assembler) {

    Page&lt;Person&gt; persons = repository.findAll(pageable);
    return new ResponseEntity&lt;&gt;(assembler.toResources(persons), HttpStatus.OK);
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Enabling the configuration as shown in the preceding example lets the <code>PagedResourcesAssembler</code> be used as a controller method argument. Calling <code>toResources(…)</code> on it has the following effects:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The content of the <code>Page</code> becomes the content of the <code>PagedResources</code> instance.</p>
</li>
<li>
<p>The <code>PagedResources</code> object gets a <code>PageMetadata</code> instance attached, and it is populated with information from the <code>Page</code> and the underlying <code>PageRequest</code>.</p>
</li>
<li>
<p>The <code>PagedResources</code> may get <code>prev</code> and <code>next</code> links attached, depending on the page&#8217;s state. The links point to the URI to which the method maps. The pagination parameters added to the method match the setup of the <code>PageableHandlerMethodArgumentResolver</code> to make sure the links can be resolved later.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Assume we have 30 Person instances in the database. You can now trigger a request (<code>GET <a href="http://localhost:8080/persons" class="bare">http://localhost:8080/persons</a></code>) and see output similar to the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-javascript hljs" data-lang="javascript">{ "links" : [ { "rel" : "next",
                "href" : "http://localhost:8080/persons?page=1&amp;size=20 }
  ],
  "content" : [
     … // 20 Person instances rendered here
  ],
  "pageMetadata" : {
    "size" : 20,
    "totalElements" : 30,
    "totalPages" : 2,
    "number" : 0
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>You see that the assembler produced the correct URI and also picked up the default configuration to resolve the parameters into a <code>Pageable</code> for an upcoming request. This means that, if you change that configuration, the links automatically adhere to the change. By default, the assembler points to the controller method it was invoked in, but that can be customized by handing in a custom <code>Link</code> to be used as base to build the pagination links, which overloads the <code>PagedResourcesAssembler.toResource(…)</code> method.</p>
</div>
</div>
<div class="sect4">
<h5 id="core.web.binding"><a class="anchor" href="#core.web.binding"></a>Web Databinding Support</h5>
<div class="paragraph">
<p>Spring Data projections (described in <a href="#projections">Projections</a>) can be used to bind incoming request payloads by either using <a href="https://goessner.net/articles/JsonPath/">JSONPath</a> expressions (requires <a href="https://github.com/json-path/JsonPath">Jayway JsonPath</a> or <a href="https://www.w3.org/TR/xpath-31/">XPath</a> expressions (requires <a href="https://xmlbeam.org/">XmlBeam</a>), as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 52. HTTP payload binding using JSONPath or XPath expressions</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@ProjectedPayload
public interface UserPayload {

  @XBRead("//firstname")
  @JsonPath("$..firstname")
  String getFirstname();

  @XBRead("/lastname")
  @JsonPath({ "$.lastname", "$.user.lastname" })
  String getLastname();
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The type shown in the preceding example can be used as a Spring MVC handler method argument or by using <code>ParameterizedTypeReference</code> on one of <code>RestTemplate</code>'s methods.
The preceding method declarations would try to find <code>firstname</code> anywhere in the given document.
The <code>lastname</code> XML lookup is performed on the top-level of the incoming document.
The JSON variant of that tries a top-level <code>lastname</code> first but also tries <code>lastname</code> nested in a <code>user</code> sub-document if the former does not return a value.
That way, changes in the structure of the source document can be mitigated easily without having clients calling the exposed methods (usually a drawback of class-based payload binding).</p>
</div>
<div class="paragraph">
<p>Nested projections are supported as described in <a href="#projections">Projections</a>.
If the method returns a complex, non-interface type, a Jackson <code>ObjectMapper</code> is used to map the final value.</p>
</div>
<div class="paragraph">
<p>For Spring MVC, the necessary converters are registered automatically as soon as <code>@EnableSpringDataWebSupport</code> is active and the required dependencies are available on the classpath.
For usage with <code>RestTemplate</code>, register a <code>ProjectingJackson2HttpMessageConverter</code> (JSON) or <code>XmlBeamHttpMessageConverter</code> manually.</p>
</div>
<div class="paragraph">
<p>For more information, see the <a href="https://github.com/spring-projects/spring-data-examples/tree/master/web/projection">web projection example</a> in the canonical <a href="https://github.com/spring-projects/spring-data-examples">Spring Data Examples repository</a>.</p>
</div>
</div>
<div class="sect4">
<h5 id="core.web.type-safe"><a class="anchor" href="#core.web.type-safe"></a>Querydsl Web Support</h5>
<div class="paragraph">
<p>For those stores having <a href="http://www.querydsl.com/">QueryDSL</a> integration, it is possible to derive queries from the attributes contained in a <code>Request</code> query string.</p>
</div>
<div class="paragraph">
<p>Consider the following query string:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">?firstname=Dave&amp;lastname=Matthews</code></pre>
</div>
</div>
<div class="paragraph">
<p>Given the <code>User</code> object from previous examples, a query string can be resolved to the following value by using the <code>QuerydslPredicateArgumentResolver</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">QUser.user.firstname.eq("Dave").and(QUser.user.lastname.eq("Matthews"))</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The feature is automatically enabled, along with <code>@EnableSpringDataWebSupport</code>, when Querydsl is found on the classpath.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Adding a <code>@QuerydslPredicate</code> to the method signature provides a ready-to-use <code>Predicate</code>, which can be run by using the <code>QuerydslPredicateExecutor</code>.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
Type information is typically resolved from the method&#8217;s return type. Since that information does not necessarily match the domain type, it might be a good idea to use the <code>root</code> attribute of <code>QuerydslPredicate</code>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The following exampe shows how to use <code>@QuerydslPredicate</code> in a method signature:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Controller
class UserController {

  @Autowired UserRepository repository;

  @RequestMapping(value = "/", method = RequestMethod.GET)
  String index(Model model, @QuerydslPredicate(root = User.class) Predicate predicate,    <i class="conum" data-value="1"></i><b>(1)</b>
          Pageable pageable, @RequestParam MultiValueMap&lt;String, String&gt; parameters) {

    model.addAttribute("users", repository.findAll(predicate, pageable));

    return "index";
  }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Resolve query string arguments to matching <code>Predicate</code> for <code>User</code>.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="paragraph">
<p>The default binding is as follows:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Object</code> on simple properties as <code>eq</code>.</p>
</li>
<li>
<p><code>Object</code> on collection like properties as <code>contains</code>.</p>
</li>
<li>
<p><code>Collection</code> on simple properties as <code>in</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Those bindings can be customized through the <code>bindings</code> attribute of <code>@QuerydslPredicate</code> or by making use of Java 8 <code>default methods</code> and adding the <code>QuerydslBinderCustomizer</code> method to the repository interface.</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface UserRepository extends CrudRepository&lt;User, String&gt;,
                                 QuerydslPredicateExecutor&lt;User&gt;,                <i class="conum" data-value="1"></i><b>(1)</b>
                                 QuerydslBinderCustomizer&lt;QUser&gt; {               <i class="conum" data-value="2"></i><b>(2)</b>

  @Override
  default void customize(QuerydslBindings bindings, QUser user) {

    bindings.bind(user.username).first((path, value) -&gt; path.contains(value))    <i class="conum" data-value="3"></i><b>(3)</b>
    bindings.bind(String.class)
      .first((StringPath path, String value) -&gt; path.containsIgnoreCase(value)); <i class="conum" data-value="4"></i><b>(4)</b>
    bindings.excluding(user.password);                                           <i class="conum" data-value="5"></i><b>(5)</b>
  }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td><code>QuerydslPredicateExecutor</code> provides access to specific finder methods for <code>Predicate</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td><code>QuerydslBinderCustomizer</code> defined on the repository interface is automatically picked up and shortcuts <code>@QuerydslPredicate(bindings=&#8230;&#8203;)</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Define the binding for the <code>username</code> property to be a simple <code>contains</code> binding.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Define the default binding for <code>String</code> properties to be a case-insensitive <code>contains</code> match.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Exclude the <code>password</code> property from <code>Predicate</code> resolution.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="core.repository-populators"><a class="anchor" href="#core.repository-populators"></a>4.8.3. Repository Populators</h4>
<div class="paragraph">
<p>If you work with the Spring JDBC module, you are probably familiar with the support to populate a <code>DataSource</code> with SQL scripts. A similar abstraction is available on the repositories level, although it does not use SQL as the data definition language because it must be store-independent. Thus, the populators support XML (through Spring&#8217;s OXM abstraction) and JSON (through Jackson) to define data with which to populate the repositories.</p>
</div>
<div class="paragraph">
<p>Assume you have a file <code>data.json</code> with the following content:</p>
</div>
<div class="exampleblock">
<div class="title">Example 53. Data defined in JSON</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-javascript hljs" data-lang="javascript">[ { "_class" : "com.acme.Person",
 "firstname" : "Dave",
  "lastname" : "Matthews" },
  { "_class" : "com.acme.Person",
 "firstname" : "Carter",
  "lastname" : "Beauford" } ]</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>You can populate your repositories by using the populator elements of the repository namespace provided in Spring Data Commons. To populate the preceding data to your PersonRepository, declare a populator similar to the following:</p>
</div>
<div class="exampleblock">
<div class="title">Example 54. Declaring a Jackson repository populator</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:repository="http://www.springframework.org/schema/data/repository"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    https://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/data/repository
    https://www.springframework.org/schema/data/repository/spring-repository.xsd"&gt;

  &lt;repository:jackson2-populator locations="classpath:data.json" /&gt;

&lt;/beans&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The preceding declaration causes the <code>data.json</code> file to
be read and deserialized by a Jackson <code>ObjectMapper</code>.</p>
</div>
<div class="paragraph">
<p>The type to which the JSON object is unmarshalled is determined by inspecting the <code>_class</code> attribute of the JSON document. The infrastructure eventually selects the appropriate repository to handle the object that was deserialized.</p>
</div>
<div class="paragraph">
<p>To instead use XML to define the data the repositories should be populated with, you can use the <code>unmarshaller-populator</code> element. You configure it to use one of the XML marshaller options available in Spring OXM. See the <a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/data-access.html#oxm">Spring reference documentation</a> for details. The following example shows how to unmarshal a repository populator with JAXB:</p>
</div>
<div class="exampleblock">
<div class="title">Example 55. Declaring an unmarshalling repository populator (using JAXB)</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:repository="http://www.springframework.org/schema/data/repository"
  xmlns:oxm="http://www.springframework.org/schema/oxm"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    https://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/data/repository
    https://www.springframework.org/schema/data/repository/spring-repository.xsd
    http://www.springframework.org/schema/oxm
    https://www.springframework.org/schema/oxm/spring-oxm.xsd"&gt;

  &lt;repository:unmarshaller-populator locations="classpath:data.json"
    unmarshaller-ref="unmarshaller" /&gt;

  &lt;oxm:jaxb2-marshaller contextPath="com.acme" /&gt;

&lt;/beans&gt;</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="projections"><a class="anchor" href="#projections"></a>5. Projections</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Spring Data query methods usually return one or multiple instances of the aggregate root managed by the repository.
However, it might sometimes be desirable to create projections based on certain attributes of those types.
Spring Data allows modeling dedicated return types, to more selectively retrieve partial views of the managed aggregates.</p>
</div>
<div class="paragraph">
<p>Imagine a repository and aggregate root type such as the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 56. A sample aggregate and repository</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">class Person {

  @Id UUID id;
  String firstname, lastname;
  Address address;

  static class Address {
    String zipCode, city, street;
  }
}

interface PersonRepository extends Repository&lt;Person, UUID&gt; {

  Collection&lt;Person&gt; findByLastname(String lastname);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Now imagine that we want to retrieve the person&#8217;s name attributes only.
What means does Spring Data offer to achieve this? The rest of this chapter answers that question.</p>
</div>
<div class="sect2">
<h3 id="projections.interfaces"><a class="anchor" href="#projections.interfaces"></a>5.1. Interface-based Projections</h3>
<div class="paragraph">
<p>The easiest way to limit the result of the queries to only the name attributes is by declaring an interface that exposes accessor methods for the properties to be read, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 57. A projection interface to retrieve a subset of attributes</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface NamesOnly {

  String getFirstname();
  String getLastname();
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The important bit here is that the properties defined here exactly match properties in the aggregate root.
Doing so lets a query method be added as follows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 58. A repository using an interface based projection with a query method</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface PersonRepository extends Repository&lt;Person, UUID&gt; {

  Collection&lt;NamesOnly&gt; findByLastname(String lastname);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The query execution engine creates proxy instances of that interface at runtime for each element returned and forwards calls to the exposed methods to the target object.</p>
</div>
<div id="projections.interfaces.nested" class="paragraph">
<p>Projections can be used recursively. If you want to include some of the <code>Address</code> information as well, create a projection interface for that and return that interface from the declaration of <code>getAddress()</code>, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 59. A projection interface to retrieve a subset of attributes</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface PersonSummary {

  String getFirstname();
  String getLastname();
  AddressSummary getAddress();

  interface AddressSummary {
    String getCity();
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>On method invocation, the <code>address</code> property of the target instance is obtained and wrapped into a projecting proxy in turn.</p>
</div>
<div class="sect3">
<h4 id="projections.interfaces.closed"><a class="anchor" href="#projections.interfaces.closed"></a>5.1.1. Closed Projections</h4>
<div class="paragraph">
<p>A projection interface whose accessor methods all match properties of the target aggregate is considered to be a closed projection. The following example (which we used earlier in this chapter, too) is a closed projection:</p>
</div>
<div class="exampleblock">
<div class="title">Example 60. A closed projection</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface NamesOnly {

  String getFirstname();
  String getLastname();
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>If you use a closed projection, Spring Data can optimize the query execution, because we know about all the attributes that are needed to back the projection proxy.
For more details on that, see the module-specific part of the reference documentation.</p>
</div>
</div>
<div class="sect3">
<h4 id="projections.interfaces.open"><a class="anchor" href="#projections.interfaces.open"></a>5.1.2. Open Projections</h4>
<div class="paragraph">
<p>Accessor methods in projection interfaces can also be used to compute new values by using the <code>@Value</code> annotation, as shown in the following example:</p>
</div>
<div id="projections.interfaces.open.simple" class="exampleblock">
<div class="title">Example 61. An Open Projection</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface NamesOnly {

  @Value("#{target.firstname + ' ' + target.lastname}")
  String getFullName();
  …
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The aggregate root backing the projection is available in the <code>target</code> variable.
A projection interface using <code>@Value</code> is an open projection.
Spring Data cannot apply query execution optimizations in this case, because the SpEL expression could use any attribute of the aggregate root.</p>
</div>
<div class="paragraph">
<p>The expressions used in <code>@Value</code> should not be too complex&#8201;&#8212;&#8201;you want to avoid programming in <code>String</code> variables.
For very simple expressions, one option might be to resort to default methods (introduced in Java 8), as shown in the following example:</p>
</div>
<div id="projections.interfaces.open.default" class="exampleblock">
<div class="title">Example 62. A projection interface using a default method for custom logic</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface NamesOnly {

  String getFirstname();
  String getLastname();

  default String getFullName() {
    return getFirstname().concat(" ").concat(getLastname());
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>This approach requires you to be able to implement logic purely based on the other accessor methods exposed on the projection interface.
A second, more flexible, option is to implement the custom logic in a Spring bean and then invoke that from the SpEL expression, as shown in the following example:</p>
</div>
<div id="projections.interfaces.open.bean-reference" class="exampleblock">
<div class="title">Example 63. Sample Person object</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Component
class MyBean {

  String getFullName(Person person) {
    …
  }
}

interface NamesOnly {

  @Value("#{@myBean.getFullName(target)}")
  String getFullName();
  …
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Notice how the SpEL expression refers to <code>myBean</code> and invokes the <code>getFullName(…)</code> method and forwards the projection target as a method parameter.
Methods backed by SpEL expression evaluation can also use method parameters, which can then be referred to from the expression.
The method parameters are available through an <code>Object</code> array named <code>args</code>. The following example shows how to get a method parameter from the <code>args</code> array:</p>
</div>
<div class="exampleblock">
<div class="title">Example 64. Sample Person object</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface NamesOnly {

  @Value("#{args[0] + ' ' + target.firstname + '!'}")
  String getSalutation(String prefix);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Again, for more complex expressions, you should use a Spring bean and let the expression invoke a method, as described <a href="#projections.interfaces.open.bean-reference">earlier</a>.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="projections.dtos"><a class="anchor" href="#projections.dtos"></a>5.2. Class-based Projections (DTOs)</h3>
<div class="paragraph">
<p>Another way of defining projections is by using value type DTOs (Data Transfer Objects) that hold properties for the fields that are supposed to be retrieved.
These DTO types can be used in exactly the same way projection interfaces are used, except that no proxying happens and no nested projections can be applied.</p>
</div>
<div class="paragraph">
<p>If the store optimizes the query execution by limiting the fields to be loaded, the fields to be loaded are determined from the parameter names of the constructor that is exposed.</p>
</div>
<div class="paragraph">
<p>The following example shows a projecting DTO:</p>
</div>
<div class="exampleblock">
<div class="title">Example 65. A projecting DTO</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">class NamesOnly {

  private final String firstname, lastname;

  NamesOnly(String firstname, String lastname) {

    this.firstname = firstname;
    this.lastname = lastname;
  }

  String getFirstname() {
    return this.firstname;
  }

  String getLastname() {
    return this.lastname;
  }

  // equals(…) and hashCode() implementations
}</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="title">Avoid boilerplate code for projection DTOs</div>
<div class="paragraph">
<p>You can dramatically simplify the code for a DTO by using <a href="https://projectlombok.org">Project Lombok</a>, which provides an <code>@Value</code> annotation (not to be confused with Spring&#8217;s <code>@Value</code> annotation shown in the earlier interface examples).
If you use Project Lombok&#8217;s <code>@Value</code> annotation, the sample DTO shown earlier would become the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Value
class NamesOnly {
	String firstname, lastname;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Fields are <code>private final</code> by default, and the class exposes a constructor that takes all fields and automatically gets <code>equals(…)</code> and <code>hashCode()</code> methods implemented.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="projection.dynamic"><a class="anchor" href="#projection.dynamic"></a>5.3. Dynamic Projections</h3>
<div class="paragraph">
<p>So far, we have used the projection type as the return type or element type of a collection.
However, you might want to select the type to be used at invocation time (which makes it dynamic).
To apply dynamic projections, use a query method such as the one shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 66. A repository using a dynamic projection parameter</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">interface PersonRepository extends Repository&lt;Person, UUID&gt; {

  &lt;T&gt; Collection&lt;T&gt; findByLastname(String lastname, Class&lt;T&gt; type);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>This way, the method can be used to obtain the aggregates as is or with a projection applied, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 67. Using a repository with dynamic projections</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">void someMethod(PersonRepository people) {

  Collection&lt;Person&gt; aggregates =
    people.findByLastname("Matthews", Person.class);

  Collection&lt;NamesOnly&gt; aggregates =
    people.findByLastname("Matthews", NamesOnly.class);
}</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="query-by-example"><a class="anchor" href="#query-by-example"></a>6. Query by Example</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="query-by-example.introduction"><a class="anchor" href="#query-by-example.introduction"></a>6.1. Introduction</h3>
<div class="paragraph">
<p>This chapter provides an introduction to Query by Example and explains how to use it.</p>
</div>
<div class="paragraph">
<p>Query by Example (QBE) is a user-friendly querying technique with a simple interface.
It allows dynamic query creation and does not require you to write queries that contain field names.
In fact, Query by Example does not require you to write queries by using store-specific query languages at all.</p>
</div>
</div>
<div class="sect2">
<h3 id="query-by-example.usage"><a class="anchor" href="#query-by-example.usage"></a>6.2. Usage</h3>
<div class="paragraph">
<p>The Query by Example API consists of three parts:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Probe: The actual example of a domain object with populated fields.</p>
</li>
<li>
<p><code>ExampleMatcher</code>: The <code>ExampleMatcher</code> carries details on how to match particular fields.
It can be reused across multiple Examples.</p>
</li>
<li>
<p><code>Example</code>: An <code>Example</code> consists of the probe and the <code>ExampleMatcher</code>.
It is used to create the query.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Query by Example is well suited for several use cases:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Querying your data store with a set of static or dynamic constraints.</p>
</li>
<li>
<p>Frequent refactoring of the domain objects without worrying about breaking existing queries.</p>
</li>
<li>
<p>Working independently from the underlying data store API.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Query by Example also has several limitations:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>No support for nested or grouped property constraints, such as <code>firstname = ?0 or (firstname = ?1 and lastname = ?2)</code>.</p>
</li>
<li>
<p>Only supports starts/contains/ends/regex matching for strings and exact matching for other property types.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Before getting started with Query by Example, you need to have a domain object.
To get started, create an interface for your repository, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 68. Sample Person object</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">public class Person {

  @Id
  private String id;
  private String firstname;
  private String lastname;
  private Address address;

  // … getters and setters omitted
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The preceding example shows a simple domain object.
You can use it to create an <code>Example</code>.
By default, fields having <code>null</code> values are ignored, and strings are matched by using the store specific defaults.
Examples can be built by either using the <code>of</code> factory method or by using <a href="#query-by-example.matchers"><code>ExampleMatcher</code></a>. <code>Example</code> is immutable.
The following listing shows a simple Example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 69. Simple Example</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Person person = new Person();                         <i class="conum" data-value="1"></i><b>(1)</b>
person.setFirstname("Dave");                          <i class="conum" data-value="2"></i><b>(2)</b>

Example&lt;Person&gt; example = Example.of(person);         <i class="conum" data-value="3"></i><b>(3)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Create a new instance of the domain object.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Set the properties to query.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Create the <code>Example</code>.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="paragraph">
<p>Example queries can be executed by using repositories.
To do so, let your repository interface extend <code>QueryByExampleExecutor&lt;T&gt;</code>.
The following listing shows an excerpt from the <code>QueryByExampleExecutor</code> interface:</p>
</div>
<div class="exampleblock">
<div class="title">Example 70. The <code>QueryByExampleExecutor</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">public interface QueryByExampleExecutor&lt;T&gt; {

  &lt;S extends T&gt; S findOne(Example&lt;S&gt; example);

  &lt;S extends T&gt; Iterable&lt;S&gt; findAll(Example&lt;S&gt; example);

  // … more functionality omitted.
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="query-by-example.matchers"><a class="anchor" href="#query-by-example.matchers"></a>6.3. Example Matchers</h3>
<div class="paragraph">
<p>Examples are not limited to default settings.
You can specify your own defaults for string matching, null handling, and property-specific settings by using the <code>ExampleMatcher</code>, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 71. Example matcher with customized matching</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Person person = new Person();                          <i class="conum" data-value="1"></i><b>(1)</b>
person.setFirstname("Dave");                           <i class="conum" data-value="2"></i><b>(2)</b>

ExampleMatcher matcher = ExampleMatcher.matching()     <i class="conum" data-value="3"></i><b>(3)</b>
  .withIgnorePaths("lastname")                         <i class="conum" data-value="4"></i><b>(4)</b>
  .withIncludeNullValues()                             <i class="conum" data-value="5"></i><b>(5)</b>
  .withStringMatcherEnding();                          <i class="conum" data-value="6"></i><b>(6)</b>

Example&lt;Person&gt; example = Example.of(person, matcher); <i class="conum" data-value="7"></i><b>(7)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Create a new instance of the domain object.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Set properties.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Create an <code>ExampleMatcher</code> to expect all values to match.
It is usable at this stage even without further configuration.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Construct a new <code>ExampleMatcher</code> to ignore the <code>lastname</code> property path.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Construct a new <code>ExampleMatcher</code> to ignore the <code>lastname</code> property path and to include null values.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Construct a new <code>ExampleMatcher</code> to ignore the <code>lastname</code> property path, to include null values, and to perform suffix string matching.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Create a new <code>Example</code> based on the domain object and the configured <code>ExampleMatcher</code>.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="paragraph">
<p>By default, the <code>ExampleMatcher</code> expects all values set on the probe to match.
If you want to get results matching any of the predicates defined implicitly, use <code>ExampleMatcher.matchingAny()</code>.</p>
</div>
<div class="paragraph">
<p>You can specify behavior for individual properties (such as "firstname" and "lastname" or, for nested properties, "address.city").
You can tune it with matching options and case sensitivity, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 72. Configuring matcher options</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">ExampleMatcher matcher = ExampleMatcher.matching()
  .withMatcher("firstname", endsWith())
  .withMatcher("lastname", startsWith().ignoreCase());
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Another way to configure matcher options is to use lambdas (introduced in Java 8).
This approach creates a callback that asks the implementor to modify the matcher.
You need not return the matcher, because configuration options are held within the matcher instance.
The following example shows a matcher that uses lambdas:</p>
</div>
<div class="exampleblock">
<div class="title">Example 73. Configuring matcher options with lambdas</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">ExampleMatcher matcher = ExampleMatcher.matching()
  .withMatcher("firstname", match -&gt; match.endsWith())
  .withMatcher("firstname", match -&gt; match.startsWith());
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Queries created by <code>Example</code> use a merged view of the configuration.
Default matching settings can be set at the <code>ExampleMatcher</code> level, while individual settings can be applied to particular property paths.
Settings that are set on <code>ExampleMatcher</code> are inherited by property path settings unless they are defined explicitly.
Settings on a property patch have higher precedence than default settings.
The following table describes the scope of the various <code>ExampleMatcher</code> settings:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 2. Scope of <code>ExampleMatcher</code> settings</caption>
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 66.6667%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Setting</th>
<th class="tableblock halign-left valign-top">Scope</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Null-handling</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ExampleMatcher</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">String matching</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ExampleMatcher</code> and property path</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Ignoring properties</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Property path</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Case sensitivity</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ExampleMatcher</code> and property path</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Value transformation</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Property path</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="auditing"><a class="anchor" href="#auditing"></a>7. Auditing</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="auditing.basics"><a class="anchor" href="#auditing.basics"></a>7.1. Basics</h3>
<div class="paragraph">
<p>Spring Data provides sophisticated support to transparently keep track of who created or changed an entity and when the change happened. To benefit from that functionality, you have to equip your entity classes with auditing metadata that can be defined either using annotations or by implementing an interface.</p>
</div>
<div class="sect3">
<h4 id="auditing.annotations"><a class="anchor" href="#auditing.annotations"></a>7.1.1. Annotation-based Auditing Metadata</h4>
<div class="paragraph">
<p>We provide <code>@CreatedBy</code> and <code>@LastModifiedBy</code> to capture the user who created or modified the entity as well as <code>@CreatedDate</code> and <code>@LastModifiedDate</code> to capture when the change happened.</p>
</div>
<div class="exampleblock">
<div class="title">Example 74. An audited entity</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">class Customer {

  @CreatedBy
  private User user;

  @CreatedDate
  private DateTime createdDate;

  // … further properties omitted
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>As you can see, the annotations can be applied selectively, depending on which information you want to capture. The annotations capturing when changes were made can be used on properties of type Joda-Time, <code>DateTime</code>, legacy Java <code>Date</code> and <code>Calendar</code>, JDK8 date and time types, and <code>long</code> or <code>Long</code>.</p>
</div>
</div>
<div class="sect3">
<h4 id="auditing.interfaces"><a class="anchor" href="#auditing.interfaces"></a>7.1.2. Interface-based Auditing Metadata</h4>
<div class="paragraph">
<p>In case you do not want to use annotations to define auditing metadata, you can let your domain class implement the <code>Auditable</code> interface. It exposes setter methods for all of the auditing properties.</p>
</div>
<div class="paragraph">
<p>There is also a convenience base class, <code>AbstractAuditable</code>, which you can extend to avoid the need to manually implement the interface methods. Doing so increases the coupling of your domain classes to Spring Data, which might be something you want to avoid. Usually, the annotation-based way of defining auditing metadata is preferred as it is less invasive and more flexible.</p>
</div>
</div>
<div class="sect3">
<h4 id="auditing.auditor-aware"><a class="anchor" href="#auditing.auditor-aware"></a>7.1.3. <code>AuditorAware</code></h4>
<div class="paragraph">
<p>In case you use either <code>@CreatedBy</code> or <code>@LastModifiedBy</code>, the auditing infrastructure somehow needs to become aware of the current principal. To do so, we provide an <code>AuditorAware&lt;T&gt;</code> SPI interface that you have to implement to tell the infrastructure who the current user or system interacting with the application is. The generic type <code>T</code> defines what type the properties annotated with <code>@CreatedBy</code> or <code>@LastModifiedBy</code> have to be.</p>
</div>
<div class="paragraph">
<p>The following example shows an implementation of the interface that uses Spring Security&#8217;s <code>Authentication</code> object:</p>
</div>
<div class="exampleblock">
<div class="title">Example 75. Implementation of AuditorAware based on Spring Security</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">class SpringSecurityAuditorAware implements AuditorAware&lt;User&gt; {

  public Optional&lt;User&gt; getCurrentAuditor() {

    return Optional.ofNullable(SecurityContextHolder.getContext())
			  .map(SecurityContext::getAuthentication)
			  .filter(Authentication::isAuthenticated)
			  .map(Authentication::getPrincipal)
			  .map(User.class::cast);
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The implementation accesses the <code>Authentication</code> object provided by Spring Security and looks up the custom <code>UserDetails</code> instance that you have created in your <code>UserDetailsService</code> implementation. We assume here that you are exposing the domain user through the <code>UserDetails</code> implementation but that, based on the <code>Authentication</code> found, you could also look it up from anywhere.
:leveloffset: -1</p>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="appendix"><a class="anchor" href="#appendix"></a>8. Appendix</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="repositories.namespace-reference"><a class="anchor" href="#repositories.namespace-reference"></a>Appendix A: Namespace reference</h3>
<div class="sect3">
<h4 id="populator.namespace-dao-config"><a class="anchor" href="#populator.namespace-dao-config"></a>The <code>&lt;repositories /&gt;</code> Element</h4>
<div class="paragraph">
<p>The <code>&lt;repositories /&gt;</code> element triggers the setup of the Spring Data repository infrastructure. The most important attribute is <code>base-package</code>, which defines the package to scan for Spring Data repository interfaces. See &#8220;<a href="#repositories.create-instances.spring">XML configuration</a>&#8221;. The following table describes the attributes of the <code>&lt;repositories /&gt;</code> element:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 3. Attributes</caption>
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>base-package</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Defines the package to be scanned for repository interfaces that extend <code>*Repository</code> (the actual interface is determined by the specific Spring Data module) in auto-detection mode. All packages below the configured package are scanned, too. Wildcards are allowed.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>repository-impl-postfix</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Defines the postfix to autodetect custom repository implementations. Classes whose names end with the configured postfix are considered as candidates. Defaults to <code>Impl</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>query-lookup-strategy</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Determines the strategy to be used to create finder queries. See &#8220;<a href="#repositories.query-methods.query-lookup-strategies">Query Lookup Strategies</a>&#8221; for details. Defaults to <code>create-if-not-found</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>named-queries-location</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Defines the location to search for a Properties file containing externally defined queries.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>consider-nested-repositories</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Whether nested repository interface definitions should be considered. Defaults to <code>false</code>.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect2">
<h3 id="populator.namespace-reference"><a class="anchor" href="#populator.namespace-reference"></a>Appendix B: Populators namespace reference</h3>
<div class="sect3">
<h4 id="namespace-dao-config"><a class="anchor" href="#namespace-dao-config"></a>The &lt;populator /&gt; element</h4>
<div class="paragraph">
<p>The <code>&lt;populator /&gt;</code> element allows to populate the a data store via the Spring Data repository infrastructure.<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup></p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 4. Attributes</caption>
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>locations</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Where to find the files to read the objects from the repository shall be populated with.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect2">
<h3 id="repository-query-keywords"><a class="anchor" href="#repository-query-keywords"></a>Appendix C: Repository query keywords</h3>
<div class="sect3">
<h4>Supported query keywords</h4>
<div class="paragraph">
<p>The following table lists the keywords generally supported by the Spring Data repository query derivation mechanism. However, consult the store-specific documentation for the exact list of supported keywords, because some keywords listed here might not be supported in a particular store.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 5. Query keywords</caption>
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Logical keyword</th>
<th class="tableblock halign-left valign-top">Keyword expressions</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>AND</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>And</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>OR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Or</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>AFTER</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>After</code>, <code>IsAfter</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>BEFORE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Before</code>, <code>IsBefore</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>CONTAINING</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Containing</code>, <code>IsContaining</code>, <code>Contains</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>BETWEEN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Between</code>, <code>IsBetween</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ENDING_WITH</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>EndingWith</code>, <code>IsEndingWith</code>, <code>EndsWith</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>EXISTS</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Exists</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>FALSE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>False</code>, <code>IsFalse</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GREATER_THAN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GreaterThan</code>, <code>IsGreaterThan</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GREATER_THAN_EQUALS</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GreaterThanEqual</code>, <code>IsGreaterThanEqual</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>In</code>, <code>IsIn</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IS</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Is</code>, <code>Equals</code>, (or no keyword)</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IS_EMPTY</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IsEmpty</code>, <code>Empty</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IS_NOT_EMPTY</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IsNotEmpty</code>, <code>NotEmpty</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IS_NOT_NULL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NotNull</code>, <code>IsNotNull</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IS_NULL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Null</code>, <code>IsNull</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LESS_THAN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LessThan</code>, <code>IsLessThan</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LESS_THAN_EQUAL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LessThanEqual</code>, <code>IsLessThanEqual</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LIKE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Like</code>, <code>IsLike</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NEAR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Near</code>, <code>IsNear</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NOT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Not</code>, <code>IsNot</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NOT_IN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NotIn</code>, <code>IsNotIn</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NOT_LIKE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NotLike</code>, <code>IsNotLike</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>REGEX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Regex</code>, <code>MatchesRegex</code>, <code>Matches</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>STARTING_WITH</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>StartingWith</code>, <code>IsStartingWith</code>, <code>StartsWith</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>TRUE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>True</code>, <code>IsTrue</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>WITHIN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Within</code>, <code>IsWithin</code></p></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect2">
<h3 id="repository-query-return-types"><a class="anchor" href="#repository-query-return-types"></a>Appendix D: Repository query return types</h3>
<div class="sect3">
<h4>Supported Query Return Types</h4>
<div class="paragraph">
<p>The following table lists the return types generally supported by Spring Data repositories. However, consult the store-specific documentation for the exact list of supported return types, because some types listed here might not be supported in a particular store.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Geospatial types (such as <code>GeoResult</code>, <code>GeoResults</code>, and <code>GeoPage</code>) are available only for data stores that support geospatial queries.
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 6. Query return types</caption>
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Return type</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>void</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Denotes no return value.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primitives</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Java primitives.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wrapper types</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Java wrapper types.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>T</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A unique entity. Expects the query method to return one result at most. If no result is found, <code>null</code> is returned. More than one result triggers an <code>IncorrectResultSizeDataAccessException</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Iterator&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">An <code>Iterator</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Collection&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A <code>Collection</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>List&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A <code>List</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Optional&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A Java 8 or Guava <code>Optional</code>. Expects the query method to return one result at most. If no result is found, <code>Optional.empty()</code> or <code>Optional.absent()</code> is returned. More than one result triggers an <code>IncorrectResultSizeDataAccessException</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Option&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Either a Scala or Vavr <code>Option</code> type. Semantically the same behavior as Java 8&#8217;s <code>Optional</code>, described earlier.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Stream&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A Java 8 <code>Stream</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Streamable&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A convenience extension of <code>Iterable</code> that directy exposes methods to stream, map and filter results, concatenate them etc.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Types that implement <code>Streamable</code> and take a <code>Streamable</code> constructor or factory method argument</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Types that expose a constructor or <code>….of(…)</code>/<code>….valueOf(…)</code> factory method taking a <code>Streamable</code> as argument. See <a href="#repositories.collections-and-iterables.streamable-wrapper">Returning Custom Streamable Wrapper Types</a> for details.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Vavr <code>Seq</code>, <code>List</code>, <code>Map</code>, <code>Set</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Vavr collection types. See <a href="#repositories.collections-and-iterables.vavr">Support for Vavr Collections</a> for details.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Future&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A <code>Future</code>. Expects a method to be annotated with <code>@Async</code> and requires Spring&#8217;s asynchronous method execution capability to be enabled.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>CompletableFuture&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A Java 8 <code>CompletableFuture</code>. Expects a method to be annotated with <code>@Async</code> and requires Spring&#8217;s asynchronous method execution capability to be enabled.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ListenableFuture</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A <code>org.springframework.util.concurrent.ListenableFuture</code>. Expects a method to be annotated with <code>@Async</code> and requires Spring&#8217;s asynchronous method execution capability to be enabled.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Slice</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A sized chunk of data with an indication of whether there is more data available. Requires a <code>Pageable</code> method parameter.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Page&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A <code>Slice</code> with additional information, such as the total number of results. Requires a <code>Pageable</code> method parameter.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GeoResult&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A result entry with additional information, such as the distance to a reference location.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GeoResults&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A list of <code>GeoResult&lt;T&gt;</code> with additional information, such as the average distance to a reference location.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GeoPage&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A <code>Page</code> with <code>GeoResult&lt;T&gt;</code>, such as the average distance to a reference location.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Mono&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A Project Reactor <code>Mono</code> emitting zero or one element using reactive repositories. Expects the query method to return one result at most. If no result is found, <code>Mono.empty()</code> is returned. More than one result triggers an <code>IncorrectResultSizeDataAccessException</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Flux&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A Project Reactor <code>Flux</code> emitting zero, one, or many elements using reactive repositories. Queries returning <code>Flux</code> can emit also an infinite number of elements.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Single&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A RxJava <code>Single</code> emitting a single element using reactive repositories. Expects the query method to return one result at most. If no result is found, <code>Mono.empty()</code> is returned. More than one result triggers an <code>IncorrectResultSizeDataAccessException</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Maybe&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A RxJava <code>Maybe</code> emitting zero or one element using reactive repositories. Expects the query method to return one result at most. If no result is found, <code>Mono.empty()</code> is returned. More than one result triggers an <code>IncorrectResultSizeDataAccessException</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Flowable&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A RxJava <code>Flowable</code> emitting zero, one, or many elements using reactive repositories. Queries returning <code>Flowable</code> can emit also an infinite number of elements.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnotedef_1">
<a href="#_footnoteref_1">1</a>. see <a href="#repositories.create-instances.spring">XML configuration</a>
</div>
</div>
<div id="footer">
<div id="footer-text">
Version 2.3.2.RELEASE<br>
Last updated 2020-07-22 10:41:13 +0200
</div>
</div>
<script type="text/javascript" src="js/tocbot/tocbot.min.js"></script>
<script type="text/javascript" src="js/toc.js"></script>
<link rel="stylesheet" href="js/highlight/styles/github.min.css">
<script src="js/highlight/highlight.min.js"></script>
<script>hljs.initHighlighting()</script>
<script>if(window.parent==window){(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create','UA-2728886-23','auto',{'siteSpeedSampleRate':100});ga('send','pageview');}</script></body>
</html>