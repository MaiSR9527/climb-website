<!DOCTYPE HTML>
<html lang="en-US" >
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=11; IE=10; IE=9; IE=8; IE=7; IE=EDGE" />
        <title> | </title>
        <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
        <meta name="description" content="">
        <meta name="generator" content="GoBook 0.1">
        <meta name="HandheldFriendly" content="true"/>
        <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-status-bar-style" content="black">
        <link rel="apple-touch-icon-precomposed" sizes="152x152" href="gitbook/images/apple-touch-icon-precomposed-152.png">
        
    
</head>
<body>

<link rel="stylesheet" href="../gitbook/style.css">

<div class="book" data-level="0" data-basepath="." data-revision="1419950039633">

<div class="book-summary">
    <div class="book-search">
        <input type="text" placeholder="Type to search" class="form-control" />
    </div>
    <ul class="summary">
        <li>
            <a href="../" target="blank" class="custom-link">返回书本首页</a>
        </li>
        <li class="divider"></li>
        <li>
        <ul>
<li><a href="../chapter-01/index.html">创建Orm引擎</a>

<ul>
<li><a href="../chapter-01/1.engine.html">单库引擎</a></li>
<li><a href="../chapter-01/2.engine_group.html">引擎组</a></li>
<li><a href="../chapter-01/3.policy.html">引擎组策略</a></li>
</ul></li>
<li><a href="../chapter-02/index.html">定义表结构体</a>

<ul>
<li><a href="../chapter-02/1.mapping.html">名称映射规则</a></li>
<li><a href="../chapter-02/2.prefix.html">前缀映射，后缀映射和缓存映射</a></li>
<li><a href="../chapter-02/3.tags.html">使用Table和Tag改变名称映射</a></li>
<li><a href="../chapter-02/4.columns.html">Column属性定义</a></li>
<li><a href="../chapter-02/5.types.html">Go与字段类型对应表</a></li>
</ul></li>
<li><a href="../chapter-03/index.html">表结构操作</a>

<ul>
<li><a href="../chapter-03/1.metas.html">获取数据库信息</a></li>
<li><a href="../chapter-03/2.tables.html">表操作</a></li>
<li><a href="../chapter-03/3.indexes.html">创建索引和唯一索引</a></li>
<li><a href="../chapter-03/4.sync.html">同步数据库结构</a></li>
<li><a href="../chapter-03/5.dumpimport.html">导出导入SQL脚本</a></li>
</ul></li>
<li><a href="../chapter-04/index.html">插入数据</a>

<ul>
<li><a href="../chapter-04/1.created.html">创建时间Created</a></li>
</ul></li>
<li><a href="../chapter-05/index.html">查询和统计数据</a>

<ul>
<li><a href="../chapter-05/1.conditions.html">查询条件方法</a></li>
<li><a href="../chapter-05/2.overrides.html">临时开关方法</a></li>
<li><a href="../chapter-05/3.get.html">Get方法</a></li>
<li><a href="../chapter-05/10.exist.html">Exist方法</a></li>
<li><a href="../chapter-05/4.find.html">Find方法</a></li>
<li><a href="../chapter-05/5.join.html">Join的使用</a></li>
<li><a href="../chapter-05/6.iterate.html">Iterate方法</a></li>
<li><a href="../chapter-05/7.count.html">Count方法</a></li>
<li><a href="../chapter-05/8.rows.html">Rows方法</a></li>
<li><a href="../chapter-05/9.sums.html">Sum系列方法</a></li>
</ul></li>
<li><a href="../chapter-06/index.html">更新数据</a>

<ul>
<li><a href="../chapter-06/1.lock.html">乐观锁Version</a></li>
<li><a href="../chapter-06/2.updated.html">更新时间Updated</a></li>
</ul></li>
<li><a href="../chapter-07/index.html">删除数据</a>

<ul>
<li><a href="../chapter-07/1.deleted.html">软删除Deleted</a></li>
</ul></li>
<li><a href="../chapter-08/index.html">执行SQL查询</a></li>
<li><a href="../chapter-09/index.html">执行SQL命令</a></li>
<li><a href="../chapter-10/index.html">事务处理</a></li>
<li><a href="../chapter-11/index.html">缓存</a></li>
<li><a href="../chapter-12/index.html">事件</a></li>
<li><a href="../chapter-13/index.html">Reverse 工具</a></li>
<li><a href="../chapter-14/index.html">常见问题</a></li>
<li><a href="../chapter-15/index.html">案例</a></li>
</ul>

    </li>
        <li class="divider"></li>
        <li>
            <a href="http://gobook.io/" target="blank" class="gitbook-link">GoBook出品</a>
        </li>
        
    </ul>
</div>

    <div class="book-body">
        <div class="body-inner">
            <div class="book-header">
    
    <a href="#" class="btn pull-left toggle-summary" aria-label="Toggle summary"><i class="fa fa-align-justify"></i></a>
    <a href="#" class="btn pull-left toggle-search" aria-label="Toggle search"><i class="fa fa-search"></i></a>
    
    <div id="font-settings-wrapper" class="dropdown pull-left">
        <a href="#" class="btn toggle-dropdown" aria-label="Toggle font settings"><i class="fa fa-font"></i>
        </a>
        <div class="dropdown-menu font-settings">
            <div class="dropdown-caret">
                <span class="caret-outer"></span>
                <span class="caret-inner"></span>
            </div>

            <div class="buttons">
                <button type="button" id="reduce-font-size" class="button size-2">A</button>
                <button type="button" id="enlarge-font-size" class="button size-2">A</button>
            </div>

            <div class="buttons font-family-list">
                <button type="button" data-font="0" class="button">Serif</button>
                <button type="button" data-font="1" class="button">Sans</button>
            </div>

            <div class="buttons color-theme-list">
                <button type="button" id="color-theme-preview-0" class="button size-3" data-theme="0">White</button>
                <button type="button" id="color-theme-preview-1" class="button size-3" data-theme="1">Sepia</button>
                <button type="button" id="color-theme-preview-2" class="button size-3" data-theme="2">Night</button>
            </div>
        </div>
    </div>

    
    <div class="dropdown pull-right">
        <a href="#" class="btn toggle-dropdown" aria-label="Toggle share dropdown"><i class="fa fa-share-alt"></i>
        </a>
        <div class="dropdown-menu font-settings dropdown-left">
            <div class="dropdown-caret">
                <span class="caret-outer"></span>
                <span class="caret-inner"></span>
            </div>
        </div>
    </div>

    
    <h1>
        <i class="fa fa-circle-o-notch fa-spin"></i>
        <a href="./" ></a>
    </h1>
</div>

    <div class="page-wrapper" tabindex="-1">
        <div class="page-inner">
            <section class="normal" id="section-gitbook_2">
            <h3>查询条件方法</h3>

<p>查询和统计主要使用<code>Get</code>, <code>Find</code>, <code>Count</code>, <code>Rows</code>, <code>Iterate</code>这几个方法，同时大部分函数在调用<code>Update</code>, <code>Delete</code>时也是可用的。在进行查询时可以使用多个方法来形成查询条件，条件函数如下：</p>

<ul>
<li>Alias(string)</li>
</ul>

<p>给Table设定一个别名</p>

<pre><code class="language-Go">engine.Alias(&quot;o&quot;).Where(&quot;o.name = ?&quot;, name).Get(&amp;order)
</code></pre>

<ul>
<li>And(string, …interface{})</li>
</ul>

<p>和Where函数中的条件基本相同，作为条件</p>

<pre><code class="language-Go">engine.Where(...).And(...).Get(&amp;order)
</code></pre>

<ul>
<li>Asc(…string)</li>
</ul>

<p>指定字段名正序排序，可以组合</p>

<pre><code class="language-Go">engine.Asc(&quot;id&quot;).Find(&amp;orders)
</code></pre>

<ul>
<li>Desc(…string)</li>
</ul>

<p>指定字段名逆序排序，可以组合</p>

<pre><code class="language-Go">engine.Asc(&quot;id&quot;).Desc(&quot;time&quot;).Find(&amp;orders)
</code></pre>

<ul>
<li>ID(interface{})</li>
</ul>

<p>传入一个主键字段的值，作为查询条件，如</p>

<pre><code class="language-Go">var user User
engine.ID(1).Get(&amp;user)
// SELECT * FROM user Where id = 1
</code></pre>

<p>如果是复合主键，则可以</p>

<pre><code class="language-Go">engine.ID(core.PK{1, &quot;name&quot;}).Get(&amp;user)
// SELECT * FROM user Where id =1 AND name= 'name'
</code></pre>

<p>传入的两个参数按照struct中pk标记字段出现的顺序赋值。</p>

<ul>
<li>Or(interface{}, …interface{})</li>
</ul>

<p>和Where函数中的条件基本相同，作为条件</p>

<ul>
<li>OrderBy(string)</li>
</ul>

<p>按照指定的顺序进行排序</p>

<ul>
<li>Select(string)</li>
</ul>

<p>指定select语句的字段部分内容，例如：</p>

<pre><code class="language-Go">engine.Select(&quot;a.*, (select name from b limit 1) as name&quot;).Find(&amp;beans)

engine.Select(&quot;a.*, (select name from b limit 1) as name&quot;).Get(&amp;bean)
</code></pre>

<ul>
<li>SQL(string, …interface{})</li>
</ul>

<p>执行指定的Sql语句，并把结果映射到结构体。有时，当选择内容或者条件比较复杂时，可以直接使用Sql，例如：</p>

<pre><code class="language-Go">engine.SQL(&quot;select * from table&quot;).Find(&amp;beans)
</code></pre>

<ul>
<li>Where(string, …interface{})</li>
</ul>

<p>和SQL中Where语句中的条件基本相同，作为条件</p>

<pre><code class="language-Go">engine.Where(&quot;a = ? AND b = ?&quot;, 1, 2).Find(&amp;beans)

engine.Where(builder.Eq{&quot;a&quot;:1, &quot;b&quot;: 2}).Find(&amp;beans)

engine.Where(builder.Eq{&quot;a&quot;:1}.Or(builder.Eq{&quot;b&quot;: 2})).Find(&amp;beans)
</code></pre>

<ul>
<li>In(string, …interface{})</li>
</ul>

<p>某字段在一些值中，这里需要注意必须是[]interface{}才可以展开，由于Go语言的限制，[]int64等不可以直接展开，而是通过传递一个slice。第二个参数也可以是一个*builder.Builder 指针。示例代码如下：</p>

<pre><code class="language-Go">// select from table where column in (1,2,3)
engine.In(&quot;cloumn&quot;, 1, 2, 3).Find()

// select from table where column in (1,2,3)
engine.In(&quot;column&quot;, []int{1, 2, 3}).Find()

// select from table where column in (select column from table2 where a = 1)
engine.In(&quot;column&quot;, builder.Select(&quot;column&quot;).From(&quot;table2&quot;).Where(builder.Eq{&quot;a&quot;:1})).Find()
</code></pre>

<ul>
<li>Cols(…string)</li>
</ul>

<p>只查询或更新某些指定的字段，默认是查询所有映射的字段或者根据Update的第一个参数来判断更新的字段。例如：</p>

<pre><code class="language-Go">engine.Cols(&quot;age&quot;, &quot;name&quot;).Get(&amp;usr)
// SELECT age, name FROM user limit 1
engine.Cols(&quot;age&quot;, &quot;name&quot;).Find(&amp;users)
// SELECT age, name FROM user
engine.Cols(&quot;age&quot;, &quot;name&quot;).Update(&amp;user)
// UPDATE user SET age=? AND name=?
</code></pre>

<ul>
<li>AllCols()</li>
</ul>

<p>查询或更新所有字段，一般与Update配合使用，因为默认Update只更新非0，非&rdquo;&ldquo;，非bool的字段。</p>

<pre><code class="language-Go">engine.AllCols().Id(1).Update(&amp;user)
// UPDATE user SET name = ?, age =?, gender =? WHERE id = 1
</code></pre>

<ul>
<li>MustCols(…string)</li>
</ul>

<p>某些字段必须更新，一般与Update配合使用。</p>

<ul>
<li>Omit(&hellip;string)</li>
</ul>

<p>和cols相反，此函数指定排除某些指定的字段。注意：此方法和Cols方法不可同时使用。</p>

<pre><code class="language-Go">// 例1：
engine.Omit(&quot;age&quot;, &quot;gender&quot;).Update(&amp;user)
// UPDATE user SET name = ? AND department = ?
// 例2：
engine.Omit(&quot;age, gender&quot;).Insert(&amp;user)
// INSERT INTO user (name) values (?) // 这样的话age和gender会给默认值
// 例3：
engine.Omit(&quot;age&quot;, &quot;gender&quot;).Find(&amp;users)
// SELECT name FROM user //只select除age和gender字段的其它字段
</code></pre>

<ul>
<li>Distinct(…string)</li>
</ul>

<p>按照参数中指定的字段归类结果。</p>

<pre><code class="language-Go">engine.Distinct(&quot;age&quot;, &quot;department&quot;).Find(&amp;users)
// SELECT DISTINCT age, department FROM user
</code></pre>

<p>注意：当开启了缓存时，此方法的调用将在当前查询中禁用缓存。因为缓存系统当前依赖Id，而此时无法获得Id</p>

<ul>
<li>Table(nameOrStructPtr interface{})</li>
</ul>

<p>传入表名称或者结构体指针，如果传入的是结构体指针，则按照IMapper的规则提取出表名</p>

<ul>
<li>Limit(int, …int)</li>
</ul>

<p>限制获取的数目，第一个参数为条数，第二个参数表示开始位置，如果不传则为0</p>

<ul>
<li>Top(int)</li>
</ul>

<p>相当于Limit(int, 0)</p>

<ul>
<li>Join(string,interface{},string)</li>
</ul>

<p>第一个参数为连接类型，当前支持INNER, LEFT OUTER, CROSS中的一个值，
第二个参数为string类型的表名，表对应的结构体指针或者为两个值的[]string，表示表名和别名，
第三个参数为连接条件</p>

<pre><code>详细用法参见 [5.Join的使用](5.join.md)
</code></pre>

<ul>
<li>GroupBy(string)</li>
</ul>

<p>Groupby的参数字符串</p>

<ul>
<li>Having(string)</li>
</ul>

<p>Having的参数字符串</p>

            </section>
        </div>
    </div>
</div>

        

    </div>
</div>

<script src="../gitbook/app.js"></script>

    

    <script src="../gitbook/plugins/gitbook-plugin-mathjax/plugin.js"></script>



    </body>
</html>
