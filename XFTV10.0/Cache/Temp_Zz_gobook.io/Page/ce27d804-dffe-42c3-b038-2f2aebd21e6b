<!DOCTYPE HTML>
<html lang="en-US" >
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=11; IE=10; IE=9; IE=8; IE=7; IE=EDGE" />
        <title> | </title>
        <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
        <meta name="description" content="">
        <meta name="generator" content="GoBook 0.1">
        <meta name="HandheldFriendly" content="true"/>
        <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-status-bar-style" content="black">
        <link rel="apple-touch-icon-precomposed" sizes="152x152" href="gitbook/images/apple-touch-icon-precomposed-152.png">
        
    
</head>
<body>

<link rel="stylesheet" href="../gitbook/style.css">

<div class="book" data-level="0" data-basepath="." data-revision="1419950039633">

<div class="book-summary">
    <div class="book-search">
        <input type="text" placeholder="Type to search" class="form-control" />
    </div>
    <ul class="summary">
        <li>
            <a href="../" target="blank" class="custom-link">返回书本首页</a>
        </li>
        <li class="divider"></li>
        <li>
        <ul>
<li><a href="../chapter-01/index.html">创建Orm引擎</a>

<ul>
<li><a href="../chapter-01/1.engine.html">单库引擎</a></li>
<li><a href="../chapter-01/2.engine_group.html">引擎组</a></li>
<li><a href="../chapter-01/3.policy.html">引擎组策略</a></li>
</ul></li>
<li><a href="../chapter-02/index.html">定义表结构体</a>

<ul>
<li><a href="../chapter-02/1.mapping.html">名称映射规则</a></li>
<li><a href="../chapter-02/2.prefix.html">前缀映射，后缀映射和缓存映射</a></li>
<li><a href="../chapter-02/3.tags.html">使用Table和Tag改变名称映射</a></li>
<li><a href="../chapter-02/4.columns.html">Column属性定义</a></li>
<li><a href="../chapter-02/5.types.html">Go与字段类型对应表</a></li>
</ul></li>
<li><a href="../chapter-03/index.html">表结构操作</a>

<ul>
<li><a href="../chapter-03/1.metas.html">获取数据库信息</a></li>
<li><a href="../chapter-03/2.tables.html">表操作</a></li>
<li><a href="../chapter-03/3.indexes.html">创建索引和唯一索引</a></li>
<li><a href="../chapter-03/4.sync.html">同步数据库结构</a></li>
<li><a href="../chapter-03/5.dumpimport.html">导出导入SQL脚本</a></li>
</ul></li>
<li><a href="../chapter-04/index.html">插入数据</a>

<ul>
<li><a href="../chapter-04/1.created.html">创建时间Created</a></li>
</ul></li>
<li><a href="../chapter-05/index.html">查询和统计数据</a>

<ul>
<li><a href="../chapter-05/1.conditions.html">查询条件方法</a></li>
<li><a href="../chapter-05/2.overrides.html">临时开关方法</a></li>
<li><a href="../chapter-05/3.get.html">Get方法</a></li>
<li><a href="../chapter-05/10.exist.html">Exist方法</a></li>
<li><a href="../chapter-05/4.find.html">Find方法</a></li>
<li><a href="../chapter-05/5.join.html">Join的使用</a></li>
<li><a href="../chapter-05/6.iterate.html">Iterate方法</a></li>
<li><a href="../chapter-05/7.count.html">Count方法</a></li>
<li><a href="../chapter-05/8.rows.html">Rows方法</a></li>
<li><a href="../chapter-05/9.sums.html">Sum系列方法</a></li>
</ul></li>
<li><a href="../chapter-06/index.html">更新数据</a>

<ul>
<li><a href="../chapter-06/1.lock.html">乐观锁Version</a></li>
<li><a href="../chapter-06/2.updated.html">更新时间Updated</a></li>
</ul></li>
<li><a href="../chapter-07/index.html">删除数据</a>

<ul>
<li><a href="../chapter-07/1.deleted.html">软删除Deleted</a></li>
</ul></li>
<li><a href="../chapter-08/index.html">执行SQL查询</a></li>
<li><a href="../chapter-09/index.html">执行SQL命令</a></li>
<li><a href="../chapter-10/index.html">事务处理</a></li>
<li><a href="../chapter-11/index.html">缓存</a></li>
<li><a href="../chapter-12/index.html">事件</a></li>
<li><a href="../chapter-13/index.html">Reverse 工具</a></li>
<li><a href="../chapter-14/index.html">常见问题</a></li>
<li><a href="../chapter-15/index.html">案例</a></li>
</ul>

    </li>
        <li class="divider"></li>
        <li>
            <a href="http://gobook.io/" target="blank" class="gitbook-link">GoBook出品</a>
        </li>
        
    </ul>
</div>

    <div class="book-body">
        <div class="body-inner">
            <div class="book-header">
    
    <a href="#" class="btn pull-left toggle-summary" aria-label="Toggle summary"><i class="fa fa-align-justify"></i></a>
    <a href="#" class="btn pull-left toggle-search" aria-label="Toggle search"><i class="fa fa-search"></i></a>
    
    <div id="font-settings-wrapper" class="dropdown pull-left">
        <a href="#" class="btn toggle-dropdown" aria-label="Toggle font settings"><i class="fa fa-font"></i>
        </a>
        <div class="dropdown-menu font-settings">
            <div class="dropdown-caret">
                <span class="caret-outer"></span>
                <span class="caret-inner"></span>
            </div>

            <div class="buttons">
                <button type="button" id="reduce-font-size" class="button size-2">A</button>
                <button type="button" id="enlarge-font-size" class="button size-2">A</button>
            </div>

            <div class="buttons font-family-list">
                <button type="button" data-font="0" class="button">Serif</button>
                <button type="button" data-font="1" class="button">Sans</button>
            </div>

            <div class="buttons color-theme-list">
                <button type="button" id="color-theme-preview-0" class="button size-3" data-theme="0">White</button>
                <button type="button" id="color-theme-preview-1" class="button size-3" data-theme="1">Sepia</button>
                <button type="button" id="color-theme-preview-2" class="button size-3" data-theme="2">Night</button>
            </div>
        </div>
    </div>

    
    <div class="dropdown pull-right">
        <a href="#" class="btn toggle-dropdown" aria-label="Toggle share dropdown"><i class="fa fa-share-alt"></i>
        </a>
        <div class="dropdown-menu font-settings dropdown-left">
            <div class="dropdown-caret">
                <span class="caret-outer"></span>
                <span class="caret-inner"></span>
            </div>
        </div>
    </div>

    
    <h1>
        <i class="fa fa-circle-o-notch fa-spin"></i>
        <a href="./" ></a>
    </h1>
</div>

    <div class="page-wrapper" tabindex="-1">
        <div class="page-inner">
            <section class="normal" id="section-gitbook_2">
            <h1>常见问题</h1>

<ul>
<li>如何使用Like？</li>
</ul>

<p>答：</p>

<pre><code class="language-Go">engine.Where(&quot;column like ?&quot;, &quot;%&quot;+char+&quot;%&quot;).Find
</code></pre>

<ul>
<li>怎么同时使用xorm的tag和json的tag？</li>
</ul>

<p>答：使用空格</p>

<pre><code class="language-Go">type User struct {
    Name string `json:&quot;name&quot; xorm:&quot;name&quot;`
}
</code></pre>

<ul>
<li>我的struct里面包含bool类型，为什么它不能作为条件也没法用Update更新？</li>
</ul>

<p>答：默认bool类型因为无法判断是否为空，所以不会自动作为条件也不会作为Update的内容。可以使用UseBool函数，也可以使用Cols函数</p>

<pre><code class="language-Go">engine.Cols(&quot;bool_field&quot;).Update(&amp;Struct{BoolField:true})
// UPDATE struct SET bool_field = true
</code></pre>

<ul>
<li>我的struct里面包含float64和float32类型，为什么用他们作为查询条件总是不正确？</li>
</ul>

<p>答：默认float32和float64映射到数据库中为float,real,double这几种类型，这几种数据库类型数据库的实现一般都是非精确的。因此作为相等条件查询有可能不会返回正确的结果。如果一定要作为查询条件，请将数据库中的类型定义为Numeric或者Decimal。</p>

<pre><code class="language-Go">type Account struct {
    Money float64 `xorm:&quot;Numeric&quot;`
}
</code></pre>

<ul>
<li>为什么Update时Sqlite3返回的affected和其它数据库不一样？</li>
</ul>

<p>答：Sqlite3默认Update时返回的是update的查询条件的记录数条数，不管记录是否真的有更新。而Mysql和Postgres默认情况下都是只返回记录中有字段改变的记录数。</p>

<ul>
<li>xorm有几种命名映射规则？</li>
</ul>

<p>答：目前支持SnakeMapper, SameMapper和GonicMapper三种。SnakeMapper支持结构体和成员以驼峰式命名而数据库表和字段以下划线连接命名；SameMapper支持结构体和数据库的命名保持一致的映射。GonicMapper在SnakeMapper的基础上对一些特定名词，比如ID的映射会映射为id，而不是像SnakeMapper那样为i_d。</p>

<ul>
<li>xorm支持复合主键吗？</li>
</ul>

<p>答：支持。在定义时，如果有多个字段标记了pk，则这些字段自动成为复合主键，顺序为在struct中出现的顺序。在使用Id方法时，可以用<code>Id(xorm.PK{1, 2})</code>的方式来用。</p>

<ul>
<li>xorm如何使用Join？</li>
</ul>

<p>答：一般我们配合Join()和extends标记来进行，比如我们要对两个表进行Join操作，我们可以这样：</p>

<pre><code class="language-go">type Userinfo struct {
    Id int64
    Name string
    DetailId int64
}

type Userdetail struct {
    Id int64
    Gender int
}

type User struct {
    Userinfo `xorm:&quot;extends&quot;`
    Userdetail `xorm:&quot;extends&quot;`
}

var users = make([]User, 0)
err := engine.Table(&amp;Userinfo{}).Join(&quot;LEFT&quot;, &quot;userdetail&quot;, &quot;userinfo.detail_id = userdetail.id&quot;).Find(&amp;users)
</code></pre>

<p>请注意这里的Userinfo在User中的位置必须在Userdetail的前面，因为他在join语句中的顺序在userdetail前面。如果顺序不对，那么对于同名的列，有可能会赋值出错。</p>

<p>当然，如果Join语句比较复杂，我们也可以直接用Sql函数</p>

<pre><code class="language-go">err := engine.Sql(&quot;select * from userinfo, userdetail where userinfo.detail_id = userdetail.id&quot;).Find(&amp;users)
</code></pre>

<ul>
<li><p>如果有自动增长的字段，Insert如何写？
答：Insert时，如果需要自增字段填充为自动增长的数值，请保持自增字段为0；如果自增字段为非0，自增字段将会被作为普通字段插入。</p></li>

<li><p>如果设置数据库时区？
答：</p></li>
</ul>

<pre><code class="language-Go">location, err = time.LoadLocation(&quot;Asia/Shanghai&quot;)
engine.TZLocation = location
</code></pre>

            </section>
        </div>
    </div>
</div>

        

    </div>
</div>

<script src="../gitbook/app.js"></script>

    

    <script src="../gitbook/plugins/gitbook-plugin-mathjax/plugin.js"></script>



    </body>
</html>
