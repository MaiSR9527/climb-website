<!DOCTYPE HTML>
<html lang="en-US" >
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=11; IE=10; IE=9; IE=8; IE=7; IE=EDGE" />
        <title> | </title>
        <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
        <meta name="description" content="">
        <meta name="generator" content="GoBook 0.1">
        <meta name="HandheldFriendly" content="true"/>
        <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-status-bar-style" content="black">
        <link rel="apple-touch-icon-precomposed" sizes="152x152" href="gitbook/images/apple-touch-icon-precomposed-152.png">
        
    
</head>
<body>

<link rel="stylesheet" href="../gitbook/style.css">

<div class="book" data-level="0" data-basepath="." data-revision="1419950039633">

<div class="book-summary">
    <div class="book-search">
        <input type="text" placeholder="Type to search" class="form-control" />
    </div>
    <ul class="summary">
        <li>
            <a href="../" target="blank" class="custom-link">返回书本首页</a>
        </li>
        <li class="divider"></li>
        <li>
        <ul>
<li><a href="../chapter-01/index.html">创建Orm引擎</a>

<ul>
<li><a href="../chapter-01/1.engine.html">单库引擎</a></li>
<li><a href="../chapter-01/2.engine_group.html">引擎组</a></li>
<li><a href="../chapter-01/3.policy.html">引擎组策略</a></li>
</ul></li>
<li><a href="../chapter-02/index.html">定义表结构体</a>

<ul>
<li><a href="../chapter-02/1.mapping.html">名称映射规则</a></li>
<li><a href="../chapter-02/2.prefix.html">前缀映射，后缀映射和缓存映射</a></li>
<li><a href="../chapter-02/3.tags.html">使用Table和Tag改变名称映射</a></li>
<li><a href="../chapter-02/4.columns.html">Column属性定义</a></li>
<li><a href="../chapter-02/5.types.html">Go与字段类型对应表</a></li>
</ul></li>
<li><a href="../chapter-03/index.html">表结构操作</a>

<ul>
<li><a href="../chapter-03/1.metas.html">获取数据库信息</a></li>
<li><a href="../chapter-03/2.tables.html">表操作</a></li>
<li><a href="../chapter-03/3.indexes.html">创建索引和唯一索引</a></li>
<li><a href="../chapter-03/4.sync.html">同步数据库结构</a></li>
<li><a href="../chapter-03/5.dumpimport.html">导出导入SQL脚本</a></li>
</ul></li>
<li><a href="../chapter-04/index.html">插入数据</a>

<ul>
<li><a href="../chapter-04/1.created.html">创建时间Created</a></li>
</ul></li>
<li><a href="../chapter-05/index.html">查询和统计数据</a>

<ul>
<li><a href="../chapter-05/1.conditions.html">查询条件方法</a></li>
<li><a href="../chapter-05/2.overrides.html">临时开关方法</a></li>
<li><a href="../chapter-05/3.get.html">Get方法</a></li>
<li><a href="../chapter-05/10.exist.html">Exist方法</a></li>
<li><a href="../chapter-05/4.find.html">Find方法</a></li>
<li><a href="../chapter-05/5.join.html">Join的使用</a></li>
<li><a href="../chapter-05/6.iterate.html">Iterate方法</a></li>
<li><a href="../chapter-05/7.count.html">Count方法</a></li>
<li><a href="../chapter-05/8.rows.html">Rows方法</a></li>
<li><a href="../chapter-05/9.sums.html">Sum系列方法</a></li>
</ul></li>
<li><a href="../chapter-06/index.html">更新数据</a>

<ul>
<li><a href="../chapter-06/1.lock.html">乐观锁Version</a></li>
<li><a href="../chapter-06/2.updated.html">更新时间Updated</a></li>
</ul></li>
<li><a href="../chapter-07/index.html">删除数据</a>

<ul>
<li><a href="../chapter-07/1.deleted.html">软删除Deleted</a></li>
</ul></li>
<li><a href="../chapter-08/index.html">执行SQL查询</a></li>
<li><a href="../chapter-09/index.html">执行SQL命令</a></li>
<li><a href="../chapter-10/index.html">事务处理</a></li>
<li><a href="../chapter-11/index.html">缓存</a></li>
<li><a href="../chapter-12/index.html">事件</a></li>
<li><a href="../chapter-13/index.html">Reverse 工具</a></li>
<li><a href="../chapter-14/index.html">常见问题</a></li>
<li><a href="../chapter-15/index.html">案例</a></li>
</ul>

    </li>
        <li class="divider"></li>
        <li>
            <a href="http://gobook.io/" target="blank" class="gitbook-link">GoBook出品</a>
        </li>
        
    </ul>
</div>

    <div class="book-body">
        <div class="body-inner">
            <div class="book-header">
    
    <a href="#" class="btn pull-left toggle-summary" aria-label="Toggle summary"><i class="fa fa-align-justify"></i></a>
    <a href="#" class="btn pull-left toggle-search" aria-label="Toggle search"><i class="fa fa-search"></i></a>
    
    <div id="font-settings-wrapper" class="dropdown pull-left">
        <a href="#" class="btn toggle-dropdown" aria-label="Toggle font settings"><i class="fa fa-font"></i>
        </a>
        <div class="dropdown-menu font-settings">
            <div class="dropdown-caret">
                <span class="caret-outer"></span>
                <span class="caret-inner"></span>
            </div>

            <div class="buttons">
                <button type="button" id="reduce-font-size" class="button size-2">A</button>
                <button type="button" id="enlarge-font-size" class="button size-2">A</button>
            </div>

            <div class="buttons font-family-list">
                <button type="button" data-font="0" class="button">Serif</button>
                <button type="button" data-font="1" class="button">Sans</button>
            </div>

            <div class="buttons color-theme-list">
                <button type="button" id="color-theme-preview-0" class="button size-3" data-theme="0">White</button>
                <button type="button" id="color-theme-preview-1" class="button size-3" data-theme="1">Sepia</button>
                <button type="button" id="color-theme-preview-2" class="button size-3" data-theme="2">Night</button>
            </div>
        </div>
    </div>

    
    <div class="dropdown pull-right">
        <a href="#" class="btn toggle-dropdown" aria-label="Toggle share dropdown"><i class="fa fa-share-alt"></i>
        </a>
        <div class="dropdown-menu font-settings dropdown-left">
            <div class="dropdown-caret">
                <span class="caret-outer"></span>
                <span class="caret-inner"></span>
            </div>
        </div>
    </div>

    
    <h1>
        <i class="fa fa-circle-o-notch fa-spin"></i>
        <a href="./" ></a>
    </h1>
</div>

    <div class="page-wrapper" tabindex="-1">
        <div class="page-inner">
            <section class="normal" id="section-gitbook_2">
            <h3>Join的使用</h3>

<ul>
<li>Join(string,interface{},string)</li>
</ul>

<p>第一个参数为连接类型，当前支持INNER, LEFT OUTER, CROSS中的一个值，
第二个参数为string类型的表名，表对应的结构体指针或者为两个值的[]string，表示表名和别名，
第三个参数为连接条件。</p>

<p>以下将通过示例来讲解具体的用法：</p>

<p>假如我们拥有两个表user和group，每个User只在一个Group中，那么我们可以定义对应的struct</p>

<pre><code class="language-Go">type Group struct {
	Id int64
	Name string
}
</code></pre>

<pre><code class="language-Go">type User struct {
	Id int64
	Name string
	GroupId int64 `xorm:&quot;index&quot;`
}
</code></pre>

<p>OK。问题来了，我们现在需要列出所有的User，并且列出对应的GroupName。利用extends和Join我们可以比较优雅的解决这个问题。代码如下：</p>

<pre><code class="language-Go">type UserGroup struct {
    User `xorm:&quot;extends&quot;`
    Name string
}

func (UserGroup) TableName() string {
	return &quot;user&quot;
}

users := make([]UserGroup, 0)
engine.Join(&quot;INNER&quot;, &quot;group&quot;, &quot;group.id = user.group_id&quot;).Find(&amp;users)
</code></pre>

<p>这里我们将User这个匿名结构体加了xorm的extends标记（实际上也可以是非匿名的结构体，只要有extends标记即可），这样就减少了重复代码的书写。实际上这里我们直接用Sql函数也是可以的，并不一定非要用Join。</p>

<pre><code class="language-Go">users := make([]UserGroup, 0)
engine.Sql(&quot;select user.*, group.name from user, group where user.group_id = group.id&quot;).Find(&amp;users)
</code></pre>

<p>然后，我们忽然发现，我们还需要显示Group的Id，因为我们需要链接到Group页面。这样又要加一个字段，算了，不如我们把Group也加个extends标记吧，代码如下：</p>

<pre><code class="language-Go">type UserGroup struct {
    User `xorm:&quot;extends&quot;`
    Group `xorm:&quot;extends&quot;`
}

func (UserGroup) TableName() string {
	return &quot;user&quot;
}

users := make([]UserGroup, 0)
engine.Join(&quot;INNER&quot;, &quot;group&quot;, &quot;group.id = user.group_id&quot;).Find(&amp;users)
</code></pre>

<p>这次，我们把两个表的所有字段都查询出来了，并且赋值到对应的结构体上了。</p>

<p>这里要注意，User和Group分别有Id和Name，这个是重名的，但是xorm是可以区分开来的，不过需要特别注意UserGroup中User和Group的顺序，如果顺序反了，则有可能会赋值错误，但是程序不会报错。</p>

<p>这里的顺序应遵循如下原则：</p>

<pre><code>结构体中extends标记对应的结构顺序应和最终生成SQL中对应的表出现的顺序相同。
</code></pre>

<p>还有一点需要注意的，如果在模板中使用这个UserGroup结构体，对于字段名重复的必须加匿名引用，如：</p>

<p>对于不重复字段，可以<code>{{.GroupId}}</code>，对于重复字段<code>{{.User.Id}}</code>和<code>{{.Group.Id}}</code></p>

<p>这是2个表的用法，3个或更多表用法类似，如：</p>

<pre><code class="language-Go">type Type struct {
	Id int64
	Name string
}

type UserGroupType struct {
    User `xorm:&quot;extends&quot;`
    Group `xorm:&quot;extends&quot;`
    Type `xorm:&quot;extends&quot;`
}

users := make([]UserGroupType, 0)
engine.Table(&quot;user&quot;).Join(&quot;INNER&quot;, &quot;group&quot;, &quot;group.id = user.group_id&quot;).
	Join(&quot;INNER&quot;, &quot;type&quot;, &quot;type.id = user.type_id&quot;).
	Find(&amp;users)
</code></pre>

<p>同时，在使用Join时，也可同时使用Where和Find的第二个参数作为条件，Find的第二个参数同时也允许为各种bean来作为条件。Where里可以是各个表的条件，Find的第二个参数只是被关联表的条件。</p>

<pre><code class="language-Go">engine.Table(&quot;user&quot;).Join(&quot;INNER&quot;, &quot;group&quot;, &quot;group.id = user.group_id&quot;).
	Join(&quot;INNER&quot;, &quot;type&quot;, &quot;type.id = user.type_id&quot;).
	Where(&quot;user.name like ?&quot;, &quot;%&quot;+name+&quot;%&quot;).Find(&amp;users, &amp;User{Name:name})
</code></pre>

<p>当然，如果表名字太长，我们可以使用别名：</p>

<pre><code class="language-Go">engine.Table(&quot;user&quot;).Alias(&quot;u&quot;).
	Join(&quot;INNER&quot;, []string{&quot;group&quot;, &quot;g&quot;}, &quot;g.id = u.group_id&quot;).
	Join(&quot;INNER&quot;, &quot;type&quot;, &quot;type.id = u.type_id&quot;).
	Where(&quot;u.name like ?&quot;, &quot;%&quot;+name+&quot;%&quot;).Find(&amp;users, &amp;User{Name:name})
</code></pre>

            </section>
        </div>
    </div>
</div>

        

    </div>
</div>

<script src="../gitbook/app.js"></script>

    

    <script src="../gitbook/plugins/gitbook-plugin-mathjax/plugin.js"></script>



    </body>
</html>
