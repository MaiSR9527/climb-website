<!DOCTYPE html><html lang="zh-CN"><head>
<meta charset="UTF-8">
<!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge"><![endif]-->
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 1.5.3">
<title>Spring Cloud Netflix 中文文档 参考手册 中文版</title>
<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<style>article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}audio,canvas,video{display:inline-block}audio:not([controls]){display:none;height:0}[hidden],template{display:none}script{display:none!important}html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}a{background:transparent}a:focus{outline:thin dotted}a:active,a:hover{outline:0}h1{font-size:2em;margin:.67em 0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}dfn{font-style:italic}hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}mark{background:#ff0;color:#000}code,kbd,pre,samp{font-family:monospace;font-size:1em}pre{white-space:pre-wrap}q{quotes:"\201C" "\201D" "\2018" "\2019"}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:0}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}button,input{line-height:normal}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="search"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}textarea{overflow:auto;vertical-align:top}table{border-collapse:collapse;border-spacing:0}*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}html,body{font-size:100%}body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}a:hover{cursor:pointer}img,object,embed{max-width:100%;height:auto}object,embed{height:100%}img{-ms-interpolation-mode:bicubic}.left{float:left!important}.right{float:right!important}.text-left{text-align:left!important}.text-right{text-align:right!important}.text-center{text-align:center!important}.text-justify{text-align:justify!important}.hide{display:none}body{-webkit-font-smoothing:antialiased}img,object,svg{display:inline-block;vertical-align:middle}textarea{height:auto;min-height:50px}select{width:100%}.center{margin-left:auto;margin-right:auto}.spread{width:100%}p.lead,.paragraph.lead>p,#preamble>.sectionbody>.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}a{color:#2156a5;text-decoration:underline;line-height:inherit}a:hover,a:focus{color:#1d4b8f}a img{border:none}p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}p aside{font-size:.875em;line-height:1.35;font-style:italic}h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}h1{font-size:2.125em}h2{font-size:1.6875em}h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}h4,h5{font-size:1.125em}h6{font-size:1em}hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}em,i{font-style:italic;line-height:inherit}strong,b{font-weight:bold;line-height:inherit}small{font-size:60%;line-height:inherit}code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}ul.square{list-style-type:square}ul.circle{list-style-type:circle}ul.disc{list-style-type:disc}ul.no-bullet{list-style:none}ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}dl dt{margin-bottom:.3125em;font-weight:bold}dl dd{margin-bottom:1.25em}abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}abbr{text-transform:none}blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}blockquote cite:before{content:"\2014 \0020"}blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}h1{font-size:2.75em}h2{font-size:2.3125em}h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}h4{font-size:1.4375em}}table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}table thead,table tfoot{background:#f7f8f7;font-weight:bold}table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}body{tab-size:4}h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}.clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:" ";display:table}.clearfix:after,.float-group:after{clear:both}*:not(pre)>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}pre,pre>code{line-height:1.45;color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;text-rendering:optimizeSpeed}.keyseq{color:rgba(51,51,51,.8)}kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}.keyseq kbd:first-child{margin-left:0}.keyseq kbd:last-child{margin-right:0}.menuseq,.menu{color:rgba(0,0,0,.8)}b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}b.button:before{content:"[";padding:0 3px 0 2px}b.button:after{content:"]";padding:0 2px 0 3px}p a>code:hover{color:rgba(0,0,0,.9)}#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:" ";display:table}#header:after,#content:after,#footnotes:after,#footer:after{clear:both}#content{margin-top:1.25em}#content:before{content:none}#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}#header>h1:only-child,body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}#header .details span:first-child{margin-left:-.125em}#header .details span.email a{color:rgba(0,0,0,.85)}#header .details br{display:none}#header .details br+span:before{content:"\00a0\2013\00a0"}#header .details br+span.author:before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}#header .details br+span#revremark:before{content:"\00a0|\00a0"}#header #revnumber{text-transform:capitalize}#header #revnumber:after{content:"\00a0"}#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}#toc>ul{margin-left:.125em}#toc ul.sectlevel0>li>a{font-style:italic}#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}#toc li{line-height:1.3334;margin-top:.3334em}#toc a{text-decoration:none}#toc a:active{text-decoration:underline}#toctitle{color:#7a2518;font-size:1.2em}@media only screen and (min-width:768px){#toctitle{font-size:1.375em}body.toc2{padding-left:15em;padding-right:0}#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}#toc.toc2>ul{font-size:.9em;margin-bottom:0}#toc.toc2 ul ul{margin-left:0;padding-left:1em}#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}body.toc2.toc-right{padding-left:0;padding-right:15em}body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}#toc.toc2{width:20em}#toc.toc2 #toctitle{font-size:1.375em}#toc.toc2>ul{font-size:.95em}#toc.toc2 ul ul{padding-left:1.25em}body.toc2.toc-right{padding-left:0;padding-right:20em}}#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}#content #toc>:first-child{margin-top:0}#content #toc>:last-child{margin-bottom:0}#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}#footer-text{color:rgba(255,255,255,.8);line-height:1.44}.sect1{padding-bottom:.625em}@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}.sect1+.sect1{border-top:1px solid #efefed}#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}#content h1>a.anchor:before,h2>a.anchor:before,h3>a.anchor:before,#toctitle>a.anchor:before,.sidebarblock>.content>.title>a.anchor:before,h4>a.anchor:before,h5>a.anchor:before,h6>a.anchor:before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}table.tableblock>caption.title{white-space:nowrap;overflow:visible;max-width:0}.paragraph.lead>p,#preamble>.sectionbody>.paragraph:first-of-type p{color:rgba(0,0,0,.85)}table.tableblock #preamble>.sectionbody>.paragraph:first-of-type p{font-size:inherit}.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}.admonitionblock>table td.icon{text-align:center;width:80px}.admonitionblock>table td.icon img{max-width:none}.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}.exampleblock>.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}.exampleblock>.content>:first-child{margin-top:0}.exampleblock>.content>:last-child{margin-bottom:0}.sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}.sidebarblock>:first-child{margin-top:0}.sidebarblock>:last-child{margin-bottom:0}.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}.literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class="highlight"],.listingblock pre[class^="highlight "],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}.sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class="highlight"],.sidebarblock .listingblock pre[class^="highlight "],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}.literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}.literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}.listingblock pre.highlightjs{padding:0}.listingblock pre.highlightjs>code{padding:1em;-webkit-border-radius:4px;border-radius:4px}.listingblock pre.prettyprint{border-width:0}.listingblock>.content{position:relative}.listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}.listingblock:hover code[data-lang]:before{display:block}.listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}.listingblock.terminal pre .command:not([data-prompt]):before{content:"$"}table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}table.pyhltable td.code{padding-left:.75em;padding-right:0}pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}pre.pygments .lineno{display:inline-block;margin-right:.25em}table.pyhltable .linenodiv{background:none!important;padding-right:0!important}.quoteblock{margin:0 1em 1.25em 1.5em;display:table}.quoteblock>.title{margin-left:-1.5em;margin-bottom:.75em}.quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}.quoteblock blockquote{margin:0;padding:0;border:0}.quoteblock blockquote:before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}.quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}.quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}.quoteblock .quoteblock blockquote{padding:0 0 0 .75em}.quoteblock .quoteblock blockquote:before{display:none}.verseblock{margin:0 1em 1.25em 1em}.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}.verseblock pre strong{font-weight:400}.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}.quoteblock .attribution br,.verseblock .attribution br{display:none}.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}.quoteblock.abstract{margin:0 0 1.25em 0;display:block}.quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}.quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}table.tableblock{max-width:100%;border-collapse:separate}table.tableblock td>.paragraph:last-child p>p:last-child,table.tableblock th>p:last-child,table.tableblock td>p:last-child{margin-bottom:0}table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}table.grid-all tfoot>tr>th.tableblock,table.grid-all tfoot>tr>td.tableblock{border-width:1px 1px 0 0}table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}table.grid-all *>tr>.tableblock:last-child,table.grid-cols *>tr>.tableblock:last-child{border-right-width:0}table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}table.grid-all tbody>tr:last-child>th.tableblock,table.grid-all tbody>tr:last-child>td.tableblock,table.grid-all thead:last-child>tr>th.tableblock,table.grid-rows tbody>tr:last-child>th.tableblock,table.grid-rows tbody>tr:last-child>td.tableblock,table.grid-rows thead:last-child>tr>th.tableblock{border-bottom-width:0}table.grid-rows tfoot>tr>th.tableblock,table.grid-rows tfoot>tr>td.tableblock{border-width:1px 0 0 0}table.frame-all{border-width:1px}table.frame-sides{border-width:0 1px}table.frame-topbot{border-width:1px 0}th.halign-left,td.halign-left{text-align:left}th.halign-right,td.halign-right{text-align:right}th.halign-center,td.halign-center{text-align:center}th.valign-top,td.valign-top{vertical-align:top}th.valign-bottom,td.valign-bottom{vertical-align:bottom}th.valign-middle,td.valign-middle{vertical-align:middle}table thead th,table tfoot th{font-weight:bold}tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}p.tableblock>code:only-child{background:none;padding:0}p.tableblock{font-size:1em}td>div.verse{white-space:pre}ol{margin-left:1.75em}ul li ol{margin-left:1.5em}dl dd{margin-left:1.125em}dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}ol>li p,ul>li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}ul.checklist li>p:first-child>.fa-square-o:first-child,ul.checklist li>p:first-child>.fa-check-square-o:first-child{width:1em;font-size:.85em}ul.checklist li>p:first-child>input[type="checkbox"]:first-child{width:1em;position:relative;top:1px}ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}ul.inline>li{list-style:none;float:left;margin-left:1.375em;display:block}ul.inline>li>*{display:block}.unstyled dl dt{font-weight:400;font-style:normal}ol.arabic{list-style-type:decimal}ol.decimal{list-style-type:decimal-leading-zero}ol.loweralpha{list-style-type:lower-alpha}ol.upperalpha{list-style-type:upper-alpha}ol.lowerroman{list-style-type:lower-roman}ol.upperroman{list-style-type:upper-roman}ol.lowergreek{list-style-type:lower-greek}.hdlist>table,.colist>table{border:0;background:none}.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}td.hdlist1{font-weight:bold;padding-bottom:1.25em}.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}.colist>table tr>td:first-of-type{padding:0 .75em;line-height:1}.colist>table tr>td:last-of-type{padding:.25em 0}.thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}.imageblock.left,.imageblock[style*="float: left"]{margin:.25em .625em 1.25em 0}.imageblock.right,.imageblock[style*="float: right"]{margin:.25em 0 1.25em .625em}.imageblock>.title{margin-bottom:0}.imageblock.thumb,.imageblock.th{border-width:6px}.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}.image.left{margin-right:.625em}.image.right{margin-left:.625em}a.image{text-decoration:none;display:inline-block}a.image object{pointer-events:none}sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}sup.footnote a,sup.footnoteref a{text-decoration:none}sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}#footnotes .footnote:last-of-type{margin-bottom:0}#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}.gist .file-data>table{border:0;background:#fff;width:100%;margin-bottom:0}.gist .file-data>table td.line-data{width:99%}div.unbreakable{page-break-inside:avoid}.big{font-size:larger}.small{font-size:smaller}.underline{text-decoration:underline}.overline{text-decoration:overline}.line-through{text-decoration:line-through}.aqua{color:#00bfbf}.aqua-background{background-color:#00fafa}.black{color:#000}.black-background{background-color:#000}.blue{color:#0000bf}.blue-background{background-color:#0000fa}.fuchsia{color:#bf00bf}.fuchsia-background{background-color:#fa00fa}.gray{color:#606060}.gray-background{background-color:#7d7d7d}.green{color:#006000}.green-background{background-color:#007d00}.lime{color:#00bf00}.lime-background{background-color:#00fa00}.maroon{color:#600000}.maroon-background{background-color:#7d0000}.navy{color:#000060}.navy-background{background-color:#00007d}.olive{color:#606000}.olive-background{background-color:#7d7d00}.purple{color:#600060}.purple-background{background-color:#7d007d}.red{color:#bf0000}.red-background{background-color:#fa0000}.silver{color:#909090}.silver-background{background-color:#bcbcbc}.teal{color:#006060}.teal-background{background-color:#007d7d}.white{color:#bfbfbf}.white-background{background-color:#fafafa}.yellow{color:#bfbf00}.yellow-background{background-color:#fafa00}span.icon>.fa{cursor:default}.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}.admonitionblock td.icon .icon-note:before{content:"\f05a";color:#19407c}.admonitionblock td.icon .icon-tip:before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}.admonitionblock td.icon .icon-warning:before{content:"\f071";color:#bf6900}.admonitionblock td.icon .icon-caution:before{content:"\f06d";color:#bf3400}.admonitionblock td.icon .icon-important:before{content:"\f06a";color:#bf0000}.conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}.conum[data-value] *{color:#fff!important}.conum[data-value]+b{display:none}.conum[data-value]:after{content:attr(data-value)}pre .conum[data-value]{position:relative;top:-.125em}b.conum *{color:inherit!important}.conum:not([data-value]):empty{display:none}dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}h1,h2,p,td.content,span.alt{letter-spacing:-.01em}p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}p{margin-bottom:1.25rem}.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}.exampleblock>.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}.print-only{display:none!important}@media print{@page{margin:1.25cm .75cm}*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}a{color:inherit!important;text-decoration:underline!important}a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}a[href^="http:"]:not(.bare):after,a[href^="https:"]:not(.bare):after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}abbr[title]:after{content:" (" attr(title) ")"}pre,blockquote,tr,img,object,svg{page-break-inside:avoid}thead{display:table-header-group}svg{max-width:100%}p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}#toc,.sidebarblock,.exampleblock>.content{background:none!important}#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}.sect1{padding-bottom:0!important}.sect1+.sect1{border:0!important}#header>h1:first-child{margin-top:1.25rem}body.book #header{text-align:center}body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em 0}body.book #header .details{border:0!important;display:block;padding:0!important}body.book #header .details span:first-child{margin-left:0!important}body.book #header .details br{display:block}body.book #header .details br+span:before{content:none!important}body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}.listingblock code[data-lang]:before{display:block}#footer{background:none!important;padding:0 .9375em}#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}.hide-on-print{display:none!important}.print-only{display:block!important}.hide-for-print{display:none!important}.show-for-print{display:inherit!important}}</style>
<link type="text/css" rel="stylesheet" charset="UTF-8" href="css/springcloud.min.css"><script type="text/javascript" charset="UTF-8" src="js/springcloud.min.js"></script></head>
<body class="article">
<div id="header">
<h1><font o="1">Spring Cloud Netflix</font></h1>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p><strong><font o="2">1.3.0.RELEASE</font></strong></p>
</div>
<div class="paragraph">
<p><font o="3" class="">该项目通过自动配置和绑定到Spring环境和其他Spring编程模型的习惯方式来为Spring Boot应用程序提供Netflix OSS集成。</font><font o="4">通过几个简单的注释，您可以快速启用和配置应用程序中的常见模式，并通过经过测试的Netflix组件构建大型分布式系统。</font><font o="5">提供的模式包括服务发现（Eureka），断路器（Hystrix），智能路由（Zuul）和客户端负载平衡（Ribbon）。</font></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_service_discovery_eureka_clients"><font o="6">服务发现：Eureka客户端</font></h2>
<div class="sectionbody">
<div class="paragraph">
<p><font o="7">服务发现是基于微服务架构的关键原则之一。</font><font o="8">尝试配置每个客户端或某种形式的约定可能非常困难，可以非常脆弱。</font><font o="9">Netflix服务发现服务器和客户端是Eureka。</font><font o="10">可以将服务器配置和部署为高可用性，每个服务器将注册服务的状态复制到其他服务器。</font></p>
</div>
<div class="sect2">
<h3 id="netflix-eureka-client-starter"><font o="11">如何包含Eureka客户端</font></h3>
<div class="paragraph">
<p><font o="12">要在您的项目中包含Eureka客户端，使用组<code i="20">org.springframework.cloud</code>和工件id <code i="21">spring-cloud-starter-eureka</code>的启动器。</font><font o="13">有关</font><font o="13">
使用当前的Spring Cloud发布列表设置构建系统的详细信息，</font><font o="13">请参阅</font><a href="https://projects.spring.io/spring-cloud/"><font o="13">Spring Cloud项目页面</font></a><font o="13">。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_registering_with_eureka"><font o="14">注册Eureka</font></h3>
<div class="paragraph">
<p><font o="15">当客户端注册Eureka时，它提供有关自身的元数据，例如主机和端口，运行状况指示符URL，主页等。Eureka从属于服务的每个实例接收心跳消息。</font><font o="16">如果心跳失败超过可配置的时间表，则通常将该实例从注册表中删除。</font></p>
</div>
<div class="paragraph">
<p><font o="17">示例eureka客户端：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@Configuration
@ComponentScan
@EnableAutoConfiguration
@EnableEurekaClient
@RestController
public class Application {

    @RequestMapping("/")
    public String home() {
        return "Hello world";
    }

    public static void main(String[] args) {
        new SpringApplicationBuilder(Application.class).web(true).run(args);
    }

}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="18">（即完全正常的Spring Boot应用程序）。</font><font o="19">在这个例子中，我们明确地使用<code i="22">@EnableEurekaClient</code>，但只有Eureka可用，你也可以使用<code i="23">@EnableDiscoveryClient</code>。</font><font o="20">需要配置才能找到Eureka服务器。</font><font o="21">例：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="22">application.yml</font></div>
<div class="content">
<pre class="notranslate">eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/</pre>
</div>
</div>
<div class="paragraph">
<p><font o="23">其中“defaultZone”是一个魔术字符串后备值，为任何不表示首选项的客户端提供服务URL（即它是有用的默认值）。</font></p>
</div>
<div class="paragraph">
<p><font o="24">从<code i="24">Environment</code>获取的默认应用程序名称（服务ID），虚拟主机和非安全端口分别为<code i="25">${spring.application.name}</code>，<code i="26">${spring.application.name}</code>和<code i="27">${server.port}</code>。</font></p>
</div>
<div class="paragraph">
<p><font o="25"><code i="28">@EnableEurekaClient</code>使应用程序成为Eureka“实例”（即注册自身）和“客户端”（即它可以查询注册表以查找其他服务）。</font><font o="26">实例行为由<code i="29">eureka.instance.*</code>配置键驱动，但如果您确保您的应用程序具有<code i="30">spring.application.name</code>（这是Eureka服务标识或VIP的默认值），那么默认值将会很好。</font></p>
</div>
<div class="paragraph">
<p><font o="27">有关可</font><a href="https://github.com/spring-cloud/spring-cloud-netflix/tree/master/spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaInstanceConfigBean.java"><font o="27">配置</font></a><font></font><a href="https://github.com/spring-cloud/spring-cloud-netflix/tree/master/spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaClientConfigBean.java"><font o="27">选项</font></a><font o="27">的更多详细信息，</font><font o="27">请参阅</font><a href="https://github.com/spring-cloud/spring-cloud-netflix/tree/master/spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaInstanceConfigBean.java"><font o="27">EurekaInstanceConfigBean</font></a><font o="27">和</font><a href="https://github.com/spring-cloud/spring-cloud-netflix/tree/master/spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaClientConfigBean.java"><font o="27">EurekaClientConfigBean</font></a><font o="27">。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_authenticating_with_the_eureka_server"><font o="28">使用Eureka服务器进行身份验证</font></h3>
<div class="paragraph">
<p><font o="29">如果其中一个<code i="31">eureka.client.serviceUrl.defaultZone</code> URL中包含一个凭据（如<code i="32"><a href="http://user:password@localhost:8761/eureka" class="bare">http://user:<span class="__cf_email__" data-cfemail="bcccddcfcfcbd3ced8fcd0d3dfddd0d4d3cfc8">[email&#160;protected]</span>:8761/eureka</a></code>）），HTTP基本身份验证将自动添加到您的eureka客户端。</font><font o="30">对于更复杂的需求，您可以创建<code i="33">@Bean</code>类型<code i="34">DiscoveryClientOptionalArgs</code>并注入<code i="35">ClientFilter</code>实例，所有这些都将应用于从客户端到服务器的调用。</font></p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="31">注意</font></div>
</td>
<td class="content"><font o="32">
由于Eureka中的限制，不可能支持每个服务器的基本身份验证凭据，因此只能使用第一个找到的集合。
</font></td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_status_page_and_health_indicator"><font o="33">状态页和健康指标</font></h3>
<div class="paragraph">
<p><font o="34">Eureka实例的状态页面和运行状况指示器分别默认为“/ info”和“/ health”，它们是Spring Boot Actuator应用程序中有用端点的默认位置。</font><font o="35">如果您使用非默认上下文路径或servlet路径（例如<code i="36">server.servletPath=/foo</code>）或管理端点路径（例如<code i="37">management.contextPath=/admin</code>）），则需要更改这些，即使是执行器应用程序。</font><font o="36">例：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="37">application.yml</font></div>
<div class="content">
<pre class="notranslate">eureka:
  instance:
    statusPageUrlPath: ${management.context-path}/info
    healthCheckUrlPath: ${management.context-path}/health</pre>
</div>
</div>
<div class="paragraph">
<p><font o="38">这些链接显示在客户端使用的元数据中，并在某些情况下用于决定是否将请求发送到应用程序，因此如果它们是准确的，这是有帮助的。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_registering_a_secure_application"><font o="39">注册安全应用程序</font></h3>
<div class="paragraph">
<p><font o="40">如果您的应用程序想通过HTTPS联系，则可以分别在<code i="38">EurekaInstanceConfig</code>，</font><em><font o="40">即</font></em><font o="40"> 
<code i="39">eureka.instance.[nonSecurePortEnabled,securePortEnabled]=[false,true]</code> </font><font o="40">中设置两个标志</font><font o="40">。</font><font o="41">这将使Eureka发布实例信息显示安全通信的显式偏好。</font><font o="42">Spring Cloud <code i="40">DiscoveryClient</code>将始终为这样配置的服务返回<code i="41"><a href="https://…​" class="bare">https://…​</a>;</code> URI，并且Eureka（本机）实例信息将具有安全的健康检查URL。</font></p>
</div>
<div class="paragraph">
<p><font o="43">由于Eureka在内部工作，它仍然会发布状态和主页的非安全网址，除非您也明确地覆盖。</font><font o="44">您可以使用占位符来配置eureka实例URL，例如</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="45">application.yml</font></div>
<div class="content">
<pre class="notranslate">eureka:
  instance:
    statusPageUrl: https://${eureka.hostname}/info
    healthCheckUrl: https://${eureka.hostname}/health
    homePageUrl: https://${eureka.hostname}/</pre>
</div>
</div>
<div class="paragraph">
<p><font o="46">（请注意，<code i="42">${eureka.hostname}</code>只是在Eureka的更高版本中可用的本地占位符，您也可以使用Spring占位符实现同样的功能，例如使用<code i="43">${eureka.instance.hostName}</code>。）</font></p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="47">注意</font></div>
</td>
<td class="content"><font o="48">
如果您的应用程序在代理服务器后面运行，并且SSL终止服务在代理中（例如，如果您运行在Cloud Foundry或其他平台作为服务），则需要确保代理“转发”头部被截取并处理应用程序。</font><font o="49">Spring Boot应用程序中的嵌入式Tomcat容器会自动执行“X-Forwarded  -  \ *”头的显式配置。</font><font o="50">你这个错误的一个迹象就是你的应用程序本身所呈现的链接是错误的（错误的主机，端口或协议）。
</font></td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_eureka_s_health_checks"><font o="51">Eureka的健康检查</font></h3>
<div class="paragraph">
<p><font o="52">默认情况下，Eureka使用客户端心跳来确定客户端是否已启动。</font><font o="53">除非另有规定，否则Discovery Client将不会根据Spring Boot Actuator传播应用程序的当前运行状况检查状态。</font><font o="54">这意味着成功注册后Eureka将永远宣布申请处于“UP”状态。</font><font o="55">可以通过启用Eureka运行状况检查来改变此行为，从而将应用程序状态传播到Eureka。</font><font o="56">因此，每个其他应用程序将不会在“UP”之外的状态下将流量发送到应用程序。</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="57">application.yml</font></div>
<div class="content">
<pre class="notranslate">eureka:
  client:
    healthcheck:
      enabled: true</pre>
</div>
</div>
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="58">警告</font></div>
</td>
<td class="content"><font o="59">
<code i="44">eureka.client.healthcheck.enabled=true</code>只能在<code i="45">application.yml</code>中设置。</font><font o="60">设置<code i="46">bootstrap.yml</code>中的值将导致不良副作用，例如在eureka中注册<code i="47">UNKNOWN</code>状态。
</font></td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><font o="61">如果您需要更多的控制健康检查，您可以考虑实施自己的<code i="48">com.netflix.appinfo.HealthCheckHandler</code>。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_eureka_metadata_for_instances_and_clients"><font o="62">Eureka实例和客户端的元数据</font></h3>
<div class="paragraph">
<p><font o="63">值得花点时间了解Eureka元数据的工作原理，以便您可以在平台上使用它。</font><font o="64">有主机名，IP地址，端口号，状态页和运行状况检查等标准元数据。</font><font o="65">这些发布在服务注册表中，由客户使用，以直接的方式联系服务。</font><font o="66">额外的元数据可以添加到<code i="49">eureka.instance.metadataMap</code>中的实例注册中，并且这可以在远程客户端中访问，但一般不会改变客户端的行为，除非知道元数据的含义。</font><font o="67">下面描述了几个特殊情况，其中Spring Cloud已经为元数据映射指定了含义。</font></p>
</div>
<div class="sect3">
<h4 id="_using_eureka_on_cloudfoundry"><font o="68">在Cloudfoundry上使用Eureka</font></h4>
<div class="paragraph">
<p><font o="69">Cloudfoundry有一个全局路由器，所以同一个应用程序的所有实例都具有相同的主机名（在具有相似架构的其他PaaS解决方案中也是如此）。</font><font o="70">这不一定是使用Eureka的障碍，但是如果您使用路由器（建议，甚至是强制性的，具体取决于您的平台的设置方式），则需要明确设置主机名和端口号（安全或非安全），以便他们使用路由器。</font><font o="71">您可能还需要使用实例元数据，以便您可以区分客户端上的实例（例如，在自定义负载平衡器中）。</font><font o="72">默认情况下，<code i="50">eureka.instance.instanceId</code>为<code i="51">vcap.application.instance_id</code>。</font><font o="73">例如：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="74">application.yml</font></div>
<div class="content">
<pre class="notranslate">eureka:
  instance:
    hostname: ${vcap.application.uris[0]}
    nonSecurePort: 80</pre>
</div>
</div>
<div class="paragraph">
<p><font o="75">根据Cloudfoundry实例中安全规则的设置方式，您可以注册并使用主机VM的IP地址进行直接的服务到服务调用。</font><font o="76">此功能尚未在Pivotal Web Services（</font><a href="https://run.pivotal.io"><font o="76">PWS</font></a><font o="76">）上提供。</font></p>
</div>
</div>
<div class="sect3">
<h4 id="_using_eureka_on_aws"><font o="77">在AWS上使用Eureka</font></h4>
<div class="paragraph">
<p><font o="78">如果应用程序计划将部署到AWS云，那么Eureka实例必须被配置为AWS意识到，这可以通过定制来完成</font><a href="https://github.com/spring-cloud/spring-cloud-netflix/tree/master/spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaInstanceConfigBean.java"><font o="78">EurekaInstanceConfigBean</font></a><font o="78">方式如下：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@Bean
@Profile("!default")
public EurekaInstanceConfigBean eurekaInstanceConfig(InetUtils inetUtils) {
  EurekaInstanceConfigBean b = new EurekaInstanceConfigBean(inetUtils);
  AmazonInfo info = AmazonInfo.Builder.newBuilder().autoBuild("eureka");
  b.setDataCenterInfo(info);
  return b;
}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_changing_the_eureka_instance_id"><font o="79">更改Eureka实例ID</font></h4>
<div class="paragraph">
<p><font o="80">香草Netflix Eureka实例注册了与其主机名相同的ID（即每个主机只有一个服务）。</font><font o="81">Spring Cloud Eureka提供了一个明智的默认，如下所示：<code i="52">${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${server.port}}}</code>。</font><font o="82">例如<code i="53">myhost:myappname:8080</code>。</font></p>
</div>
<div class="paragraph">
<p><font o="83">使用Spring Cloud，您可以通过在<code i="54">eureka.instance.instanceId</code>中提供唯一的标识来覆盖此。</font><font o="84">例如：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="85">application.yml</font></div>
<div class="content">
<pre class="notranslate">eureka:
  instance:
    instanceId: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}</pre>
</div>
</div>
<div class="paragraph">
<p><font o="86">使用这个元数据和在localhost上部署的多个服务实例，随机值将在那里进行，以使实例是唯一的。</font><font o="87">在Cloudfoundry中，<code i="55">vcap.application.instance_id</code>将在Spring Boot应用程序中自动填充，因此不需要随机值。</font></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_using_the_eurekaclient"><font o="88">使用EurekaClient</font></h3>
<div class="paragraph">
<p><font o="89">一旦您有一个<code i="56">@EnableDiscoveryClient</code>（或<code i="57">@EnableEurekaClient</code>）的应用程序，您可以使用它来从</font><a href="#spring-cloud-eureka-server"><font o="89">Eureka服务器</font></a><font o="89">发现服务实例</font><font o="89">。</font><font o="90">一种方法是使用本机<code i="58">com.netflix.discovery.EurekaClient</code>（而不是Spring Cloud <code i="59">DiscoveryClient</code>），例如</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="notranslate">@Autowired
private EurekaClient discoveryClient;

public String serviceUrl() {
    InstanceInfo instance = discoveryClient.getNextServerFromEureka("STORES", false);
    return instance.getHomePageUrl();
}</pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="91">提示</font></div>
</td>
<td class="content">
<div class="paragraph">
<p><font o="92">不要使用<code i="61">@PostConstruct</code>方法或<code i="62">@Scheduled</code>方法（或<code i="63">ApplicationContext</code>可能尚未启动的任何地方）<code i="60">EurekaClient</code>。</font><font o="93">它被初始化为<code i="64">SmartLifecycle</code>（使用<code i="65">phase=0</code>），所以您可以依赖的最早可用的是另一个具有较高阶段的<code i="66">SmartLifecycle</code>。</font></p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_alternatives_to_the_native_netflix_eurekaclient"><font o="94">本机Netflix EurekaClient的替代方案</font></h3>
<div class="paragraph">
<p><font o="95">您不必使用原始的Netflix <code i="67">EurekaClient</code>，通常在某种包装器后面使用它更为方便。</font><font o="96">Spring Cloud支持</font><a href="#spring-cloud-feign"><font o="96">Feign</font></a><font o="96">（REST客户端构建器），还支持</font><font o="96">使用逻辑Eureka服务标识符（VIP）而不是物理URL的</font><a href="#spring-cloud-ribbon"><font o="96">Spring <code i="68">RestTemplate</code></font></a><font o="96">。</font><font o="97">要使用固定的物理服务器列表配置Ribbon，您可以将<code i="69">&lt;client&gt;.ribbon.listOfServers</code>设置为以逗号分隔的物理地址（或主机名）列表，其中<code i="70">&lt;client&gt;</code>是客户端的ID。</font></p>
</div>
<div class="paragraph">
<p><font o="98">您还可以使用<code i="71">org.springframework.cloud.client.discovery.DiscoveryClient</code>，它为Netflix不具体的发现客户端提供简单的API，例如</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="notranslate">@Autowired
private DiscoveryClient discoveryClient;

public String serviceUrl() {
    List&lt;ServiceInstance&gt; list = discoveryClient.getInstances("STORES");
    if (list != null &amp;&amp; list.size() &gt; 0 ) {
        return list.get(0).getUri();
    }
    return null;
}</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_why_is_it_so_slow_to_register_a_service"><font o="99">为什么注册服务这么慢？</font></h3>
<div class="paragraph">
<p><font o="100">作为一个实例也包括定期心跳到注册表（通过客户端的<code i="72">serviceUrl</code>），默认持续时间为30秒。</font><font o="101">在实例，服务器和客户端在其本地缓存中都具有相同的元数据（因此可能需要3个心跳）之前，客户端才能发现服务。</font><font o="102">您可以使用<code i="73">eureka.instance.leaseRenewalIntervalInSeconds</code>更改期限，这将加快客户端连接到其他服务的过程。</font><font o="103">在生产中，最好坚持使用默认值，因为服务器内部有一些计算可以对租赁更新期进行假设。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_zones"><font o="104">区</font></h3>
<div class="paragraph">
<p><font o="105">如果您已将Eureka客户端部署到多个区域，您可能希望这些客户端在使用另一个区域中的服务之前，在同一区域内利用服务。</font><font o="106">为此，您需要正确配置您的Eureka客户端。</font></p>
</div>
<div class="paragraph">
<p><font o="107">首先，您需要确保将Eureka服务器部署到每个区域，并且它们是彼此的对等体。</font><font o="108">有关详细信息，请参阅</font><a href="#spring-cloud-eureka-server-zones-and-regions"><font o="108">区域和区域</font></a><font o="108">部分</font><font o="108">
。</font></p>
</div>
<div class="paragraph">
<p><font o="109">接下来，您需要告知Eureka您的服务所在的区域。您可以使用<code i="74">metadataMap</code>属性来执行此操作。</font><font o="110">例如，如果将<code i="75">service 1</code>部署到<code i="76">zone 1</code>和<code i="77">zone 2</code>，则需要在<code i="78">service 1</code>中设置以下Eureka属性</font></p>
</div>
<div class="paragraph">
<p><strong><font o="111">1区服务1</font></strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code>eureka.instance.metadataMap.zone = zone1
eureka.client.preferSameZoneEureka = true</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong><font o="112">第2区的服务1</font></strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code>eureka.instance.metadataMap.zone = zone2
eureka.client.preferSameZoneEureka = true</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="spring-cloud-eureka-server"><font o="113">服务发现：Eureka服务器</font></h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="netflix-eureka-server-starter"><font o="114">如何包括Eureka服务器</font></h3>
<div class="paragraph">
<p><font o="115">要在项目中包含Eureka服务器，请使用组<code i="79">org.springframework.cloud</code>和工件id <code i="80">spring-cloud-starter-eureka-server</code>的启动器。</font><font o="116">有关</font><font o="116">
使用当前的Spring Cloud发布列表设置构建系统的详细信息，</font><font o="116">请参阅</font><a href="https://projects.spring.io/spring-cloud/"><font o="116">Spring Cloud项目页面</font></a><font o="116">。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="spring-cloud-running-eureka-server"><font o="117">如何运行Eureka服务器</font></h3>
<div class="paragraph">
<p><font o="118">示例eureka服务器;</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@SpringBootApplication
@EnableEurekaServer
public class Application {

    public static void main(String[] args) {
        new SpringApplicationBuilder(Application.class).web(true).run(args);
    }

}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="119">服务器具有一个带有UI的主页，根据<code i="81">/eureka/*</code>下的正常Eureka功能的HTTP API端点。</font></p>
</div>
<div class="paragraph">
<p><font o="120">Eureka背景阅读：看</font><a href="https://github.com/cfregly/fluxcapacitor/wiki/NetflixOSS-FAQ#eureka-service-discovery-load-balancer"><font o="120">助焊剂</font></a><font o="120">和</font><a href="https://groups.google.com/forum/?fromgroups#!topic/eureka_netflix/g3p2r7gHnN0"><font o="120">谷歌小组讨论</font></a><font o="120">。</font></p>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="121">提示</font></div>
</td>
<td class="content">
<div class="paragraph">
<p><font o="122">由于Gradle的依赖关系解决规则和父母的bom功能缺乏，只要依靠spring-cloud-starter-eureka-server就可能导致应用程序启动失败。</font><font o="123">要解决这个问题，必须添加Spring Boot Gradle插件，并且必须像Spring那样导入Spring cloud starter parent bom：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="124">的build.gradle</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">buildscript {
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")
  }
}

apply plugin: "spring-boot"

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.RELEASE"
  }
}</code></pre>
</div>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="spring-cloud-eureka-server-zones-and-regions"><font o="125">高可用性，区域和地区</font></h3>
<div class="paragraph">
<p><font o="126">Eureka服务器没有后端存储，但注册表中的服务实例都必须发送心跳以保持其注册更新（因此可以在内存中完成）。</font><font o="127">客户端还具有eureka注册的内存缓存（因此，他们不必为注册表提供每个服务请求）。</font></p>
</div>
<div class="paragraph">
<p><font o="128">默认情况下，每个Eureka服务器也是Eureka客户端，并且需要（至少一个）服务URL来定位对等体。</font><font o="129">如果您不提供该服务将运行和工作，但它将淋浴您的日志与大量的噪音无法注册对等体。</font></p>
</div>
<div class="paragraph">
<p><font o="130">有关</font><font o="130">区域和区域的客户端</font><a href="#spring-cloud-ribbon"><font o="130">Ribbon支持的详细信息，</font></a><font o="130">请参见</font><a href="#spring-cloud-ribbon"><font o="130">下文</font></a><font o="130">。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_standalone_mode"><font o="131">独立模式</font></h3>
<div class="paragraph">
<p><font o="132">只要存在某种监视器或弹性运行时间（例如Cloud Foundry），两个缓存（客户机和服务器）和心跳的组合使独立的Eureka服务器对故障具有相当的弹性。</font><font o="133">在独立模式下，您可能更喜欢关闭客户端行为，因此不会继续尝试并且无法访问其对等体。</font><font o="134">例：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="135">application.yml（Standalone Eureka Server）</font></div>
<div class="content">
<pre class="notranslate">server:
  port: 8761

eureka:
  instance:
    hostname: localhost
  client:
    registerWithEureka: false
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/</pre>
</div>
</div>
<div class="paragraph">
<p><font o="136">请注意，<code i="82">serviceUrl</code>指向与本地实例相同的主机。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_peer_awareness"><font o="137">同行意识</font></h3>
<div class="paragraph">
<p><font o="138">Eureka可以通过运行多个实例并要求他们相互注册而变得更有弹性。</font><font o="139">事实上，这是默认的行为，所以你需要做的只是为对方添加一个有效的<code i="83">serviceUrl</code>，例如</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="140">application.yml（两个同行的Eureka服务器）</font></div>
<div class="content">
<pre class="notranslate">---
spring:
  profiles: peer1
eureka:
  instance:
    hostname: peer1
  client:
    serviceUrl:
      defaultZone: http://peer2/eureka/

---
spring:
  profiles: peer2
eureka:
  instance:
    hostname: peer2
  client:
    serviceUrl:
      defaultZone: http://peer1/eureka/</pre>
</div>
</div>
<div class="paragraph">
<p><font o="141">在这个例子中，我们有一个YAML文件可以用于通过在不同的Spring配置文件中运行它来运行2台主机（peer1和peer2）上的相同服务器。</font><font o="142">您可以使用此配置来测试单个主机上的对等体感知（通过操作<code i="84">/etc/hosts</code>来解析主机名，在生产中没有太多价值）。</font><font o="143">事实上，如果您在一台知道自己的主机名的机器上运行（默认情况下使用<code i="86">java.net.InetAddress</code>查找），则不需要<code i="85">eureka.instance.hostname</code>。</font></p>
</div>
<div class="paragraph">
<p><font o="144">您可以向系统添加多个对等体，只要它们至少一个边缘彼此连接，则它们将在它们之间同步注册。</font><font o="145">如果对等体在物理上分离（在数据中心内或多个数据中心之间），则系统原则上可以分裂脑型故障。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_prefer_ip_address"><font o="146">喜欢IP地址</font></h3>
<div class="paragraph">
<p><font o="147">在某些情况下，Eureka最好是通告服务的IP地址而不是主机名。</font><font o="148">将<code i="87">eureka.instance.preferIpAddress</code>设置为<code i="88">true</code>，当应用程序向eureka注册时，它将使用其IP地址而不是其主机名。</font></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_circuit_breaker_hystrix_clients"><font o="149">断路器：Hystrix客户端</font></h2>
<div class="sectionbody">
<div class="paragraph">
<p><font o="150">Netflix的创造了一个调用的库</font><a href="https://github.com/Netflix/Hystrix"><font o="150">Hystrix</font></a><font o="150">实现了</font><a href="http://martinfowler.com/bliki/CircuitBreaker.html"><font o="150">断路器图案</font></a><font o="150">。</font><font o="151">在微服务架构中，通常有多层服务调用。</font></p>
</div>
<div class="imageblock">
<div class="content">
<img src="images/HystrixGraph.png" alt="HystrixGraph">
</div>
<div class="title"><font o="152">图1.微服务图</font></div>
</div>
<div class="paragraph">
<p><font o="153">较低级别的服务中的服务故障可能导致用户级联故障。</font><font o="154">当对特定服务的呼叫达到一定阈值时（Hystrix中的默认值为5秒，20次故障），电路打开，不进行通话。</font><font o="155">在错误和开路的情况下，开发人员可以提供后备。</font></p>
</div>
<div class="imageblock">
<div class="content">
<img src="images/HystrixFallback.png" alt="HystrixFallback">
</div>
<div class="title"><font o="156">图2. Hystrix回退防止级联故障</font></div>
</div>
<div class="paragraph">
<p><font o="157">开放式电路会停止级联故障，并允许不必要的或失败的服务时间来愈合。</font><font o="158">回退可以是另一个Hystrix受保护的调用，静态数据或一个正常的空值。</font><font o="159">回退可能被链接，所以第一个回退使得一些其他业务电话又回到静态数据。</font></p>
</div>
<div class="sect2">
<h3 id="netflix-hystrix-starter"><font o="160">如何加入Hystrix</font></h3>
<div class="paragraph">
<p><font o="161">在您的项目中包含Hystrix使用组<code i="89">org.springframework.cloud</code>和artifact id <code i="90">spring-cloud-starter-hystrix</code>的启动器。</font><font o="162">有关</font><font o="162">
使用当前的Spring Cloud发布列表设置构建系统的详细信息，</font><font o="162">请参阅</font><a href="https://projects.spring.io/spring-cloud/"><font o="162">Spring Cloud项目页面</font></a><font o="162">。</font></p>
</div>
<div class="paragraph">
<p><font o="163">示例启动应用程序：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="notranslate">@SpringBootApplication
@EnableCircuitBreaker
public class Application {

    public static void main(String[] args) {
        new SpringApplicationBuilder(Application.class).web(true).run(args);
    }

}

@Component
public class StoreIntegration {

    @HystrixCommand(fallbackMethod = "defaultStores")
    public Object getStores(Map&lt;String, Object&gt; parameters) {
        //do stuff that might fail
    }

    public Object defaultStores(Map&lt;String, Object&gt; parameters) {
        return /* something useful */;
    }
}</pre>
</div>
</div>
<div class="paragraph">
<p><font o="164"><code i="91">@HystrixCommand</code>由名为</font><a href="https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica"><font o="164">“javanica”</font></a><font o="164">的Netflix contrib库提供
 </font><font o="164">。</font><font o="165">Spring Cloud使用该注释在连接到Hystrix断路器的代理中自动包装Spring bean。</font><font o="166">断路器计算何时打开和关闭电路，以及在发生故障时应该做什么。</font></p>
</div>
<div class="paragraph">
<p><font o="167">要配置<code i="92">@HystrixCommand</code>，您可以使用<code i="93">commandProperties</code>属性列出<code i="94">@HystrixProperty</code>注释。</font><font o="168">请参阅
 </font><a href="https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica#configuration"><font o="168">这里</font></a><font o="168"> 
了解更多详情。</font><font o="169">有关</font><font o="169">
可用属性的详细信息，</font><font o="169">请参阅</font><a href="https://github.com/Netflix/Hystrix/wiki/Configuration"><font o="169">Hystrix维基</font></a><font o="169">。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_propagating_the_security_context_or_using_spring_scopes"><font o="170">传播安全上下文或使用Spring Scopes</font></h3>
<div class="paragraph">
<p><font o="171">如果您希望某些线程本地上下文传播到<code i="95">@HystrixCommand</code>，默认声明将不起作用，因为它在线程池中执行命令（超时）。</font><font o="172">您可以使用某些配置或直接在注释中使用与使用相同的线程来调用Hystrix，方法是要求使用不同的“隔离策略”。</font><font o="173">例如：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@HystrixCommand(fallbackMethod = "stubMyService",
    commandProperties = {
      @HystrixProperty(name="execution.isolation.strategy", value="SEMAPHORE")
    }
)
...</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="174">如果您使用<code i="96">@SessionScope</code>或<code i="97">@RequestScope</code>，同样的事情也适用。</font><font o="175">您将知道何时需要执行此操作，因为运行时异常说它找不到范围的上下文。</font></p>
</div>
<div class="paragraph">
<p><font o="176">您还可以选择将<code i="98">hystrix.shareSecurityContext</code>属性设置为<code i="99">true</code>。</font><font o="177">这样做会自动配置一个Hystrix并发策略插件钩子，他将<code i="100">SecurityContext</code>从主线程传输到Hystrix命令使用的钩子。</font><font o="178">Hystrix不允许多个hystrix并发策略被注册，因此通过将自己的<code i="101">HystrixConcurrencyStrategy</code>声明为Spring bean可以使用扩展机制。</font><font o="179">Spring Cloud将在Spring上下文中查找您的实现，并将其包装在自己的插件中。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_health_indicator"><font o="180">健康指标</font></h3>
<div class="paragraph">
<p><font o="181">连接的断路器的状态也暴露在呼叫应用程序的<code i="102">/health</code>端点中。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-json" data-lang="json">{
    "hystrix": {
        "openCircuitBreakers": [
            "StoreIntegration::getStoresByLocationLink"
        ],
        "status": "CIRCUIT_OPEN"
    },
    "status": "UP"
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_hystrix_metrics_stream"><font o="182">Hystrix指标流</font></h3>
<div class="paragraph">
<p><font o="183">要使Hystrix度量流包含对<code i="103">spring-boot-starter-actuator</code>的依赖。</font><font o="184">这将使<code i="104">/hystrix.stream</code>作为管理端点。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-xml" data-lang="xml">    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
    &lt;/dependency&gt;</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_circuit_breaker_hystrix_dashboard"><font o="185">断路器：Hystrix仪表板</font></h2>
<div class="sectionbody">
<div class="paragraph">
<p><font o="186">Hystrix的主要优点之一是它收集了关于每个HystrixCommand的一套指标。</font><font o="187">Hystrix仪表板以有效的方式显示每个断路器的运行状况。</font></p>
</div>
<div class="imageblock">
<div class="content">
<img src="images/Hystrix.png" alt="豪猪">
</div>
<div class="title"><font o="188">图3. Hystrix仪表板</font></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_hystrix_timeouts_and_ribbon_clients"><font o="189">Hystrix超时和Ribbon客户</font></h2>
<div class="sectionbody">
<div class="paragraph">
<p><font o="190">当使用包含Ribbon客户端的Hystrix命令时，您需要确保您的Hystrix超时配置为长于配置的Ribbon超时，包括任何可能的重试。</font><font o="191">例如，如果您的Ribbon连接超时为一秒钟，并且Ribbon客户端可能会重试该请求三次，那么您的Hystrix超时时间应该略超过三秒钟。</font></p>
</div>
<div class="sect2">
<h3 id="netflix-hystrix-dashboard-starter"><font o="192">如何加入Hystrix仪表板</font></h3>
<div class="paragraph">
<p><font o="193">要在项目中包含Hystrix仪表板，请使用组<code i="105">org.springframework.cloud</code>和工件ID <code i="106">spring-cloud-starter-hystrix-dashboard</code>的起始器。</font><font o="194">有关</font><font o="194">
使用当前的Spring Cloud发布列表设置构建系统的详细信息，</font><font o="194">请参阅</font><a href="https://projects.spring.io/spring-cloud/"><font o="194">Spring Cloud项目页面</font></a><font o="194">。</font></p>
</div>
<div class="paragraph">
<p><font o="195">运行Hystrix仪表板使用<code i="107">@EnableHystrixDashboard</code>注释您的Spring Boot主类。</font><font o="196">然后访问<code i="108">/hystrix</code>并将仪表板指向Hystrix客户端应用程序中的单个实例<code i="109">/hystrix.stream</code>端点。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_turbine">Turbine</h3>
<div class="paragraph">
<p><font o="198">查看个别实例Hystrix数据在系统的总体健康状况方面不是很有用。</font><a href="https://github.com/Netflix/Turbine"><font o="199">Turbine</font></a><font o="199">是将所有相关<code i="110">/hystrix.stream</code>端点聚合到Hystrix仪表板中使用的组合<code i="111">/turbine.stream</code>的应用程序。</font><font o="200">单个实例通过Eureka定位。</font><font o="201">运行Turbine就像使用<code i="112">@EnableTurbine</code>注释（例如使用spring-cloud-starter-turbine设置类路径）注释主类一样简单。</font><font o="202">来自</font><a href="https://github.com/Netflix/Turbine/wiki/Configuration-(1.x)"><font o="202">Turbine 1维基的</font></a><font o="202">所有文档配置属性都</font><font o="202">适用。</font><font o="203">唯一的区别是，<code i="113">turbine.instanceUrlSuffix</code>不需要预先添加的端口，因为除非<code i="114">turbine.instanceInsertPort=false</code>自动处理。</font></p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="204">注意</font></div>
</td>
<td class="content"><font o="205">
默认情况下，Turbine通过在Eureka中查找其<code i="116">homePageUrl</code>条目，然后将<code i="117">/hystrix.stream</code>附加到注册的实例上查找<code i="115">/hystrix.stream</code>端点。</font><font o="206">这意味着如果<code i="118">spring-boot-actuator</code>在自己的端口上运行（这是默认值），则对<code i="119">/hystrix.stream</code>的调用将失败。</font><font o="207">要使涡轮机找到正确端口的Hystrix流，需要向实例的元数据中添加<code i="120">management.port</code>：
</font></td>
</tr>
</tbody></table>
</div>
<div class="listingblock">
<div class="content">
<pre class="notranslate">eureka:
  instance:
    metadata-map:
      management.port: ${management.port:8081}</pre>
</div>
</div>
<div class="paragraph">
<p><font o="208">配置密钥<code i="121">turbine.appConfig</code>是涡轮机将用于查找实例的尤里卡服务列表。</font><font o="209">涡轮流然后在Hystrix仪表板中使用如下URL：<code i="122"><a href="http://my.turbine.sever:8080/turbine.stream?cluster=&lt;CLUSTERNAME&gt;" class="bare">http://my.turbine.sever:8080/turbine.stream?cluster=&lt;CLUSTERNAME&gt;</a>;</code>（如果名称为“默认”，则可以省略群集参数）。</font><font o="210"><code i="123">cluster</code>参数必须与<code i="124">turbine.aggregator.clusterConfig</code>中的条目匹配。</font><font o="211">从eureka返回的值是大写字母，因此如果有一个名为“customers”的Eureka注册了一个应用程序，我们希望该示例可以工作：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="notranslate">turbine:
  aggregator:
    clusterConfig: CUSTOMERS
  appConfig: customers</pre>
</div>
</div>
<div class="paragraph">
<p><font o="212"><code i="125">clusterName</code>可以通过<code i="126">turbine.clusterNameExpression</code>中的SPEL表达式使用root实例来定制<code i="127">InstanceInfo</code>。</font><font o="213">默认值为<code i="128">appName</code>，这意味着Eureka serviceId最终作为集群密钥（即客户的<code i="129">InstanceInfo</code>具有<code i="130">appName</code>“CUSTOMERS”）。</font><font o="214">一个不同的例子是<code i="131">turbine.clusterNameExpression=aSGName</code>，它将从AWS ASG名称获取集群名称。</font><font o="215">另一个例子：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="notranslate">turbine:
  aggregator:
    clusterConfig: SYSTEM,USER
  appConfig: customers,stores,ui,admin
  clusterNameExpression: metadata['cluster']</pre>
</div>
</div>
<div class="paragraph">
<p><font o="216">在这种情况下，来自4个服务的集群名称从其元数据映射中提取，并且预期具有包含“SYSTEM”和“USER”的值。</font></p>
</div>
<div class="paragraph">
<p><font o="217">要为所有应用程序使用“默认”集群，您需要一个字符串文字表达式（带单引号，并且如果它在YAML中也使用双引号进行转义）：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="notranslate">turbine:
  appConfig: customers,stores
  clusterNameExpression: "'default'"</pre>
</div>
</div>
<div class="paragraph">
<p><font o="218">Spring Cloud提供了一个<code i="132">spring-cloud-starter-turbine</code>，它具有运行Turbine服务器所需的所有依赖关系。</font><font o="219">只需创建一个Spring Boot应用程序并用<code i="133">@EnableTurbine</code>进行注释。</font></p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="220">注意</font></div>
</td>
<td class="content"><font o="221">
默认情况下，Spring Cloud允许Turbine使用主机和端口，以允许每个主机在每个群集中进行多个进程。</font><font o="222">如果你想建成Turbine，它的原生Netflix的行为</font><em><font o="222">不</font></em><font o="222">允许每个主机上的多个过程，每簇（关键实例ID是主机名），然后将该属性设置<code i="134">turbine.combineHostPort=false</code>。
</font></td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_turbine_stream">Turbine Stream</h3>
<div class="paragraph">
<p><font o="224">在某些环境中（例如，在PaaS设置中），从所有分布式Hystrix命令中提取度量的经典Turbine模型不起作用。</font><font o="225">在这种情况下，您可能希望使Hystrix命令将度量标准推送到Turbine，并且Spring Cloud可以使用消息传递。</font><font o="226">您需要在客户端上执行的所有操作都为您选择的<code i="135">spring-cloud-netflix-hystrix-stream</code>和<code i="136">spring-cloud-starter-stream-*</code>添加依赖关系（有关代理的详细信息，请参阅Spring Cloud Stream文档，以及如何配置客户端凭据，但是应该为当地经纪人开箱即用）。</font></p>
</div>
<div class="paragraph">
<p><font o="227">在服务器端只需创建一个Spring Boot应用程序并使用<code i="137">@EnableTurbineStream</code>进行注释，默认情况下将会出现在8989端口（将您的Hystrix仪表板指向该端口，任何路径）。</font><font o="228">您可以使用<code i="138">server.port</code>或<code i="139">turbine.stream.port</code>自定义端口。</font><font o="229">如果类路径中还有<code i="140">spring-boot-starter-web</code>和<code i="141">spring-boot-starter-actuator</code>，那么您可以通过提供不同的<code i="142">management.port</code>在单独的端口（默认情况下使用Tomcat）打开Actuator端点。</font></p>
</div>
<div class="paragraph">
<p><font o="230">然后，您可以将Hystrix仪表板指向Turbine Stream服务器，而不是单个Hystrix流。</font><font o="231">如果Turbine Stream在myhost上的端口8989上运行，则将<code i="143"><a href="http://myhost:8989" class="bare">http://myhost:8989</a></code>放在Hystrix仪表板中的流输入字段中。</font><font o="232">电路将以各自的serviceId为前缀，后跟一个点，然后是电路名称。</font></p>
</div>
<div class="paragraph">
<p><font o="233">Spring Cloud提供了一个<code i="144">spring-cloud-starter-turbine-stream</code>，它具有您需要的Turbine Stream服务器运行所需的所有依赖项，只需添加您选择的Stream binder，例如<code i="145">spring-cloud-starter-stream-rabbit</code>。</font><font o="234">您需要Java 8来运行应用程序，因为它是基于Netty的。</font></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="spring-cloud-ribbon"><font o="235">客户侧负载均衡器：Ribbon</font></h2>
<div class="sectionbody">
<div class="paragraph">
<p><font o="236">Ribbon是一个客户端负载平衡器，它可以很好地控制HTTP和TCP客户端的行为。</font><font o="237">Feign已经使用Ribbon，所以如果你使用<code i="146">@FeignClient</code>，那么这一节也适用。</font></p>
</div>
<div class="paragraph">
<p><font o="238">Ribbon中的中心概念是命名客户端的概念。</font><font o="239">每个负载平衡器是组合的组合的一部分，它们一起工作以根据需要联系远程服务器，并且集合具有您将其作为应用程序开发人员（例如使用<code i="147">@FeignClient</code>注释）的名称。</font><font o="240">Spring Cloud使用<code i="149">RibbonClientConfiguration</code>为每个命名的客户端根据需要创建一个新的集合，作为<code i="148">ApplicationContext</code>。</font><font o="241">这包含（除其他外）<code i="150">ILoadBalancer</code>，<code i="151">RestClient</code>和<code i="152">ServerListFilter</code>。</font></p>
</div>
<div class="sect2">
<h3 id="netflix-ribbon-starter"><font o="242">如何加入Ribbon</font></h3>
<div class="paragraph">
<p><font o="243">要在项目中包含Ribbon，请使用组<code i="153">org.springframework.cloud</code>和artifact id <code i="154">spring-cloud-starter-ribbon</code>的启动器。</font><font o="244">有关</font><font o="244">
使用当前的Spring Cloud发布列表设置构建系统的详细信息，</font><font o="244">请参阅</font><a href="https://projects.spring.io/spring-cloud/"><font o="244">Spring Cloud项目页面</font></a><font o="244">。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_customizing_the_ribbon_client"><font o="245">自定义Ribbon客户端</font></h3>
<div class="paragraph">
<p><font o="246">您可以使用<code i="155">&lt;client&gt;.ribbon.*</code>中的外部属性来配置Ribbon客户端的某些位，这与使用Netflix API本身没有什么不同，只能使用Spring Boot配置文件。</font><font o="247">本机选项可以在<code i="156">CommonClientConfigKey</code>（功能区内核心部分）中作为静态字段进行检查。</font></p>
</div>
<div class="paragraph">
<p><font o="248">Spring Cloud还允许您通过使用<code i="158">@RibbonClient</code>声明其他配置（位于<code i="157">RibbonClientConfiguration</code>之上）来完全控制客户端。</font><font o="249">例：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@Configuration
@RibbonClient(name = "foo", configuration = FooConfiguration.class)
public class TestConfiguration {
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="250">在这种情况下，客户端由<code i="159">RibbonClientConfiguration</code>中已经存在的组件与<code i="160">FooConfiguration</code>中的任何组件组成（后者通常会覆盖前者）。</font></p>
</div>
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="251">警告</font></div>
</td>
<td class="content"><font o="252">
<code i="161">FooConfiguration</code>必须是<code i="162">@Configuration</code>，但请注意，主应用程序上下文不属于<code i="163">@ComponentScan</code>，否则将由<code i="164">@RibbonClients</code>共享。</font><font o="253">如果您使用<code i="165">@ComponentScan</code>（或<code i="166">@SpringBootApplication</code>），则需要采取措施避免包含（例如将其放在一个单独的，不重叠的包中，或者指定要在<code i="167">@ComponentScan</code>）。
</font></td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><font o="254">Spring Cloud Netflix默认提供以下功能区（<code i="168">BeanType</code> beanName：<code i="169">ClassName</code>）的bean：</font></p>
</div>
<div class="ulist">
<ul>
<li>
<p><font o="255"><code i="170">IClientConfig</code> ribbonClientConfig：<code i="171">DefaultClientConfigImpl</code></font></p>
</li>
<li>
<p><font o="256"><code i="172">IRule</code> ribbonRule：<code i="173">ZoneAvoidanceRule</code></font></p>
</li>
<li>
<p><font o="257"><code i="174">IPing</code> ribbonPing：<code i="175">NoOpPing</code></font></p>
</li>
<li>
<p><font o="258"><code i="176">ServerList&lt;Server&gt;</code> ribbonServerList：<code i="177">ConfigurationBasedServerList</code></font></p>
</li>
<li>
<p><font o="259"><code i="178">ServerListFilter&lt;Server&gt;</code> ribbonServerListFilter：<code i="179">ZonePreferenceServerListFilter</code></font></p>
</li>
<li>
<p><font o="260"><code i="180">ILoadBalancer</code> ribbonLoadBalancer：<code i="181">ZoneAwareLoadBalancer</code></font></p>
</li>
<li>
<p><font o="261"><code i="182">ServerListUpdater</code> ribbonServerListUpdater：<code i="183">PollingServerListUpdater</code></font></p>
</li>
</ul>
</div>
<div class="paragraph">
<p><font o="262">创建一个类型的bean并将其放置在<code i="184">@RibbonClient</code>配置（例如上面的<code i="185">FooConfiguration</code>）中）允许您覆盖所描述的每个bean。</font><font o="263">例：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@Configuration
public class FooConfiguration {
    @Bean
    public IPing ribbonPing(IClientConfig config) {
        return new PingUrl();
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="264">这将<code i="187">PingUrl</code>替换为<code i="187">PingUrl</code>。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_customizing_the_ribbon_client_using_properties"><font o="265">使用属性自定义Ribbon客户端</font></h3>
<div class="paragraph">
<p><font o="266">从版本1.2.0开始，Spring Cloud Netflix现在支持使用属性与</font><a href="https://github.com/Netflix/ribbon/wiki/Working-with-load-balancers#components-of-load-balancer"><font o="266">Ribbon文档兼容来自</font></a><font o="266">定义Ribbon客户端</font><font o="266">。</font></p>
</div>
<div class="paragraph">
<p><font o="267">这允许您在不同环境中更改启动时的行为。</font></p>
</div>
<div class="paragraph">
<p><font o="268">支持的属性如下所示，应以<code i="188">&lt;clientName&gt;.ribbon.</code>为前缀：</font></p>
</div>
<div class="ulist">
<ul>
<li>
<p><font o="269"><code i="189">NFLoadBalancerClassName</code>：应实施<code i="190">ILoadBalancer</code></font></p>
</li>
<li>
<p><font o="270"><code i="191">NFLoadBalancerRuleClassName</code>：应实施<code i="192">IRule</code></font></p>
</li>
<li>
<p><font o="271"><code i="193">NFLoadBalancerPingClassName</code>：应实施<code i="194">IPing</code></font></p>
</li>
<li>
<p><font o="272"><code i="195">NIWSServerListClassName</code>：应实施<code i="196">ServerList</code></font></p>
</li>
<li>
<p><font o="273"><code i="197">NIWSServerListFilterClassName</code>应实施<code i="198">ServerListFilter</code></font></p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="274">注意</font></div>
</td>
<td class="content"><font o="275">
在这些属性中定义的类优先于使用<code i="199">@RibbonClient(configuration=MyRibbonConfig.class)</code>定义的bean和由Spring Cloud Netflix提供的默认值。
</font></td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><font o="276">要设置服务名称<code i="201">users</code>的<code i="200">IRule</code>，您可以设置以下内容：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="277">application.yml</font></div>
<div class="content">
<pre class="notranslate">users:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule</pre>
</div>
</div>
<div class="paragraph">
<p><font o="278">有关</font><a href="https://github.com/Netflix/ribbon/wiki/Working-with-load-balancers"><font o="278">Ribbon</font></a><font o="278">提供的实现，</font><font o="278">请参阅</font><a href="https://github.com/Netflix/ribbon/wiki/Working-with-load-balancers"><font o="278">Ribbon文档</font></a><font o="278">。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_using_ribbon_with_eureka"><font o="279">使用Ribbon与Eureka</font></h3>
<div class="paragraph">
<p><font o="280">当Eureka与Ribbon结合使用（即两者都在类路径上）时，<code i="202">ribbonServerList</code>将被扩展为<code i="203">DiscoveryEnabledNIWSServerList</code>，扩展名为Eureka的服务器列表。</font><font o="281">它还用<code i="205">NIWSDiscoveryPing</code>替换<code i="204">IPing</code>接口，代理到Eureka以确定服务器是否启动。</font><font o="282">默认情况下安装的<code i="206">ServerList</code>是一个<code i="207">DomainExtractingServerList</code>，其目的是使物理元数据可用于负载平衡器，而不使用AWS AMI元数据（Netflix依赖的是）。</font><font o="283">默认情况下，服务器列表将使用实例元数据（如远程客户机集<code i="208">eureka.instance.metadataMap.zone</code>）中提供的“区域”信息构建，如果缺少，则可以使用服务器主机名中的域名作为代理对于区域（如果设置了标志<code i="209">approximateZoneFromHostname</code>）。</font><font o="284">一旦区域信息可用，它可以在<code i="210">ServerListFilter</code>中使用。</font><font o="285">默认情况下，它将用于定位与客户端相同区域的服务器，因为默认值为<code i="211">ZonePreferenceServerListFilter</code>。</font><font o="286">默认情况下，即通过<code i="212">eureka.instance.metadataMap.zone</code>，客户端的区域与远程实例的方式相同。</font></p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="287">注意</font></div>
</td>
<td class="content"><font o="288">
设置客户端区域的正统“archaius”方式是通过一个名为“@zone”的配置属性，如果可用，Spring Cloud将优先使用所有其他设置（请注意，该键必须被引用）在YAML配置中）。
</font></td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="289">注意</font></div>
</td>
<td class="content"><font o="290">
如果没有其他的区域数据源，则基于客户端配置（与实例配置相反）进行猜测。</font><font o="291">我们将<code i="213">eureka.client.availabilityZones</code>，它是从区域名称到区域列表的地图，并拉出实例本身区域的第一个区域（即<code i="214">eureka.client.region</code>，默认为“us-east-1”，为与本机Netflix的兼容性）。
</font></td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="spring-cloud-ribbon-without-eureka"><font o="292">示例：如何使用Ribbon不使用Eureka</font></h3>
<div class="paragraph">
<p><font o="293">Eureka是抽象远程服务器发现的一种方便的方式，因此您不必在客户端中对其URL进行硬编码，但如果您不想使用它，Ribbon和Feign仍然很适用的。</font><font o="294">假设你已经为“store”声明了一个<code i="215">@RibbonClient</code>，并且Eureka没有被使用（甚至不在类路径上）。</font><font o="295">Ribbon客户端默认为已配置的服务器列表，您可以提供这样的配置</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="296">application.yml</font></div>
<div class="content">
<pre class="notranslate">stores:
  ribbon:
    listOfServers: example.com,google.com</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_example_disable_eureka_use_in_ribbon"><font o="297">示例：在Ribbon中禁用Eureka使用</font></h3>
<div class="paragraph">
<p><font o="298">设置属性<code i="216">ribbon.eureka.enabled = false</code>将明确禁用在Ribbon中使用Eureka。</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="299">application.yml</font></div>
<div class="content">
<pre class="notranslate">ribbon:
  eureka:
   enabled: false</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_using_the_ribbon_api_directly"><font o="300">直接使用Ribbon API</font></h3>
<div class="paragraph">
<p><font o="301">您也可以直接使用<code i="217">LoadBalancerClient</code>。</font><font o="302">例：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">public class MyClass {
    @Autowired
    private LoadBalancerClient loadBalancer;

    public void doStuff() {
        ServiceInstance instance = loadBalancer.choose("stores");
        URI storesUri = URI.create(String.format("http://%s:%s", instance.getHost(), instance.getPort()));
        // ... do something with the URI
    }
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="ribbon-child-context-eager-load"><font o="303">缓存Ribbon配置</font></h3>
<div class="paragraph">
<p><font o="304">每个Ribbon命名的客户机都有一个对应的子应用程序上下文，Spring Cloud维护，这个应用程序上下文在第一个请求中被延迟加载到命名的客户端。</font><font o="305">可以通过指定Ribbon客户端的名称，在启动时，可以更改这种惰性加载行为，从而热切加载这些子应用程序上下文。</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="306">application.yml</font></div>
<div class="content">
<pre class="notranslate">ribbon:
  eager-load:
    enabled: true
    clients: client1, client2, client3</pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="spring-cloud-feign"><font o="307">声明性REST客户端：Feign</font></h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://github.com/Netflix/feign"><font o="308">Feign</font></a><font o="308">是一个声明式的Web服务客户端。</font><font o="309">这使得Web服务客户端的写入更加方便 </font><font o="310">要使用Feign创建一个界面并对其进行注释。</font><font o="311">它具有可插拔注释支持，包括Feign注释和JAX-RS注释。</font><font o="312">Feign还支持可插拔编码器和解码器。</font><font o="313">Spring Cloud添加了对Spring MVC注释的支持，并在Spring Web中使用默认使用的<code i="218">HttpMessageConverters</code>。</font><font o="314">Spring Cloud集成Ribbon和Eureka以在使用Feign时提供负载均衡的http客户端。</font></p>
</div>
<div class="sect2">
<h3 id="netflix-feign-starter"><font o="315">如何包含Feign</font></h3>
<div class="paragraph">
<p><font o="316">要在您的项目中包含Feign，请使用组<code i="219">org.springframework.cloud</code>和工件ID <code i="220">spring-cloud-starter-feign</code>的启动器。</font><font o="317">有关</font><font o="317">
使用当前的Spring Cloud发布列表设置构建系统的详细信息，</font><font o="317">请参阅</font><a href="https://projects.spring.io/spring-cloud/"><font o="317">Spring Cloud项目页面</font></a><font o="317">。</font></p>
</div>
<div class="paragraph">
<p><font o="318">示例Spring Boot应用程序</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@Configuration
@ComponentScan
@EnableAutoConfiguration
@EnableEurekaClient
@EnableFeignClients
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><font o="319">StoreClient.java</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@FeignClient("stores")
public interface StoreClient {
    @RequestMapping(method = RequestMethod.GET, value = "/stores")
    List&lt;Store&gt; getStores();

    @RequestMapping(method = RequestMethod.POST, value = "/stores/{storeId}", consumes = "application/json")
    Store update(@PathVariable("storeId") Long storeId, Store store);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="320">在<code i="221">@FeignClient</code>注释中，String值（以上“存储”）是一个任意的客户端名称，用于创建Ribbon负载平衡器（</font><a href="#spring-cloud-ribbon"><font o="320">有关Ribbon支持的详细信息，</font></a><font o="320">请参阅</font><a href="#spring-cloud-ribbon"><font o="320">下文</font></a><font o="320">））。</font><font o="321">您还可以使用<code i="222">url</code>属性（绝对值或只是主机名）指定URL。</font><font o="322">应用程序上下文中的bean的名称是该接口的完全限定名称。</font><font o="323">要指定自己的别名值，您可以使用<code i="224">@FeignClient</code>注释的<code i="223">qualifier</code>值。</font></p>
</div>
<div class="paragraph">
<p><font o="324">以上的Ribbon客户端将要发现“商店”服务的物理地址。</font><font o="325">如果您的应用程序是Eureka客户端，那么它将解决Eureka服务注册表中的服务。</font><font o="326">如果您不想使用Eureka，您可以简单地配置外部配置中的服务器列表（</font><a href="#spring-cloud-ribbon-without-eureka"><font o="326">例如，</font></a><font o="326">参见
 </font><a href="#spring-cloud-ribbon-without-eureka"><font o="326">上文</font></a><font o="326">）。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="spring-cloud-feign-overriding-defaults"><font o="327">覆盖Feign默认值</font></h3>
<div class="paragraph">
<p><font o="328">Spring Cloud的Feign支持中的一个中心概念就是命名的客户端。</font><font o="329">每个假装客户端是组合的组合的一部分，它们一起工作以按需联系远程服务器，并且该集合具有您将其作为应用程序开发人员使用<code i="225">@FeignClient</code>注释的名称。</font><font o="330">Spring Cloud使用<code i="227">FeignClientsConfiguration</code>为每个命名的客户端根据需要创建一个新的集合<code i="226">ApplicationContext</code>。</font><font o="331">这包含（其中包括）<code i="228">feign.Decoder</code>，<code i="229">feign.Encoder</code>和<code i="230">feign.Contract</code>。</font></p>
</div>
<div class="paragraph">
<p><font o="332">Spring Cloud可以通过使用<code i="232">@FeignClient</code>声明其他配置（位于<code i="231">FeignClientsConfiguration</code>之上）来完全控制假客户端。</font><font o="333">例：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@FeignClient(name = "stores", configuration = FooConfiguration.class)
public interface StoreClient {
    //..
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="334">在这种情况下，客户端由<code i="233">FeignClientsConfiguration</code>中的组件与<code i="234">FooConfiguration</code>中的任何组件组成（后者将覆盖前者）。</font></p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="335">注意</font></div>
</td>
<td class="content"><font o="336">
<code i="235">FooConfiguration</code>不需要使用<code i="236">@Configuration</code>注释。</font><font o="337">但是，如果是，则请注意将其从任何<code i="237">@ComponentScan</code>中排除，否则将包含此配置，因为它将成为<code i="238">feign.Decoder</code>，<code i="239">feign.Encoder</code>，<code i="240">feign.Contract</code>等的默认来源，指定时。</font><font o="338">这可以通过将其放置在任何<code i="241">@ComponentScan</code>或<code i="242">@SpringBootApplication</code>的单独的不重叠的包中，或者可以在<code i="243">@ComponentScan</code>中明确排除。
</font></td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="339">注意</font></div>
</td>
<td class="content"><font o="340">
<code i="244">serviceId</code>属性现在已被弃用，有利于<code i="245">name</code>属性。
</font></td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="341">警告</font></div>
</td>
<td class="content"><font o="342">
以前，使用<code i="246">url</code>属性，不需要<code i="247">name</code>属性。</font><font o="343">现在需要使用<code i="248">name</code>。
</font></td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><font o="344"><code i="249">name</code>和<code i="250">url</code>属性支持占位符。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@FeignClient(name = "${feign.name}", url = "${feign.url}")
public interface StoreClient {
    //..
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="345">Spring Cloud Netflix默认为feign（<code i="251">BeanType</code> beanName：<code i="252">ClassName</code>）提供以下bean：</font></p>
</div>
<div class="ulist">
<ul>
<li>
<p><font o="346"><code i="253">Decoder</code> feignDecoder：<code i="254">ResponseEntityDecoder</code>（其中包含<code i="255">SpringDecoder</code>）</font></p>
</li>
<li>
<p><font o="347"><code i="256">Encoder</code> feignEncoder：<code i="257">SpringEncoder</code></font></p>
</li>
<li>
<p><font o="348"><code i="258">Logger</code> feignLogger：<code i="259">Slf4jLogger</code></font></p>
</li>
<li>
<p><font o="349"><code i="260">Contract</code> feignContract：<code i="261">SpringMvcContract</code></font></p>
</li>
<li>
<p><font o="350"><code i="262">Feign.Builder</code> feignBuilder：<code i="263">HystrixFeign.Builder</code></font></p>
</li>
<li>
<p><font o="351"><code i="264">Client</code> feignClient：如果Ribbon被启用，它是一个<code i="265">LoadBalancerFeignClient</code>，否则使用默认的feign客户端。</font></p>
</li>
</ul>
</div>
<div class="paragraph">
<p><font o="352">可以通过将<code i="266">feign.okhttp.enabled</code>或<code i="267">feign.httpclient.enabled</code>设置为<code i="268">true</code>，并将它们放在类路径上来使用OkHttpClient和ApacheHttpClient feign客户端。</font></p>
</div>
<div class="paragraph">
<p><font o="353">Spring Cloud Netflix </font><font o="353">默认情况下</font><em><font o="353">不</font></em><font o="353">提供以下bean，但是仍然从应用程序上下文中查找这些类型的bean以创建假客户端：</font></p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Logger.Level</code></p>
</li>
<li>
<p><code>Retryer</code></p>
</li>
<li>
<p><code>ErrorDecoder</code></p>
</li>
<li>
<p><code>Request.Options</code></p>
</li>
<li>
<p><code>Collection&lt;RequestInterceptor&gt;</code></p>
</li>
<li>
<p><code>SetterFactory</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p><font o="354">创建其中一个类型的bean并将其放置在<code i="269">@FeignClient</code>配置（例如上面的<code i="270">FooConfiguration</code>）中）允许您覆盖所描述的每个bean。</font><font o="355">例：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@Configuration
public class FooConfiguration {
    @Bean
    public Contract feignContract() {
        return new feign.Contract.Default();
    }

    @Bean
    public BasicAuthRequestInterceptor basicAuthRequestInterceptor() {
        return new BasicAuthRequestInterceptor("user", "password");
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="356">这将<code i="271">SpringMvcContract</code>替换为<code i="272">feign.Contract.Default</code>，并将<code i="273">RequestInterceptor</code>添加到<code i="274">RequestInterceptor</code>的集合中。</font></p>
</div>
<div class="paragraph">
<p><font o="357">可以在<code i="275">@EnableFeignClients</code>属性<code i="276">defaultConfiguration</code>中以与上述相似的方式指定默认配置。</font><font o="358">不同之处在于，此配置将适用于</font><em><font o="358">所有</font></em><font o="358">假客户端。</font></p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="359">注意</font></div>
</td>
<td class="content"><font o="360">
如果您需要在<code i="278">RequestInterceptor`s you will need to either set the
thread isolation strategy for Hystrix to `SEMAPHORE</code>中使用<code i="277">ThreadLocal</code>绑定变量或在Feign中禁用Hystrix。
</font></td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><font o="361">application.yml</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml"># To disable Hystrix in Feign
feign:
  hystrix:
    enabled: false

# To set thread isolation to SEMAPHORE
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_creating_feign_clients_manually"><font o="362">手动创建Feign客户端</font></h3>
<div class="paragraph">
<p><font o="363">在某些情况下，可能需要以上述方法不可能自定义您的Feign客户端。</font><font o="364">在这种情况下，您可以使用</font><a href="https://github.com/OpenFeign/feign/#basics"><font o="364">Feign Builder API</font></a><font o="364">创建客户端
 </font><font o="364">。</font><font o="365">下面是一个创建两个具有相同接口的Feign客户端的示例，但是使用单独的请求拦截器配置每个客户端。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@Import(FeignClientsConfiguration.class)
class FooController {

	private FooClient fooClient;

	private FooClient adminClient;

    @Autowired
	public FooController(
			Decoder decoder, Encoder encoder, Client client) {
		this.fooClient = Feign.builder().client(client)
				.encoder(encoder)
				.decoder(decoder)
				.requestInterceptor(new BasicAuthRequestInterceptor("user", "user"))
				.target(FooClient.class, "http://PROD-SVC");
		this.adminClient = Feign.builder().client(client)
				.encoder(encoder)
				.decoder(decoder)
				.requestInterceptor(new BasicAuthRequestInterceptor("admin", "admin"))
				.target(FooClient.class, "http://PROD-SVC");
    }
}</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="366">注意</font></div>
</td>
<td class="content"><font o="367">
在上面的例子中，<code i="279">FeignClientsConfiguration.class</code>是由Spring Cloud Netflix提供的默认配置。
</font></td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="368">注意</font></div>
</td>
<td class="content"><font o="369">
<code i="280">PROD-SVC</code>是客户端将要求的服务的名称。
</font></td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="spring-cloud-feign-hystrix"><font o="370">Feign Hystrix支持</font></h3>
<div class="paragraph">
<p><font o="371">如果Hystrix在类路径和<code i="281">feign.hystrix.enabled=true</code>上，则Feign将使用断路器包装所有方法。</font><font o="372">还可以返回<code i="282">com.netflix.hystrix.HystrixCommand</code>。</font><font o="373">这样可以使用无效模式（调用<code i="283">.toObservable()</code>或<code i="284">.observe()</code>或异步使用（调用<code i="285">.queue()</code>））。</font></p>
</div>
<div class="paragraph">
<p><font o="374">要在每个客户端基础上禁用Hystrix支持，使用“prototype”范围创建一个vanilla <code i="286">Feign.Builder</code>，例如：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@Configuration
public class FooConfiguration {
    @Bean
	@Scope("prototype")
	public Feign.Builder feignBuilder() {
		return Feign.builder();
	}
}</code></pre>
</div>
</div>
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="375">警告</font></div>
</td>
<td class="content"><font o="376">
在Spring Cloud达尔斯顿发布之前，如果Hystrix在类路径Feign中，默认情况下将所有方法都封装在断路器中。</font><font o="377">这种默认行为在Spring Cloud达尔斯顿更改了赞成选择加入的方式。
</font></td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="spring-cloud-feign-hystrix-fallback"><font o="378">Feign Hystrix回退</font></h3>
<div class="paragraph">
<p><font o="379">Hystrix支持回退的概念：当电路打开或出现错误时执行的默认代码路径。</font><font o="380">要为给定的<code i="287">@FeignClient</code>启用回退，请将<code i="288">fallback</code>属性设置为实现回退的类名。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@FeignClient(name = "hello", fallback = HystrixClientFallback.class)
protected interface HystrixClient {
    @RequestMapping(method = RequestMethod.GET, value = "/hello")
    Hello iFailSometimes();
}

static class HystrixClientFallback implements HystrixClient {
    @Override
    public Hello iFailSometimes() {
        return new Hello("fallback");
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="381">如果需要访问导致回退触发的原因，可以使用<code i="290">@FeignClient</code>内的<code i="289">fallbackFactory</code>属性。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@FeignClient(name = "hello", fallbackFactory = HystrixClientFallbackFactory.class)
protected interface HystrixClient {
	@RequestMapping(method = RequestMethod.GET, value = "/hello")
	Hello iFailSometimes();
}

@Component
static class HystrixClientFallbackFactory implements FallbackFactory&lt;HystrixClient&gt; {
	@Override
	public HystrixClient create(Throwable cause) {
		return new HystrixClientWithFallBackFactory() {
			@Override
			public Hello iFailSometimes() {
				return new Hello("fallback; reason was: " + cause.getMessage());
			}
		};
	}
}</code></pre>
</div>
</div>
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="382">警告</font></div>
</td>
<td class="content"><font o="383">
在Feign中执行回退以及如何执行Hystrix回退是有限制的。</font><font o="384">当前返回<code i="291">com.netflix.hystrix.HystrixCommand</code>和<code i="292">rx.Observable</code>的方法目前不支持回退。
</font></td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_feign_and_code_primary_code"><font o="385">Feign和<code i="293">@Primary</code></font></h3>
<div class="paragraph">
<p><font o="386">当使用Feign与Hystrix回退时，在同一类型的<code i="294">ApplicationContext</code>中有多个bean。</font><font o="387">这将导致<code i="295">@Autowired</code>不起作用，因为没有一个bean，或者标记为主。</font><font o="388">要解决这个问题，Spring Cloud Netflix将所有Feign实例标记为<code i="296">@Primary</code>，因此Spring Framework将知道要注入的bean。</font><font o="389">在某些情况下，这可能是不可取的。</font><font o="390">要关闭此行为，将<code i="298">@FeignClient</code>的<code i="297">primary</code>属性设置为false。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@FeignClient(name = "hello", primary = false)
public interface HelloClient {
	// methods here
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="spring-cloud-feign-inheritance"><font o="391">Feign继承支持</font></h3>
<div class="paragraph">
<p><font o="392">Feign通过单继承接口支持样板apis。</font><font o="393">这样就可以将常用操作分成方便的基本界面。</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="394">UserService.java</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">public interface UserService {

    @RequestMapping(method = RequestMethod.GET, value ="/users/{id}")
    User getUser(@PathVariable("id") long id);
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><font o="395">UserResource.java</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@RestController
public class UserResource implements UserService {

}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><font o="396">UserClient.java</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">package project.user;

@FeignClient("users")
public interface UserClient extends UserService {

}</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="397">注意</font></div>
</td>
<td class="content"><font o="398">
通常不建议在服务器和客户端之间共享接口。</font><font o="399">它引入紧耦合，并且实际上不能以当前形式的Spring MVC（方法参数映射不被继承）起作用。
</font></td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_feign_request_response_compression"><font o="400">Feign请求/响应压缩</font></h3>
<div class="paragraph">
<p><font o="401">您可以考虑启用针对您的Feign请求的请求或响应GZIP压缩。</font><font o="402">您可以通过启用其中一个属性来执行此操作：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">feign.compression.request.enabled=true
feign.compression.response.enabled=true</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="403">Feign请求压缩为您提供与您为Web服务器设置的设置类似的设置：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">feign.compression.request.enabled=true
feign.compression.request.mime-types=text/xml,application/xml,application/json
feign.compression.request.min-request-size=2048</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="404">这些属性可以让您对压缩介质类型和最小请求阈值长度有选择性。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_feign_logging"><font o="405">Feign日志记录</font></h3>
<div class="paragraph">
<p><font o="406">为每个创建的Feign客户端创建一个记录器。</font><font o="407">默认情况下，记录器的名称是用于创建Feign客户端的接口的完整类名。</font><font o="408">Feign日志记录仅响应<code i="299">DEBUG</code>级别。</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="409">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml">logging.level.project.user.UserClient: DEBUG</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="410">您可以为每个客户端配置的<code i="300">Logger.Level</code>对象告诉Feign记录多少。</font><font o="411">选择是：</font></p>
</div>
<div class="ulist">
<ul>
<li>
<p><font o="412"><code i="301">NONE</code>，无记录（</font><strong><font o="412">DEFAULT</font></strong><font o="412">）。</font></p>
</li>
<li>
<p><font o="413"><code i="302">BASIC</code>，只记录请求方法和URL以及响应状态代码和执行时间。</font></p>
</li>
<li>
<p><font o="414"><code i="303">HEADERS</code>，记录基本信息以及请求和响应头。</font></p>
</li>
<li>
<p><font o="415"><code i="304">FULL</code>，记录请求和响应的头文件，正文和元数据。</font></p>
</li>
</ul>
</div>
<div class="paragraph">
<p><font o="416">例如，以下将<code i="305">Logger.Level</code>设置为<code i="306">FULL</code>：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@Configuration
public class FooConfiguration {
    @Bean
    Logger.Level feignLoggerLevel() {
        return Logger.Level.FULL;
    }
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_external_configuration_archaius"><font o="417">外部配置：Archaius</font></h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://github.com/Netflix/archaius"><font></font></a><font o="418">Netflix客户端配置库是</font><a href="https://github.com/Netflix/archaius"><font o="418">Archaius</font></a><font o="418">。</font><font o="419">它是所有Netflix OSS组件用于配置的库。</font><font o="420">Archaius是</font><a href="https://commons.apache.org/proper/commons-configuration"><font o="420">Apache Commons配置</font></a><font o="420">项目的</font><a href="https://commons.apache.org/proper/commons-configuration"><font o="420">扩展</font></a><font o="420">。</font><font o="421">它允许通过轮询源进行更改或将源更改推送到客户端来进行配置更新。</font><font o="422">Archaius使用Dynamic &lt;Type&gt; Property类作为属性的句柄。</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="423">Archaius示例</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">class ArchaiusTest {
    DynamicStringProperty myprop = DynamicPropertyFactory
            .getInstance()
            .getStringProperty("my.prop");

    void doSomething() {
        OtherClass.someMethod(myprop.get());
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="424">Archaius具有自己的配置文件和加载优先级。</font><font o="425">Spring应用程序一般不应直接使用Archaius，而是需要本地配置Netflix工具。</font><font o="426">Spring Cloud有一个Spring环境桥，所以Archaius可以从Spring环境读取属性。</font><font o="427">这允许Spring Boot项目使用正常的配置工具链，同时允许他们在文档中大部分配置Netflix工具。</font></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_router_and_filter_zuul"><font o="428">路由器和过滤器：Zuul</font></h2>
<div class="sectionbody">
<div class="paragraph">
<p><font o="429">路由在微服务体系结构的一个组成部分。</font><font o="430">例如，<code i="307">/</code>可以映射到您的Web应用程序，<code i="308">/api/users</code>映射到用户服务，<code i="309">/api/shop</code>映射到商店服务。</font><a href="https://github.com/Netflix/zuul"><font o="431">Zuul</font></a><font o="431">是Netflix的基于JVM的路由器和服务器端负载均衡器。</font></p>
</div>
<div class="paragraph">
<p><a href="http://www.slideshare.net/MikeyCohen1/edge-architecture-ieee-international-conference-on-cloud-engineering-32240146/27"><font o="432">Netflix使用Zuul</font></a><font o="432">进行以下操作：</font></p>
</div>
<div class="ulist">
<ul>
<li>
<p><font o="433">认证</font></p>
</li>
<li>
<p><font o="434">洞察</font></p>
</li>
<li>
<p><font o="435">压力测试</font></p>
</li>
<li>
<p><font o="436">金丝雀测试</font></p>
</li>
<li>
<p><font o="437">动态路由</font></p>
</li>
<li>
<p><font o="438">服务迁移</font></p>
</li>
<li>
<p><font o="439">负载脱落</font></p>
</li>
<li>
<p><font o="440">安全</font></p>
</li>
<li>
<p><font o="441">静态响应处理</font></p>
</li>
<li>
<p><font o="442">主动/主动流量管理</font></p>
</li>
</ul>
</div>
<div class="paragraph">
<p><font o="443">Zuul的规则引擎允许基本上以任何JVM语言编写规则和过滤器，内置Java和Groovy。</font></p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="444">注意</font></div>
</td>
<td class="content"><font o="445">
配置属性<code i="310">zuul.max.host.connections</code>已被两个新属性<code i="311">zuul.host.maxTotalConnections</code>和<code i="312">zuul.host.maxPerRouteConnections</code>替换，分别默认为200和20。
</font></td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="446">注意</font></div>
</td>
<td class="content"><font o="447">
所有路由的默认Hystrix隔离模式（ExecutionIsolationStrategy）是SEMAPHORE。</font><font o="448">如果此隔离模式是首选，则<code i="313">zuul.ribbonIsolationStrategy</code>可以更改为THREAD。
</font></td>
</tr>
</tbody></table>
</div>
<div class="sect2">
<h3 id="netflix-zuul-starter"><font o="449">如何加入Zuul</font></h3>
<div class="paragraph">
<p><font o="450">要在项目中包含Zuul，请使用组<code i="314">org.springframework.cloud</code>和工件id <code i="315">spring-cloud-starter-zuul</code>的起始器。</font><font o="451">有关</font><font o="451">
使用当前的Spring Cloud发布列表设置构建系统的详细信息，</font><font o="451">请参阅</font><a href="https://projects.spring.io/spring-cloud/"><font o="451">Spring Cloud项目页面</font></a><font o="451">。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="netflix-zuul-reverse-proxy"><font o="452">嵌入式Zuul反向代理</font></h3>
<div class="paragraph">
<p><font o="453">Spring Cloud已经创建了一个嵌入式Zuul代理，以简化UI应用程序想要代理对一个或多个后端服务的呼叫的非常常见的用例的开发。</font><font o="454">此功能对于用户界面对其所需的后端服务进行代理是有用的，避免了对所有后端独立管理CORS和验证问题的需求。</font></p>
</div>
<div class="paragraph">
<p><font o="455">要启用它，使用<code i="316">@EnableZuulProxy</code>注释Spring Boot主类，并将本地调用转发到相应的服务。</font><font o="456">按照惯例，具有ID“用户”的服务将接收来自位于<code i="317">/users</code>的代理（具有前缀stripped）的请求。</font><font o="457">代理使用Ribbon来定位要通过发现转发的实例，并且所有请求都以
 </font><a href="#hystrix-fallbacks-for-routes"><font o="457">hystrix命令执行</font></a><font o="457">，所以故障将显示在Hystrix指标中，一旦电路打开，代理将不会尝试联系服务。</font></p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="458">注意</font></div>
</td>
<td class="content"><font o="459">
Zuul启动器不包括发现客户端，因此对于基于服务ID的路由，您还需要在类路径中提供其中一个路由（例如Eureka）。
</font></td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><font o="460">要跳过自动添加的服务，请将<code i="318">zuul.ignored-services</code>设置为服务标识模式列表。</font><font o="461">如果一个服务匹配一个被忽略的模式，而且包含在明确配置的路由映射中，那么它将被无符号。</font><font o="462">例：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="463">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml"> zuul:
  ignoredServices: '*'
  routes:
    users: /myusers/**</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="464">在此示例中，</font><strong><font o="464">除</font></strong><font o="464"> “用户” </font><strong><font o="464">之外</font></strong><font o="464">，所有服务都被忽略</font><font o="464">。</font></p>
</div>
<div class="paragraph">
<p><font o="465">要扩充或更改代理路由，可以添加如下所示的外部配置：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="466">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml"> zuul:
  routes:
    users: /myusers/**</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="467">这意味着对“/ myusers”的http呼叫转发到“用户”服务（例如“/ myusers / 101”转发到“/ 101”）。</font></p>
</div>
<div class="paragraph">
<p><font o="468">要获得对路由的更细粒度的控制，您可以独立地指定路径和serviceId：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="469">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml"> zuul:
  routes:
    users:
      path: /myusers/**
      serviceId: users_service</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="470">这意味着对“/ myusers”的http呼叫转发到“users_service”服务。</font><font o="471">路由必须有一个“路径”，可以指定为蚂蚁样式模式，所以“/ myusers / *”只匹配一个级别，但“/ myusers / **”分层匹配。</font></p>
</div>
<div class="paragraph">
<p><font o="472">后端的位置可以被指定为“serviceId”（用于发现的服务）或“url”（对于物理位置），例如</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="473">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml"> zuul:
  routes:
    users:
      path: /myusers/**
      url: http://example.com/users_service</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="474">这些简单的URL路由不会被执行为<code i="319">HystrixCommand</code>，也不能使用Ribbon对多个URL进行负载平衡。</font><font o="475">为此，请指定服务路由并为serviceId配置Ribbon客户端（目前需要在Ribbon中禁用Eureka支持：详见</font><a href="#spring-cloud-ribbon-without-eureka"><font o="475">上文</font></a><font o="475">），例如</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="476">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml">zuul:
  routes:
    users:
      path: /myusers/**
      serviceId: users

ribbon:
  eureka:
    enabled: false

users:
  ribbon:
    listOfServers: example.com,google.com</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="477">您可以使用regexmapper在serviceId和路由之间提供约定。</font><font o="478">它使用名为group的正则表达式从serviceId中提取变量并将它们注入到路由模式中。</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="479">ApplicationConfiguration.java</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@Bean
public PatternServiceRouteMapper serviceRouteMapper() {
    return new PatternServiceRouteMapper(
        "(?&lt;name&gt;^.+)-(?&lt;version&gt;v.+$)",
        "${version}/${name}");
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="480">这意味着serviceId“myusers-v1”将被映射到路由“/ v1 / myusers / **”。</font><font o="481">任何正则表达式都被接受，但所有命名组都必须存在于servicePattern和routePattern中。</font><font o="482">如果servicePattern与serviceId不匹配，则使用默认行为。</font><font o="483">在上面的示例中，serviceId“myusers”将被映射到路由“/ myusers / **”（检测不到版本）此功能默认禁用，仅适用于已发现的服务。</font></p>
</div>
<div class="paragraph">
<p><font o="484">要为所有映射添加前缀，请将<code i="320">zuul.prefix</code>设置为一个值，例如<code i="321">/api</code>。</font><font o="485">默认情况下，请求被转发之前，代理前缀被删除（使用<code i="322">zuul.stripPrefix=false</code>切换此行为）。</font><font o="486">您还可以关闭从各路线剥离服务特定的前缀，例如</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="487">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml"> zuul:
  routes:
    users:
      path: /myusers/**
      stripPrefix: false</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="488">注意</font></div>
</td>
<td class="content"><font o="489">
<code i="323">zuul.stripPrefix</code>仅适用于<code i="324">zuul.prefix</code>中设置的前缀。</font><font o="490">它对给定路由<code i="325">path</code>中定义的前缀有影响。
</font></td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><font o="491">在本示例中，对“/ myusers / 101”的请求将转发到“/ myusers / 101”上的“users”服务。</font></p>
</div>
<div class="paragraph">
<p><font o="492"><code i="326">zuul.routes</code>条目实际上绑定到类型为<code i="327">ZuulProperties</code>的对象。</font><font o="493">如果您查看该对象的属性，您将看到它还具有“可重试”标志。</font><font o="494">将该标志设置为“true”以使Ribbon客户端自动重试失败的请求（如果需要，可以使用Ribbon客户端配置修改重试操作的参数）。</font></p>
</div>
<div class="paragraph">
<p><font o="495">默认情况下，将<code i="328">X-Forwarded-Host</code>标头添加到转发的请求中。</font><font o="496">要关闭set <code i="329">zuul.addProxyHeaders = false</code>。</font><font o="497">默认情况下，前缀路径被删除，对后端的请求会拾取一个标题“X-Forwarded-Prefix”（上述示例中的“/ myusers”）。</font></p>
</div>
<div class="paragraph">
<p><font o="498">如果您设置默认路由（“/”），例如<code i="331">zuul.route.home:
/</code>将路由所有流量（即“/ **”）到“home”服务，则具有<code i="330">@EnableZuulProxy</code>的应用程序可以充当独立服务器。</font></p>
</div>
<div class="paragraph">
<p><font o="499">如果需要更细粒度的忽略，可以指定要忽略的特定模式。</font><font o="500">在路由位置处理开始时评估这些模式，这意味着前缀应包含在模式中以保证匹配。</font><font o="501">忽略的模式跨越所有服务，并取代任何其他路由规范。</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="502">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml"> zuul:
  ignoredPatterns: /**/admin/**
  routes:
    users: /myusers/**</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="503">这意味着诸如“/ myusers / 101”的所有呼叫将被转发到“用户”服务上的“/ 101”。</font><font o="504">但是包含“/ admin /”的呼叫将无法解决。</font></p>
</div>
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="505">警告</font></div>
</td>
<td class="content"><font o="506">
如果您需要您的路由保留订单，则需要使用YAML文件，因为使用属性文件将会丢失订购。</font><font o="507">例如：
</font></td>
</tr>
</tbody></table>
</div>
<div class="listingblock">
<div class="title"><font o="508">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml"> zuul:
  routes:
    users:
      path: /myusers/**
    legacy:
      path: /**</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="509">如果要使用属性文件，<code i="332">legacy</code>路径可能会在<code i="333">users</code>路径前面展开，从而使<code i="334">users</code>路径不可达。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_zuul_http_client"><font o="510">Zuul Http客户端</font></h3>
<div class="paragraph">
<p><font o="511">zuul使用的默认HTTP客户端现在由Apache HTTP Client支持，而不是不推荐使用的Ribbon <code i="335">RestClient</code>。</font><font o="512">分别使用<code i="336">RestClient</code>或使用<code i="337">okhttp3.OkHttpClient</code>集合<code i="338">ribbon.restclient.enabled=true</code>或<code i="339">ribbon.okhttp.enabled=true</code>。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_cookies_and_sensitive_headers"><font o="513">Cookie和敏感标题</font></h3>
<div class="paragraph">
<p><font o="514">在同一个系统中的服务之间共享标题是可行的，但是您可能不希望敏感标头泄漏到外部服务器的下游。</font><font o="515">您可以在路由配置中指定被忽略头文件列表。</font><font o="516">Cookies起着特殊的作用，因为它们在浏览器中具有明确的语义，并且它们总是被视为敏感的。</font><font o="517">如果代理的消费者是浏览器，则下游服务的cookie也会导致用户出现问题，因为它们都被混淆（所有下游服务看起来都是来自同一个地方）。</font></p>
</div>
<div class="paragraph">
<p><font o="518">如果您对服务的设计非常谨慎，例如，如果只有一个下游服务设置了Cookie，那么您可能可以让他们从后台一直到调用者。</font><font o="519">另外，如果您的代理设置cookie和所有后端服务都是同一系统的一部分，那么简单地共享它们就可以自然（例如使用Spring Session将它们链接到一些共享状态）。</font><font o="520">除此之外，由下游服务设置的任何Cookie可能对呼叫者来说都不是很有用，因此建议您将（至少）“Set-Cookie”和“Cookie”设置为不属于您的域名。</font><font o="521">即使</font><strong><font o="521">是</font></strong><font o="521">属于您域名</font><font o="521">的路线</font><font o="521">，请尝试仔细考虑允许Cookie在代理之间流动的含义。</font></p>
</div>
<div class="paragraph">
<p><font o="522">灵敏头可以配置为每个路由的逗号分隔列表，例如</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="523">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml"> zuul:
  routes:
    users:
      path: /myusers/**
      sensitiveHeaders: Cookie,Set-Cookie,Authorization
      url: https://downstream</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="524">注意</font></div>
</td>
<td class="content"><font o="525">
这是<code i="340">sensitiveHeaders</code>的默认值，因此您不需要设置它，除非您希望它不同。</font><font o="526">注意这是Spring Cloud Netflix 1.1中的新功能（在1.0中，用户无法控制标题，所有Cookie都在两个方向上流动）。
</font></td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><font o="527"><code i="341">sensitiveHeaders</code>是一个黑名单，默认值不为空，因此要使Zuul发送所有标头（“被忽略”除外），您必须将其显式设置为空列表。</font><font o="528">如果您要将Cookie或授权标头传递到后端，这是必要的。</font><font o="529">例：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="530">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml"> zuul:
  routes:
    users:
      path: /myusers/**
      sensitiveHeaders:
      url: https://downstream</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="531">也可以通过设置<code i="342">zuul.sensitiveHeaders</code>来全局设置敏感标题。</font><font o="532">如果在路由上设置了<code i="343">sensitiveHeaders</code>，这将覆盖全局<code i="344">sensitiveHeaders</code>设置。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_ignored_headers"><font o="533">被忽略的标题</font></h3>
<div class="paragraph">
<p><font o="534">除了每个路由的敏感标头，您还可以在与下游服务交互期间为应该丢弃（请求和响应）的值设置<code i="345">zuul.ignoredHeaders</code>的全局值。</font><font o="535">默认情况下，如果Spring Security不在类路径上，则它们是空的，否则它们被初始化为Spring Security指定的一组众所周知的“安全”头（例如涉及缓存）。</font><font o="536">在这种情况下的假设是下游服务可能也添加这些头，我们希望代理的值。</font><font o="537">为了不丢弃这些众所周知的安全头，万一Spring Security位于类路径上，您可以将<code i="346">zuul.ignoreSecurityHeaders</code>设置为<code i="347">false</code>。</font><font o="538">如果您禁用了Spring Security中的HTTP安全响应头，并希望下载服务提供的值，这将非常有用</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_the_routes_endpoint"><font o="539">路线端点</font></h3>
<div class="paragraph">
<p><font o="540">如果您在Spring Boot Actuator中使用<code i="348">@EnableZuulProxy</code>，则将启用（默认情况下）另一个端点，通过HTTP可以使用<code i="349">/routes</code>。</font><font o="541">到此端点的GET将返回映射路由的列表。</font><font o="542">POST将强制刷新现有路由（例如，如果服务目录中有更改）。</font><font o="543">您可以通过将<code i="350">endpoints.routes.enabled</code>设置为<code i="351">false</code>来禁用此端点。</font></p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="544">注意</font></div>
</td>
<td class="content"><font o="545">
路由应自动响应服务目录中的更改，但POST到/路由是强制更改立即发生的一种方式。
</font></td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_strangulation_patterns_and_local_forwards"><font o="546">扼杀模式和本地前进</font></h3>
<div class="paragraph">
<p><font o="547">迁移现有应用程序或API时的常见模式是“扼杀”旧端点，用不同的实现慢慢替换它们。</font><font o="548">Zuul代理是一个有用的工具，因为您可以使用它来处理来自旧端点的客户端的所有流量，但将一些请求重定向到新端点。</font></p>
</div>
<div class="paragraph">
<p><font o="549">示例配置：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="550">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml"> zuul:
  routes:
    first:
      path: /first/**
      url: http://first.example.com
    second:
      path: /second/**
      url: forward:/second
    third:
      path: /third/**
      url: forward:/3rd
    legacy:
      path: /**
      url: http://legacy.example.com</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="551">在这个例子中，我们扼杀了“遗留”应用程序，该应用程序映射到所有与其他模式不匹配的请求。</font><font o="552"><code i="352">/first/**</code>中的路径已被提取到具有外部URL的新服务中。</font><font o="553">并且<code i="353">/second/**</code>中的路径被转发，以便它们可以在本地处理，例如使用正常的Spring <code i="354">@RequestMapping</code>。</font><font o="554"><code i="355">/third/**</code>中的路径也被转发，但使用不同的前缀（即<code i="356">/third/foo</code>转发到<code i="357">/3rd/foo</code>）。</font></p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="555">注意</font></div>
</td>
<td class="content"><font o="556">
被忽略的模式并不完全被忽略，它们只是不被代理处理（因此它们也被有效地转发到本地）。
</font></td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_uploading_files_through_zuul"><font o="557">通过Zuul上传文件</font></h3>
<div class="paragraph">
<p><font o="558">如果您<code i="358">@EnableZuulProxy</code>您可以使用代理路径上传文件，只要文件很小，它就应该工作。</font><font o="559">对于大文件，有一个替代路径绕过“/ zuul / *”中的Spring <code i="359">DispatcherServlet</code>（以避免多部分处理）。</font><font o="560">那么如果<code i="360">zuul.routes.customers=/customers/**</code>然后你可以将大文件发送到“/ zuul / customers / *”。</font><font o="561">servlet路径通过<code i="361">zuul.servletPath</code>进行外部化。</font><font o="562">如果代理路由引导您通过Ribbon负载均衡器，例如，超大文件也将需要提升超时设置</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="563">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 60000
ribbon:
  ConnectTimeout: 3000
  ReadTimeout: 60000</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="564">请注意，要使用大型文件进行流式传输，您需要在请求中使用分块编码（某些浏览器默认情况下不会执行）。</font><font o="565">例如在命令行：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="notranslate">$ curl -v -H "Transfer-Encoding: chunked" \
    -F "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="583e31343d6518352134392a3f3d76312b37">[email&#160;protected]</a>" localhost:9999/zuul/simple/file</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_query_string_encoding"><font o="566">查询字符串编码</font></h3>
<div class="paragraph">
<p><font o="567">处理传入请求时，查询参数被解码，以便它们可用于在Zuul过滤器中进行可能的修改。</font><font o="568">然后在路由过滤器中构建后端请求时重新编码它们。</font><font o="569">如果使用Javascript的<code i="362">encodeURIComponent()</code>方法编码，结果可能与原始输入不同。</font><font o="570">虽然这在大多数情况下不会出现任何问题，但一些Web服务器可以用复杂查询字符串的编码来挑选。</font></p>
</div>
<div class="paragraph">
<p><font o="571">要强制查询字符串的原始编码，可以将特殊标志传递给<code i="363">ZuulProperties</code>，以便使用<code i="364">HttpServletRequest::getQueryString</code>方法将查询字符串视为原样：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="572">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml"> zuul:
  forceOriginalQueryStringEncoding: true</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong><font o="573">注意：</font></strong><font o="573">此特殊标志仅适用于<code i="365">SimpleHostRoutingFilter</code>，您可以使用<code i="366">RequestContext.getCurrentContext().setRequestQueryParams(someOverriddenParameters)</code>轻松覆盖查询参数，因为查询字符串现在直接在原始<code i="367">HttpServletRequest</code>上获取。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_plain_embedded_zuul"><font o="574">普通嵌入式Zuul</font></h3>
<div class="paragraph">
<p><font o="575">如果您使用<code i="368">@EnableZuulServer</code>（而不是<code i="369">@EnableZuulProxy</code>），您也可以运行不带代理的Zuul服务器，或选择性地切换代理平台的部分。</font><font o="576">您添加到<code i="370">ZuulFilter</code>类型的应用程序的任何bean将自动安装，与<code i="371">@EnableZuulProxy</code>一样，但不会自动添加任何代理过滤器。</font></p>
</div>
<div class="paragraph">
<p><font o="577">在这种情况下，仍然通过配置“zuul.routes。*”来指定进入Zuul服务器的路由，但没有服务发现，没有代理，所以“serviceId”和“url”设置将被忽略。</font><font o="578">例如：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="579">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml"> zuul:
  routes:
    api: /api/**</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="580">将“/ api / **”中的所有路径映射到Zuul过滤器链。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_disable_zuul_filters"><font o="581">禁用Zuul过滤器</font></h3>
<div class="paragraph">
<p><font o="582">在Spring Cloud的Zuul中，在代理和服务器模式下默认启用了多个<code i="372">ZuulFilter</code> bean。</font><font o="583">有关</font><font o="583">启用的可能过滤器，</font><font o="583">请参阅</font><a href="https://github.com/spring-cloud/spring-cloud-netflix/tree/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/zuul/filters"><font o="583">zuul过滤器包</font></a><font o="583">。</font><font o="584">如果要禁用它，只需设置<code i="373">zuul.&lt;SimpleClassName&gt;.&lt;filterType&gt;.disable=true</code>。</font><font o="585">按照惯例，<code i="374">filters</code>之后的包是Zuul过滤器类型。</font><font o="586">例如，禁用<code i="375">org.springframework.cloud.netflix.zuul.filters.post.SendResponseFilter</code>设置<code i="376">zuul.SendResponseFilter.post.disable=true</code>。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="hystrix-fallbacks-for-routes"><font o="587">提供Hystrix路由回退</font></h3>
<div class="paragraph">
<p><font o="588">当Zuul中给定路由的电路跳闸时，您可以通过创建类型为<code i="377">ZuulFallbackProvider</code>的bean来提供回退响应。</font><font o="589">在这个bean中，您需要指定回退的路由ID，并提供<code i="378">ClientHttpResponse</code>作为回退返回。</font><font o="590">这是一个非常简单的<code i="379">ZuulFallbackProvider</code>实现。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">class MyFallbackProvider implements ZuulFallbackProvider {
    @Override
    public String getRoute() {
        return "customers";
    }

    @Override
    public ClientHttpResponse fallbackResponse() {
        return new ClientHttpResponse() {
            @Override
            public HttpStatus getStatusCode() throws IOException {
                return HttpStatus.OK;
            }

            @Override
            public int getRawStatusCode() throws IOException {
                return 200;
            }

            @Override
            public String getStatusText() throws IOException {
                return "OK";
            }

            @Override
            public void close() {

            }

            @Override
            public InputStream getBody() throws IOException {
                return new ByteArrayInputStream("fallback".getBytes());
            }

            @Override
            public HttpHeaders getHeaders() {
                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.APPLICATION_JSON);
                return headers;
            }
        };
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="591">这里是路由配置的样子。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml">zuul:
  routes:
    customers: /customers/**</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="592">如果要为所有路由提供缺省回退，您可以创建一个类型为<code i="380">ZuulFallbackProvider</code>的bean，并且<code i="381">getRoute</code>方法返回<code i="382">*</code>或<code i="383">null</code>。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">class MyFallbackProvider implements ZuulFallbackProvider {
    @Override
    public String getRoute() {
        return "*";
    }

    @Override
    public ClientHttpResponse fallbackResponse() {
        return new ClientHttpResponse() {
            @Override
            public HttpStatus getStatusCode() throws IOException {
                return HttpStatus.OK;
            }

            @Override
            public int getRawStatusCode() throws IOException {
                return 200;
            }

            @Override
            public String getStatusText() throws IOException {
                return "OK";
            }

            @Override
            public void close() {

            }

            @Override
            public InputStream getBody() throws IOException {
                return new ByteArrayInputStream("fallback".getBytes());
            }

            @Override
            public HttpHeaders getHeaders() {
                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.APPLICATION_JSON);
                return headers;
            }
        };
    }
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="zuul-developer-guide"><font o="593">Zuul开发人员指南</font></h3>
<div class="paragraph">
<p><font o="594">有关Zuul如何工作的一般概述，请参阅</font><a href="https://github.com/Netflix/zuul/wiki/How-it-Works"><font o="594">Zuul维基</font></a><font o="594">。</font></p>
</div>
<div class="sect3">
<h4 id="_the_zuul_servlet"><font o="595">Zuul Servlet</font></h4>
<div class="paragraph">
<p><font o="596">Zuul实现为Servlet。</font><font o="597">对于一般情况，Zuul嵌入到Spring调度机制中。</font><font o="598">这允许Spring MVC控制路由。</font><font o="599">在这种情况下，Zuul配置为缓冲请求。</font><font o="600">如果需要通过Zuul缓存请求（例如大文件上传），则Servlet也将安装在Spring Dispatcher之外。</font><font o="601">默认情况下，它位于<code i="384">/zuul</code>。</font><font o="602">可以使用<code i="385">zuul.servlet-path</code>属性更改此路径。</font></p>
</div>
</div>
<div class="sect3">
<h4 id="_zuul_requestcontext"><font o="603">Zuul RequestContext</font></h4>
<div class="paragraph">
<p><font o="604">要在过滤器之间传递信息，Zuul使用a </font><a href="https://github.com/Netflix/zuul/blob/1.x/zuul-core/src/main/java/com/netflix/zuul/context/RequestContext.java"><code>RequestContext</code></a><font o="604">。</font><font o="605">其数据按每个请求特定的<code i="386">ThreadLocal</code>保存。</font><font o="606">有关在哪里路由请求，错误和实际<code i="387">HttpServletRequest</code>和<code i="388">HttpServletResponse</code>的信息存储在那里。</font><font o="607"><code i="389">RequestContext</code>扩展<code i="390">ConcurrentHashMap</code>，所以任何东西都可以存储在上下文中。</font><a href="https://github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/zuul/filters/support/FilterConstants.java"><code>FilterConstants</code></a><font o="608">包含由Spring Cloud Netflix安装的过滤器使用的密钥（稍后再说明）。</font></p>
</div>
</div>
<div class="sect3">
<h4 id="__code_enablezuulproxy_code_vs_code_enablezuulserver_code"><font o="609"><code i="391">@EnableZuulProxy</code>与<code i="392">@EnableZuulServer</code></font></h4>
<div class="paragraph">
<p><font o="610">Spring Cloud Netflix会根据使用哪个注释来启用Zuul安装多个过滤器。</font><font o="611"><code i="393">@EnableZuulProxy</code>是<code i="394">@EnableZuulServer</code>的超集。</font><font o="612">换句话说，<code i="395">@EnableZuulProxy</code>包含<code i="396">@EnableZuulServer</code>安装的所有过滤器。</font><font o="613">“代理”中的其他过滤器启用路由功能。</font><font o="614">如果你想要一个“空白”Zuul，你应该使用<code i="397">@EnableZuulServer</code>。</font></p>
</div>
</div>
<div class="sect3">
<h4 id="__code_enablezuulserver_code_filters"><font o="615"><code i="398">@EnableZuulServer</code>过滤器</font></h4>
<div class="paragraph">
<p><font o="616">创建从Spring Boot配置文件加载路由定义的<code i="399">SimpleRouteLocator</code>。</font></p>
</div>
<div class="paragraph">
<p><font o="617">安装了以下过滤器（像普通的Spring Bean）：</font></p>
</div>
<div class="paragraph">
<p><font o="618">前置过滤器</font></p>
</div>
<div class="ulist">
<ul>
<li>
<p><font o="619"><code i="400">ServletDetectionFilter</code>：检测请求是否通过Spring调度程序。</font><font o="620">使用键<code i="401">FilterConstants.IS_DISPATCHER_SERVLET_REQUEST_KEY</code>设置布尔值。</font></p>
</li>
<li>
<p><font o="621"><code i="402">FormBodyWrapperFilter</code>：解析表单数据，并为下游请求重新编码它。</font></p>
</li>
<li>
<p><font o="622"><code i="403">DebugFilter</code>：如果设置<code i="404">debug</code>请求参数，则此过滤器将<code i="405">RequestContext.setDebugRouting()</code>和<code i="406">RequestContext.setDebugRequest()</code>设置为true。</font></p>
</li>
</ul>
</div>
<div class="paragraph">
<p><font o="623">路由过滤器</font></p>
</div>
<div class="ulist">
<ul>
<li>
<p><font o="624"><code i="407">SendForwardFilter</code>：此过滤器使用Servlet <code i="408">RequestDispatcher</code>转发请求。</font><font o="625">转发位置存储在<code i="409">RequestContext</code>属性<code i="410">FilterConstants.FORWARD_TO_KEY</code>中。</font><font o="626">这对于转发到当前应用程序中的端点很有用。</font></p>
</li>
</ul>
</div>
<div class="paragraph">
<p><font o="627">过滤器：</font></p>
</div>
<div class="ulist">
<ul>
<li>
<p><font o="628"><code i="411">SendResponseFilter</code>：将代理请求的响应写入当前响应。</font></p>
</li>
</ul>
</div>
<div class="paragraph">
<p><font o="629">错误过滤器：</font></p>
</div>
<div class="ulist">
<ul>
<li>
<p><font o="630"><code i="412">SendErrorFilter</code>：如果<code i="413">RequestContext.getThrowable()</code>不为null，则转发到/错误（默认情况下）。</font><font o="631">可以通过设置<code i="415">error.path</code>属性来更改默认转发路径（<code i="414">/error</code>）。</font></p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="__code_enablezuulproxy_code_filters"><font o="632"><code i="416">@EnableZuulProxy</code>过滤器</font></h4>
<div class="paragraph">
<p><font o="633">创建从<code i="418">DiscoveryClient</code>（如Eureka）以及属性加载路由定义的<code i="417">DiscoveryClientRouteLocator</code>。</font><font o="634">从<code i="420">DiscoveryClient</code>的每个<code i="419">serviceId</code>创建路由。</font><font o="635">随着新服务的添加，路由将被刷新。</font></p>
</div>
<div class="paragraph">
<p><font o="636">除了上述过滤器之外，还安装了以下过滤器（如通常的Spring Bean）：</font></p>
</div>
<div class="paragraph">
<p><font o="637">前置过滤器</font></p>
</div>
<div class="ulist">
<ul>
<li>
<p><font o="638"><code i="421">PreDecorationFilter</code>：此过滤器根据提供的<code i="422">RouteLocator</code>确定在哪里和如何路由。</font><font o="639">它还为下游请求设置各种与代理相关的头。</font></p>
</li>
</ul>
</div>
<div class="paragraph">
<p><font o="640">路由过滤器</font></p>
</div>
<div class="ulist">
<ul>
<li>
<p><font o="641"><code i="423">RibbonRoutingFilter</code>：此过滤器使用Ribbon，Hystrix和可插拔HTTP客户端发送请求。</font><font o="642">服务ID位于<code i="424">RequestContext</code>属性<code i="425">FilterConstants.SERVICE_ID_KEY</code>中。</font><font o="643">此过滤器可以使用不同的HTTP客户端。</font><font o="644">他们是：</font></p>
<div class="ulist">
<ul>
<li>
<p><font o="645">Apache <code i="426">HttpClient</code>。</font><font o="646">这是默认的客户端。</font></p>
</li>
<li>
<p><font o="647">Squareup <code i="427">OkHttpClient</code> v3。</font><font o="648">这通过在类路径上设置<code i="428">com.squareup.okhttp3:okhttp</code>库并设置<code i="429">ribbon.okhttp.enabled=true</code>来启用。</font></p>
</li>
<li>
<p><font o="649">Netflix Ribbon HTTP客户端。</font><font o="650">这可以通过设置<code i="430">ribbon.restclient.enabled=true</code>来启用。</font><font o="651">这个客户端有限制，比如它不支持PATCH方法，还有内置的重试。</font></p>
</li>
</ul>
</div>
</li>
<li>
<p><font o="652"><code i="431">SimpleHostRoutingFilter</code>：此过滤器通过Apache HttpClient发送请求到预定的URL。</font><font o="653">URL位于<code i="432">RequestContext.getRouteHost()</code>。</font></p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_custom_zuul_filter_examples"><font o="654">自定义Zuul过滤示例</font></h4>
<div class="paragraph">
<p><font o="655">以下大部分以下“如何撰写”示例都包含</font><a href="https://github.com/spring-cloud-samples/sample-zuul-filters"><font o="655">示例Zuul过滤器</font></a><font o="655">项目。</font><font o="656">还有一些操作该存储库中的请求或响应正文的例子。</font></p>
</div>
</div>
<div class="sect3">
<h4 id="_how_to_write_a_pre_filter"><font o="657">如何编写预过滤器</font></h4>
<div class="paragraph">
<p><font o="658">前置过滤器用于设置<code i="433">RequestContext</code>中的数据，用于下游的过滤器。</font><font o="659">主要用例是设置路由过滤器所需的信息。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">public class QueryParamPreFilter extends ZuulFilter {
	@Override
	public int filterOrder() {
		return PRE_DECORATION_FILTER_ORDER - 1; // run before PreDecoration
	}

	@Override
	public String filterType() {
		return PRE_TYPE;
	}

	@Override
	public boolean shouldFilter() {
		RequestContext ctx = RequestContext.getCurrentContext();
		return !ctx.containsKey(FORWARD_TO_KEY) // a filter has already forwarded
				&amp;&amp; !ctx.containsKey(SERVICE_ID_KEY); // a filter has already determined serviceId
	}
    @Override
    public Object run() {
        RequestContext ctx = RequestContext.getCurrentContext();
		HttpServletRequest request = ctx.getRequest();
		if (request.getParameter("foo") != null) {
		    // put the serviceId in `RequestContext`
    		ctx.put(SERVICE_ID_KEY, request.getParameter("foo"));
    	}
        return null;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="660">上面的过滤器从<code i="435">foo</code>请求参数填充<code i="434">SERVICE_ID_KEY</code>。</font><font o="661">实际上，做这种直接映射并不是一个好主意，而是应该从<code i="436">foo</code>的值中查找服务ID。</font></p>
</div>
<div class="paragraph">
<p><font o="662">现在<code i="437">SERVICE_ID_KEY</code>已经填满，<code i="438">PreDecorationFilter</code>将不会运行，<code i="439">RibbonRoutingFilter</code>将会运行。</font><font o="663">如果您想要路由到完整的网址，请调用<code i="440">ctx.setRouteHost(url)</code>。</font></p>
</div>
<div class="paragraph">
<p><font o="664">要修改路由过滤器将转发的路径，请设置<code i="441">REQUEST_URI_KEY</code>。</font></p>
</div>
</div>
<div class="sect3">
<h4 id="_how_to_write_a_route_filter"><font o="665">如何编写路由过滤器</font></h4>
<div class="paragraph">
<p><font o="666">路由过滤器在预过滤器之后运行，并用于向其他服务发出请求。</font><font o="667">这里的大部分工作是将请求和响应数据转换到客户端所需的模型。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">public class OkHttpRoutingFilter extends ZuulFilter {
	@Autowired
	private ProxyRequestHelper helper;

	@Override
	public String filterType() {
		return ROUTE_TYPE;
	}

	@Override
	public int filterOrder() {
		return SIMPLE_HOST_ROUTING_FILTER_ORDER - 1;
	}

	@Override
	public boolean shouldFilter() {
		return RequestContext.getCurrentContext().getRouteHost() != null
				&amp;&amp; RequestContext.getCurrentContext().sendZuulResponse();
	}

    @Override
    public Object run() {
		OkHttpClient httpClient = new OkHttpClient.Builder()
				// customize
				.build();

		RequestContext context = RequestContext.getCurrentContext();
		HttpServletRequest request = context.getRequest();

		String method = request.getMethod();

		String uri = this.helper.buildZuulRequestURI(request);

		Headers.Builder headers = new Headers.Builder();
		Enumeration&lt;String&gt; headerNames = request.getHeaderNames();
		while (headerNames.hasMoreElements()) {
			String name = headerNames.nextElement();
			Enumeration&lt;String&gt; values = request.getHeaders(name);

			while (values.hasMoreElements()) {
				String value = values.nextElement();
				headers.add(name, value);
			}
		}

		InputStream inputStream = request.getInputStream();

		RequestBody requestBody = null;
		if (inputStream != null &amp;&amp; HttpMethod.permitsRequestBody(method)) {
			MediaType mediaType = null;
			if (headers.get("Content-Type") != null) {
				mediaType = MediaType.parse(headers.get("Content-Type"));
			}
			requestBody = RequestBody.create(mediaType, StreamUtils.copyToByteArray(inputStream));
		}

		Request.Builder builder = new Request.Builder()
				.headers(headers.build())
				.url(uri)
				.method(method, requestBody);

		Response response = httpClient.newCall(builder.build()).execute();

		LinkedMultiValueMap&lt;String, String&gt; responseHeaders = new LinkedMultiValueMap&lt;&gt;();

		for (Map.Entry&lt;String, List&lt;String&gt;&gt; entry : response.headers().toMultimap().entrySet()) {
			responseHeaders.put(entry.getKey(), entry.getValue());
		}

		this.helper.setResponse(response.code(), response.body().byteStream(),
				responseHeaders);
		context.setRouteHost(null); // prevent SimpleHostRoutingFilter from running
		return null;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="668">上述过滤器将Servlet请求信息转换为OkHttp3请求信息，执行HTTP请求，然后将OkHttp3响应信息转换为Servlet响应。</font><font o="669">警告：此过滤器可能有错误，但功能不正确。</font></p>
</div>
</div>
<div class="sect3">
<h4 id="_how_to_write_a_post_filter"><font o="670">如何编写过滤器</font></h4>
<div class="paragraph">
<p><font o="671">后置过滤器通常操纵响应。</font><font o="672">在下面的过滤器中，我们添加一个随机<code i="442">UUID</code>作为<code i="443">X-Foo</code>头。</font><font o="673">其他操作，如转换响应体，要复杂得多，计算密集。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">public class AddResponseHeaderFilter extends ZuulFilter {
	@Override
	public String filterType() {
		return POST_TYPE;
	}

	@Override
	public int filterOrder() {
		return SEND_RESPONSE_FILTER_ORDER - 1;
	}

	@Override
	public boolean shouldFilter() {
		return true;
	}

	@Override
	public Object run() {
		RequestContext context = RequestContext.getCurrentContext();
    	HttpServletResponse servletResponse = context.getResponse();
		servletResponse.addHeader("X-Foo", UUID.randomUUID().toString());
		return null;
	}
}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_how_zuul_errors_work"><font o="674">Zuul错误如何工作</font></h4>
<div class="paragraph">
<p><font o="675">如果在Zuul过滤器生命周期的任何部分抛出异常，则会执行错误过滤器。</font><font o="676"><code i="444">SendErrorFilter</code>只有<code i="445">RequestContext.getThrowable()</code>不是<code i="446">null</code>才会运行。</font><font o="677">然后在请求中设置特定的<code i="447">javax.servlet.error.*</code>属性，并将请求转发到Spring Boot错误页面。</font></p>
</div>
</div>
<div class="sect3">
<h4 id="_zuul_eager_application_context_loading"><font o="678">Zuul渴望应用程序上下文加载</font></h4>
<div class="paragraph">
<p><font o="679">Zuul内部使用Ribbon调用远程URL，并且Ribbon客户端默认在第一次调用时由Spring Cloud加载。</font><font o="680">可以使用以下配置更改Zuul的此行为，并将导致在应用程序启动时，子Ribbon相关的应用程序上下文正在加载。</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="681">application.yml</font></div>
<div class="content">
<pre class="notranslate">zuul:
  ribbon:
    eager-load:
      enabled: true</pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_polyglot_support_with_sidecar"><font o="682">Polyglot支持Sidecar</font></h2>
<div class="sectionbody">
<div class="paragraph">
<p><font o="683">你有非jvm语言你想要利用Eureka，Ribbon和Config Server？</font><a href="https://github.com/Netflix/Prana"><font o="684">Netflix Prana</font></a><font o="684">启发了Spring Cloud Netflix Sidecar
 </font><font o="684">。</font><font o="685">它包含一个简单的http api来获取给定服务的所有实例（即主机和端口）。</font><font o="686">您还可以通过从Eureka获取其路由条目的嵌入式Zuul代理来代理服务调用。</font><font o="687">可以通过主机查找或通过Zuul代理访问Spring Cloud配置服务器。</font><font o="688">非jvm应用程序应该执行健康检查，以便Sidecar可以向应用程序启动或关闭时向尤里卡报告。</font></p>
</div>
<div class="paragraph">
<p><font o="689">要在项目中包含Sidecar，请使用组合<code i="448">org.springframework.cloud</code>和artifact id <code i="449">spring-cloud-netflix-sidecar</code>的依赖关系。</font></p>
</div>
<div class="paragraph">
<p><font o="690">要启用Sidecar，请使用<code i="450">@EnableSidecar</code>创建Spring Boot应用程序。</font><font o="691">此注释包括<code i="451">@EnableCircuitBreaker</code>，<code i="452">@EnableDiscoveryClient</code>和<code i="453">@EnableZuulProxy</code>。</font><font o="692">在与非jvm应用程序相同的主机上运行生成的应用程序。</font></p>
</div>
<div class="paragraph">
<p><font o="693">要配置侧车，将<code i="454">sidecar.port</code>和<code i="455">sidecar.health-uri</code>添加到<code i="456">application.yml</code>。</font><font o="694"><code i="457">sidecar.port</code>属性是非jvm应用程序正在侦听的端口。</font><font o="695">所以Sidecar可以使用Eureka正确注册该应用。</font><font o="696"><code i="458">sidecar.health-uri</code>是一个可以在非jvm应用程序上访问的uri，它模仿Spring Boot健康指标。</font><font o="697">它应该返回一个json文档，如下所示：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="698">健康-URI文档</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-json" data-lang="json">{
  "status":"UP"
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="699">以下是Sidecar应用程序的application.yml示例：</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="700">application.yml</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml">server:
  port: 5678
spring:
  application:
    name: sidecar

sidecar:
  port: 8000
  health-uri: http://localhost:8000/health.json</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="701"><code i="459">DiscoveryClient.getInstances()</code>方法的api是<code i="460">/hosts/{serviceId}</code>。</font><font o="702">以下是对不同主机返回两个实例的<code i="461">/hosts/customers</code>的示例响应。</font><font o="703">这个api可以通过<code i="462"><a href="http://localhost:5678/hosts/{serviceId}" class="bare">http://localhost:5678/hosts/{serviceId}</a></code>访问非jvm应用程序（如果sidecar在端口5678）。</font></p>
</div>
<div class="listingblock">
<div class="title"><font o="704">/主机/客户</font></div>
<div class="content">
<pre class="highlight notranslate"><code class="language-json" data-lang="json">[
    {
        "host": "myhost",
        "port": 9000,
        "uri": "http://myhost:9000",
        "serviceId": "CUSTOMERS",
        "secure": false
    },
    {
        "host": "myhost2",
        "port": 9000,
        "uri": "http://myhost2:9000",
        "serviceId": "CUSTOMERS",
        "secure": false
    }
]</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="705">Zuul代理自动将eureka中已知的每个服务的路由添加到<code i="463">/&lt;serviceId&gt;</code>，因此客户服务可在<code i="464">/customers</code>获得。</font><font o="706">非jvm应用程序可以通过<code i="465"><a href="http://localhost:5678/customers" class="bare">http://localhost:5678/customers</a></code>访问客户服务（假设侧面正在侦听端口5678）。</font></p>
</div>
<div class="paragraph">
<p><font o="707">如果配置服务器注册了Eureka，则非jvm应用程序可以通过Zuul代理访问它。</font><font o="708">如果ConfigServer的serviceId为<code i="466">configserver</code>且端口5678为Sidecar，则可以在
 </font><a href="http://localhost:5678/configserver" class="bare"><font o="708">http：// localhost：5678 / configserver</font></a></p>
</div>
<div class="paragraph">
<p><font o="709">非jvm应用程序可以利用Config Server返回YAML文档的功能。</font><font o="710">例如，调用</font><a href="http://sidecar.local.spring.io:5678/configserver/default-master.yml" class="bare"><font o="710">http://sidecar.local.spring.io:5678/configserver/default-master.yml</font></a><font o="710"> 
可能会导致一个YAML文档，如下所示</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml">eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  password: password
info:
  description: Spring Cloud Samples
  url: https://github.com/spring-cloud-samples</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="netflix-rxjava-springmvc"><font o="711">RxJava与Spring MVC</font></h2>
<div class="sectionbody">
<div class="paragraph">
<p><font o="712">Spring Cloud Netflix包括</font><a href="https://github.com/ReactiveX/RxJava"><font o="712">RxJava</font></a><font o="712">。</font></p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p><font o="713">RxJava是</font><a href="http://reactivex.io/"><font o="713">Reactive Extensions</font></a><font o="713">的Java VM实现</font><font o="713">：用于通过使用observable序列来组合异步和基于事件的程序的库。</font></p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p><font o="714">Spring Cloud Netflix支持从Spring MVC控制器返回<code i="467">rx.Single</code>对象。</font><font o="715">它还支持对</font><a href="https://en.wikipedia.org/wiki/Server-sent_events"><font o="715">服务器发送事件（SSE）</font></a><font o="715">使用<code i="468">rx.Observable</code>对象</font><font o="715">。</font><font o="716">如果您的内部API已经使用RxJava构建（参见</font><a href="#spring-cloud-feign-hystrix"><font o="716">Feign Hystrix支持</font></a><font o="716">示例），</font><font o="716">这可能非常方便</font><font o="716">。</font></p>
</div>
<div class="paragraph">
<p><font o="717">以下是使用<code i="469">rx.Single</code>的一些示例：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@RequestMapping(method = RequestMethod.GET, value = "/single")
public Single&lt;String&gt; single() {
	return Single.just("single value");
}

@RequestMapping(method = RequestMethod.GET, value = "/singleWithResponse")
public ResponseEntity&lt;Single&lt;String&gt;&gt; singleWithResponse() {
	return new ResponseEntity&lt;&gt;(Single.just("single value"),
			HttpStatus.NOT_FOUND);
}

@RequestMapping(method = RequestMethod.GET, value = "/singleCreatedWithResponse")
public Single&lt;ResponseEntity&lt;String&gt;&gt; singleOuterWithResponse() {
	return Single.just(new ResponseEntity&lt;&gt;("single value", HttpStatus.CREATED));
}

@RequestMapping(method = RequestMethod.GET, value = "/throw")
public Single&lt;Object&gt; error() {
	return Single.error(new RuntimeException("Unexpected"));
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="718">如果您有<code i="470">Observable</code>而不是单个，则可以使用<code i="471">.toSingle()</code>或<code i="472">.toList().toSingle()</code>。</font><font o="719">这里有些例子：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@RequestMapping(method = RequestMethod.GET, value = "/single")
public Single&lt;String&gt; single() {
    return Observable.just("single value").toSingle();
}

@RequestMapping(method = RequestMethod.GET, value = "/multiple")
public Single&lt;List&lt;String&gt;&gt; multiple() {
    return Observable.just("multiple", "values").toList().toSingle();
}

@RequestMapping(method = RequestMethod.GET, value = "/responseWithObservable")
public ResponseEntity&lt;Single&lt;String&gt;&gt; responseWithObservable() {

    Observable&lt;String&gt; observable = Observable.just("single value");
    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(APPLICATION_JSON_UTF8);
    return new ResponseEntity&lt;&gt;(observable.toSingle(), headers, HttpStatus.CREATED);
}

@RequestMapping(method = RequestMethod.GET, value = "/timeout")
public Observable&lt;String&gt; timeout() {
    return Observable.timer(1, TimeUnit.MINUTES).map(new Func1&lt;Long, String&gt;() {
        @Override
        public String call(Long aLong) {
            return "single value";
        }
    });
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="720">如果您有流式端点和客户端，SSE可以是一个选项。</font><font o="721">要将<code i="473">rx.Observable</code>转换为Spring <code i="474">SseEmitter</code>，请使用<code i="475">RxResponse.sse()</code>。</font><font o="722">这里有些例子：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@RequestMapping(method = RequestMethod.GET, value = "/sse")
public SseEmitter single() {
	return RxResponse.sse(Observable.just("single value"));
}

@RequestMapping(method = RequestMethod.GET, value = "/messages")
public SseEmitter messages() {
	return RxResponse.sse(Observable.just("message 1", "message 2", "message 3"));
}

@RequestMapping(method = RequestMethod.GET, value = "/events")
public SseEmitter event() {
	return RxResponse.sse(APPLICATION_JSON_UTF8,
			Observable.just(new EventDto("Spring io", getDate(2016, 5, 19)),
					new EventDto("SpringOnePlatform", getDate(2016, 8, 1))));
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="netflix-metrics"><font o="723">指标：Spectator，Servo和Atlas</font></h2>
<div class="sectionbody">
<div class="paragraph">
<p><font o="724">当一起使用时，Spectator / Servo和Atlas提供了近实时的操作洞察平台。</font></p>
</div>
<div class="paragraph">
<p><font o="725">Spectator和Servo是Netflix的指标收集库。</font><font o="726">Atlas是用于管理维度时间序列数据的Netflix指标后端。</font></p>
</div>
<div class="paragraph">
<p><font o="727">Servo为Netflix服务了几年，并且仍然可以使用，但是逐渐被淘汰出来，赞成Spectator，这仅适用于Java 8. Spring Cloud Netflix为两者提供了支持，但Java鼓励使用基于8的应用程序来使用Spectator。</font></p>
</div>
<div class="sect2">
<h3 id="_dimensional_vs_hierarchical_metrics"><font o="728">维度与层次度量</font></h3>
<div class="paragraph">
<p><font o="729">Spring Boot Actuator指标是层次结构，指标只能由名称分隔。</font><font o="730">这些名称通常遵循将密钥/值属性对（维）嵌入到以句点分隔的名称中的命名约定。</font><font o="731">考虑以下两个端点（root和star-star）的指标：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-json" data-lang="json">{
    "counter.status.200.root": 20,
    "counter.status.400.root": 3,
    "counter.status.200.star-star": 5,
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="732">第一个指标给出了每单位时间内针对根端点的成功请求的归一化计数。</font><font o="733">但是如果系统有20个端点，并且想要获得针对所有端点的成功请求计数呢？</font><font o="734">一些分级度量后端将允许您指定一个通配符，例如<code i="476">counter.status.200.<strong></strong></code> </font><strong><font o="734">，它将读取所有20个指标并聚合结果。</font><font o="735">或者，您可以提供<code i="477">HandlerInterceptorAdapter</code>拦截并记录所有成功请求的<code i="478">counter.status.200.all</code>等指标，而不考虑端点，但现在您必须写入20 + 1个不同的指标。</font><font o="736">同样，如果您想知道服务中所有端点的成功请求总数，您可以指定一个通配符，例如<code i="479">counter.status.2</code></font></strong><font o="736"> <code i="480">.*</code>。</font></p>
</div>
<div class="paragraph">
<p><font o="737">即使在分级度量后端的通配符支持的情况下，命名一致性也是困难的。</font><font o="738">具体来说，这些标签在名称字符串中的位置可能会随着时间而滑落，从而导致查询错 </font><font o="739">例如，假设我们为上述HTTP方法添加了一个额外的维度。</font><font o="740">那么<code i="481">counter.status.200.root</code>成为<code i="482">counter.status.200.method.get.root</code>等等。我们的<code i="483">counter.status.200.*</code>突然不再具有相同的语义。</font><font o="741">此外，如果新的维度在整个代码库中不均匀地应用，某些查询可能会变得不可能。</font><font o="742">这可以很快失控。</font></p>
</div>
<div class="paragraph">
<p><font o="743">Netflix指标被标记（又称维度）。</font><font o="744">每个指标都有一个名称，但是这个单一的命名度量可以包含多个统计信息和“标签”键/值对，这允许更多的查询灵活性。</font><font o="745">实际上统计本身就是记录在一个特殊的标签上。</font></p>
</div>
<div class="paragraph">
<p><font o="746">使用Netflix Servo或Spectator记录，上述根端点的计时器包含每个状态码的4个统计信息，其中计数统计信息与Spring Boot Actuator的计数器相同。</font><font o="747">如果到目前为止，我们遇到了HTTP 200和400，将有8个可用数据点：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-json" data-lang="json">{
    "root(status=200,stastic=count)": 20,
    "root(status=200,stastic=max)": 0.7265630630000001,
    "root(status=200,stastic=totalOfSquares)": 0.04759702862580789,
    "root(status=200,stastic=totalTime)": 0.2093076914666667,
    "root(status=400,stastic=count)": 1,
    "root(status=400,stastic=max)": 0,
    "root(status=400,stastic=totalOfSquares)": 0,
    "root(status=400,stastic=totalTime)": 0,
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_default_metrics_collection"><font o="748">默认度量集合</font></h3>
<div class="paragraph">
<p><font o="749">没有任何附加依赖或配置，基于Spring Cloud的服务将自动配置Servo <code i="484">MonitorRegistry</code>，并开始收集每个Spring MVC请求的指标。</font><font o="750">默认情况下，将为每个MVC请求记录名称为<code i="485">rest</code>的Servo定时器，标记为：</font></p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><font o="751">HTTP方法</font></p>
</li>
<li>
<p><font o="752">HTTP状态（例如200,400,500）</font></p>
</li>
<li>
<p><font o="753">URI（如果URI为空，则为“root”），为Atlas</font></p>
</li>
<li>
<p><font o="754">异常类名称，如果请求处理程序抛出异常</font></p>
</li>
<li>
<p><font o="755">如果在请求上设置了匹配<code i="486">netflix.metrics.rest.callerHeader</code>的密钥的请求头，则呼叫者。</font><font o="756"><code i="487">netflix.metrics.rest.callerHeader</code>没有默认键。</font><font o="757">如果您希望收集来电者信息，则必须将其添加到应用程序属性中。</font></p>
</li>
</ol>
</div>
<div class="paragraph">
<p><font o="758">设置<code i="488">netflix.metrics.rest.metricName</code>属性将度量标准的名称从<code i="489">rest</code>更改为您提供的名称。</font></p>
</div>
<div class="paragraph">
<p><font o="759">如果启用了Spring AOP，并且您的运行时类路径上存在<code i="490">org.aspectj:aspectjweaver</code>，则Spring Cloud还将收集每个使用<code i="491">RestTemplate</code>进行的客户端调用的指标。</font><font o="760">将为每个MVC请求记录名称为<code i="492">restclient</code>的Servo定时器，其标记为：</font></p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><font o="761">HTTP方法</font></p>
</li>
<li>
<p><font o="762">HTTP状态（例如200,400,500），如果响应返回为空，则为“CLIENT_ERROR”，否则在执行<code i="494">RestTemplate</code>方法时发生<code i="493">IOException</code>时为“IO_ERROR”</font></p>
</li>
<li>
<p><font o="763">URI，为Atlas</font></p>
</li>
<li>
<p><font o="764">客户名称</font></p>
</li>
</ol>
</div>
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="765">警告</font></div>
</td>
<td class="content"><font o="766">
避免在<code i="495">RestTemplate</code>内使用硬编码的url参数。</font><font o="767">定位动态端点时使用URL变量。</font><font o="768">这将避免潜在的“GC覆盖上限限制”问题，其中<code i="496">ServoMonitorCache</code>将每个网址视为唯一密钥。
</font></td>
</tr>
</tbody></table>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">// recommended
String orderid = "1";
restTemplate.getForObject("http://testeurekabrixtonclient/orders/{orderid}", String.class, orderid)

// avoid
restTemplate.getForObject("http://testeurekabrixtonclient/orders/1", String.class)</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="netflix-metrics-spectator"><font o="769">指标集：Spectator</font></h3>
<div class="paragraph">
<p><font o="770">要启用Spectator指标，请在<code i="497">spring-boot-starter-spectator</code>上添加依赖关系：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-xml" data-lang="xml">    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-spectator&lt;/artifactId&gt;
    &lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="771">在Spectator说明中，仪表是一个命名，键入和标记的配置，而指标表示给定仪表在某个时间点的值。</font><font o="772">Spectator米由注册表创建和控制，注册表目前有几个不同的实现。</font><font o="773">Spectator提供4米类型：计数器，定时器，量规和分配摘要。</font></p>
</div>
<div class="paragraph">
<p><font o="774">Spring Cloud Spectator集成为您配置可注入的<code i="498">com.netflix.spectator.api.Registry</code>实例。</font><font o="775">具体来说，它配置一个<code i="499">ServoRegistry</code>实例，以统一REST度量标准的集合，并在Servo API之前将指标导出到Atlas后端。</font><font o="776">实际上，这意味着您的代码可能会使用Servo显示器和Spectator米的混合，两者都将被Spring Boot Actuator <code i="500">MetricReader</code>实例舀起，并将两者都发送到Atlas后端。</font></p>
</div>
<div class="sect3">
<h4 id="_spectator_counter"><font o="777">Spectator计数器</font></h4>
<div class="paragraph">
<p><font o="778">计数器用于测量某些事件发生的速率。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">// create a counter with a name and a set of tags
Counter counter = registry.counter("counterName", "tagKey1", "tagValue1", ...);
counter.increment(); // increment when an event occurs
counter.increment(10); // increment by a discrete amount</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="779">计数器记录单个时间归一化统计量。</font></p>
</div>
</div>
<div class="sect3">
<h4 id="_spectator_timer"><font o="780">Spectator计时器</font></h4>
<div class="paragraph">
<p><font o="781">一个计时器用于测量一些事件需要多长时间。</font><font o="782">Spring Cloud自动记录Spring MVC请求和有条件<code i="501">RestTemplate</code>请求的计时器，稍后可用于创建与请求相关的指标（如延迟）的仪表板：</font></p>
</div>
<div class="imageblock">
<div class="content">
<img src="images/RequestLatency.png" alt="RequestLatency">
</div>
<div class="title"><font o="783">图4.请求延迟</font></div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">// create a timer with a name and a set of tags
Timer timer = registry.timer("timerName", "tagKey1", "tagValue1", ...);

// execute an operation and time it at the same time
T result = timer.record(() -&gt; fooReturnsT());

// alternatively, if you must manually record the time
Long start = System.nanoTime();
T result = fooReturnsT();
timer.record(System.nanoTime() - start, TimeUnit.NANOSECONDS);</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="784">计时器同时记录4个统计信息：count，max，totalOfSquares和totalTime。</font><font o="785">如果您在每次记录时间时在计数器上调用了<code i="502">increment()</code>一次，计数统计量将始终与计数器提供的单个归一化值相匹配，因此，对于单个操作，不需要单独计数和计时。</font></p>
</div>
<div class="paragraph">
<p><font o="786">对于</font><a href="https://github.com/Netflix/spectator/wiki/Timer-Usage#longtasktimer"><font o="786">长时间运行的操作</font></a><font o="786">，Spectator提供了一个特殊的<code i="503">LongTaskTimer</code>。</font></p>
</div>
</div>
<div class="sect3">
<h4 id="_spectator_gauge"><font o="787">Spectator量规</font></h4>
<div class="paragraph">
<p><font o="788">量规用于确定一些当前值，如队列的大小或处于运行状态的线程数。</font><font o="789">由于仪表被采样，它们不提供关于这些值在样品之间如何波动的信息。</font></p>
</div>
<div class="paragraph">
<p><font o="790">仪器的正常使用包括在初始化中使用标识符注册仪表，对要采样的对象的引用，以及基于对象获取或计算数值的功能。</font><font o="791">对对象的引用被单独传递，并且Spectator注册表将保持对该对象的弱引用。</font><font o="792">如果对象被垃圾回收，则Spectator将自动删除注册。</font><font o="793">见</font><a href="https://github.com/Netflix/spectator/wiki/Gauge-Usage#using-lambda"><font o="793">注释</font></a><font o="793"> Spectator是关于潜在的内存泄漏的文件中，如果这个API被滥用。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">// the registry will automatically sample this gauge periodically
registry.gauge("gaugeName", pool, Pool::numberOfRunningThreads);

// manually sample a value in code at periodic intervals -- last resort!
registry.gauge("gaugeName", Arrays.asList("tagKey1", "tagValue1", ...), 1000);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_spectator_distribution_summaries"><font o="794">Spectator分发摘要</font></h4>
<div class="paragraph">
<p><font o="795">分发摘要用于跟踪事件的分布情况。</font><font o="796">它类似于一个计时器，但更普遍的是，大小不一定是一段时间。</font><font o="797">例如，分发摘要可用于测量服务器的请求的有效载荷大小。</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">// the registry will automatically sample this gauge periodically
DistributionSummary ds = registry.distributionSummary("dsName", "tagKey1", "tagValue1", ...);
ds.record(request.sizeInBytes());</code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="netflix-metrics-servo"><font o="798">指标集：Servo</font></h3>
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="799">警告</font></div>
</td>
<td class="content"><font o="800">
如果您的代码在Java 8上编译，请使用Spectator而不是Servo，因为Spectator注定要从长远来完全替换Servo。
</font></td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><font o="801">在Servo语言中，监视器是一个命名，键入和标记的配置，而指标表示给定监视器在某个时间点的值。</font><font o="802">Servo监视器在逻辑上等同于Spectator米。</font><font o="803">Servo监视器由<code i="504">MonitorRegistry</code>创建和控制。</font><font o="804">尽管有上述警告，Servo确实具有</font><font o="804">比Spectator有米</font><a href="https://github.com/Netflix/servo/wiki/Getting-Started"><font o="804">更多</font></a><font o="804">的监视器选项。</font></p>
</div>
<div class="paragraph">
<p><font o="805">Spring Cloud集成为您配置可注入的<code i="505">com.netflix.servo.MonitorRegistry</code>实例。</font><font o="806">一旦您在Servo中创建了相应的<code i="506">Monitor</code>类型，记录数据的过程完全类似于Spectator。</font></p>
</div>
<div class="sect3">
<h4 id="_creating_servo_monitors"><font o="807">创建Servo显示器</font></h4>
<div class="paragraph">
<p><font o="808">如果您正在使用由Spring Cloud提供的Servo <code i="507">MonitorRegistry</code>实例（具体来说是<code i="508">DefaultMonitorRegistry</code>的实例），则Servo为检索</font><a href="https://github.com/Netflix/spectator/wiki/Servo-Comparison#dynamiccounter"><font o="808">计数器</font></a><font o="808">和</font><a href="https://github.com/Netflix/spectator/wiki/Servo-Comparison#dynamictimer"><font o="808">计时器</font></a><font o="808">提供便利类</font><font o="808">。</font><font o="809">这些便利类确保每个唯一的名称和标签组合只注册一个<code i="509">Monitor</code>。</font></p>
</div>
<div class="paragraph">
<p><font o="810">要在Servo中手动创建监视器类型，特别是对于不提供方便方法的异域监视器类型，通过提供<code i="510">MonitorConfig</code>实例来实例化适当的类型：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">MonitorConfig config = MonitorConfig.builder("timerName").withTag("tagKey1", "tagValue1").build();

// somewhere we should cache this Monitor by MonitorConfig
Timer timer = new BasicTimer(config);
monitorRegistry.register(timer);</code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="netflix-metrics-atlas"><font o="811">指标后端：Atlas</font></h3>
<div class="paragraph">
<p><font o="812">Netflix开发了Atlas，用于管理维度时间序列数据，实现近实时操作洞察。</font><font o="813">Atlas具有内存数据存储功能，可以非常快速地收集和报告大量的指标。</font></p>
</div>
<div class="paragraph">
<p><font o="814">Atlas捕获操作情报。</font><font o="815">而商业智能是收集的数据，用于分析一段时间内的趋势，操作情报提供了系统中目前发生的情况。</font></p>
</div>
<div class="paragraph">
<p><font o="816">Spring Cloud提供了一个<code i="511">spring-cloud-starter-atlas</code>，它具有您需要的所有依赖关系。</font><font o="817">然后使用<code i="512">@EnableAtlas</code>注释您的Spring Boot应用程序，并为运行中的Atlas服务器提供<code i="513">netflix.atlas.uri</code>属性的位置。</font></p>
</div>
<div class="sect3">
<h4 id="_global_tags"><font o="818">全球标签</font></h4>
<div class="paragraph">
<p><font o="819">Spring Cloud可让您为发送到Atlas后端的每个指标添加标签。</font><font o="820">全局标签可用于按应用程序名称，环境，区域等分隔度量。</font></p>
</div>
<div class="paragraph">
<p><font o="821">实现<code i="514">AtlasTagProvider</code>的每个bean将贡献全局标签列表：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-java" data-lang="java">@Bean
AtlasTagProvider atlasCommonTags(
    @Value("${spring.application.name}") String appName) {
  return () -&gt; Collections.singletonMap("app", appName);
}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_using_atlas"><font o="822">使用Atlas</font></h4>
<div class="paragraph">
<p><font o="823">要引导内存独立的Atlas实例：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-bash" data-lang="bash">$ curl -LO https://github.com/Netflix/atlas/releases/download/v1.4.2/atlas-1.4.2-standalone.jar
$ java -jar atlas-1.4.2-standalone.jar</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="824">提示</font></div>
</td>
<td class="content"><font o="825">
在r3.2xlarge（61GB RAM）上运行的Atlas独立节点可以在给定的6小时窗口中处理每分钟大约200万个度量。
</font></td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><font o="826">一旦运行，您收集了少量指标，请通过在Atlas服务器上列出代码来验证您的设置是否正确：</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-bash" data-lang="bash">$ curl http://ATLAS/api/v1/tags</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<div class="title"><font o="827">提示</font></div>
</td>
<td class="content"><font o="828">
在针对您的服务执行多个请求后，您可以通过在浏览器中粘贴以下URL来收集关于每个请求的请求延迟的一些非常基本的信息：<code i="515"><a href="http://ATLAS/api/v1/graph?q=name,rest,:eq,:avg" class="bare">http://ATLAS/api/v1/graph?q=name,rest,:eq,:avg</a></code>
</font></td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><font o="829">Atlas wiki包含</font><font o="829">各种场景</font><a href="https://github.com/Netflix/atlas/wiki/Single-Line"><font o="829">样本查询</font></a><font o="829">的汇编。</font></p>
</div>
<div class="paragraph">
<p><font o="830">确保</font><font o="830">使用</font><a href="https://github.com/Netflix/atlas/wiki/DES"><font o="830">双指数平滑</font></a><font o="830">来查看</font><a href="https://github.com/Netflix/atlas/wiki/Alerting-Philosophy"><font o="830">警报原理</font></a><font o="830">和文档，</font><font o="830">以生成动态警报阈值。</font><a href="https://github.com/Netflix/atlas/wiki/DES"><font></font></a><font></font></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="retrying-failed-requests"><font o="831">重试失败的请求</font></h3>
<div class="paragraph">
<p><font o="832">Spring Cloud Netflix提供了多种方式来进行HTTP请求。</font><font o="833">您可以使用负载平衡<code i="516">RestTemplate</code>，Ribbon或Feign。</font><font o="834">无论您如何选择HTTP请求，始终有可能失败的请求。</font><font o="835">当请求失败时，您可能希望自动重试该请求。</font><font o="836">要在使用Sping Cloud Netflix时完成此操作，您需要</font><font o="836">在应用程序的类路径</font><font o="836">中包含
 </font><a href="https://github.com/spring-projects/spring-retry"><font o="836">Spring Retry</font></a><font o="836">。</font><font o="837">当Spring Retry存在负载均衡<code i="517">RestTemplates</code>时，Feign和Zuul将自动重试任何失败的请求（假设配置允许）。</font></p>
</div>
<div class="sect3">
<h4 id="_configuration"><font o="838">组态</font></h4>
<div class="paragraph">
<p><font o="839">随着Spring Retry使用Ribbon，您可以通过配置某些Ribbon属性来控制重试功能。</font><font o="840">您可以使用的属性是<code i="518">client.ribbon.MaxAutoRetries</code>，<code i="519">client.ribbon.MaxAutoRetriesNextServer</code>和<code i="520">client.ribbon.OkToRetryOnAllOperations</code>。</font><font o="841">请参阅</font><a href="https://github.com/Netflix/ribbon/wiki/Getting-Started#the-properties-file-sample-clientproperties"><font o="841">Ribbon文档</font></a><font o="841"> 
，了解属性的具体内容。</font></p>
</div>
<div class="paragraph">
<p><font o="842">此外，您可能希望在响应中返回某些状态代码时重试请求。</font><font o="843">您可以列出您希望Ribbon客户端使用属性<code i="521">clientName.ribbon.retryableStatusCodes</code>重试的响应代码。</font><font o="844">例如</font></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight notranslate"><code class="language-yaml" data-lang="yaml">clientName:
  ribbon:
    retryableStatusCodes: 404,502</code></pre>
</div>
</div>
<div class="paragraph">
<p><font o="845">您还可以创建一个类型为<code i="522">LoadBalancedRetryPolicy</code>的bean，并实现<code i="523">retryableStatusCode</code>方法来确定是否要重试发出状态代码的请求。</font></p>
</div>
</div>
<div class="sect3">
<h4 id="_zuul">Zuul</h4>
<div class="paragraph">
<p><font o="847">您可以通过将<code i="524">zuul.retryable</code>设置为<code i="525">false</code>来关闭Zuul的重试功能。</font><font o="848">您还可以通过将<code i="526">zuul.routes.routename.retryable</code>设置为<code i="527">false</code>，以路由方式禁用重试功能。</font></p>
</div>
</div>
</div>
</div>
</div>
</div>

<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script type="text/javascript" charset="UTF-8" name="springcloud">springcloud.cc({"original":{"1":"{2/} Netflix","2":"1.3.0.RELEASE","3":"This project provides {4/} integrations for {3/} apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms.","4":"With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with battle-tested Netflix components.","5":"The patterns provided include Service Discovery ({13/}), Circuit Breaker ({14/}), Intelligent Routing ({10/}) and Client Side Load Balancing ({17/}).","6":"Service Discovery: {13/} Clients","7":"Service Discovery is one of the key tenets of a microservice based architecture.","8":"Trying to hand configure each client or some form of convention can be very difficult to do and can be very brittle.","9":"{13/} is the Netflix Service Discovery Server and Client.","10":"The server can be configured and deployed to be highly available, with each server replicating state about the registered services to the others.","11":"How to Include {13/} Client","12":"To include {13/} Client in your project use the starter with group {20/} and artifact id {21/}.","13":"See the {2/} Project page for details on setting up your build system with the current {2/} Release Train.","14":"Registering with {13/}","15":"When a client registers with {13/}, it provides meta-data about itself such as host and port, health indicator URL, home page etc. {13/} receives heartbeat messages from each instance belonging to a service.","16":"If the heartbeat fails over a configurable timetable, the instance is normally removed from the registry.","17":"Example eureka client:","18":"(ie utterly normal {3/} app).","19":"In this example we use {22/} explicitly, but with only {13/} available you could also use {23/}.","20":"Configuration is required to locate the {13/} server.","21":"Example:","22":"application.yml","23":"where \"defaultZone\" is a magic string fallback value that provides the\nservice URL for any client that doesn’t express a preference\n(i.e. it’s a useful default).","24":"The default application name (service ID), virtual host and non-secure\nport, taken from the {24/}, are {25/},\n{26/} and {27/} respectively.","25":"{28/} makes the app into both a {13/} \"instance\" (ie it registers itself) and a \"client\" (ie it can query the registry to locate other services).","26":"The instance behaviour is driven by {29/} configuration keys, but the defaults will be fine if you ensure that your application has a {30/} (this is the default for the {13/} service ID, or VIP).","27":"See EurekaInstanceConfigBean and EurekaClientConfigBean for more details of the configurable options.","28":"Authenticating with the {13/} Server","29":"HTTP basic authentication will be automatically added to your eureka client if one of the {31/} URLs has credentials embedded in it (curl style, like {32/}).","30":"For more complex needs you can create a {33/} of type {34/} and inject {35/} instances into it, all of which will be applied to the calls from the client to the server.","31":"Note","32":"\nBecause of a limitation in {13/} it isn’t possible to support\nper-server basic auth credentials, so only the first set that are\nfound will be used.\n","33":"Status Page and Health Indicator","34":"The status page and health indicators for a {13/} instance default to \"/info\" and \"/health\" respectively, which are the default locations of useful endpoints in a {0/} application.","35":"You need to change these, even for an Actuator application if you use a non-default context path or servlet path (eg {36/}) or management endpoint path (eg {37/}).","36":"Example:","37":"application.yml","38":"These links show up in the metadata that is consumed by clients, and\nused in some scenarios to decide whether to send requests to your\napplication, so it’s helpful if they are accurate.","39":"Registering a Secure Application","40":"If your app wants to be contacted over HTTPS you can set two flags in the {38/}, viz {39/} respectively.","41":"This will make {13/} publish instance information showing an explicit preference for secure communication.","42":"The Spring Cloud {40/} will always return an {41/} URI for a service configured this way, and the {13/} (native) instance information will have a secure health check URL.","43":"Because of the way {13/} works internally, it will still publish a non-secure URL for status and home page unless you also override those explicitly.","44":"You can use placeholders to configure the eureka instance urls, eg","45":"application.yml","46":"(Note that {42/} is a native placeholder only available\nin later versions of {13/}. You could achieve the same thing with\nSpring placeholders as well, e.g. using {43/}.)","47":"Note","48":"If your app is running behind a proxy, and the SSL termination is in the proxy (eg if you run in Cloud Foundry or other platforms as a service) then you will need to ensure that the proxy \"forwarded\" headers are intercepted and handled by the application.","49":"An embedded Tomcat container in a {3/} app does this automatically if it has explicit configuration for the 'X-Forwarded-\\*` headers.","50":"A sign that you got this wrong will be that the links rendered by your app to itself will be wrong (the wrong host, port or protocol).","51":"{13/}’s Health Checks","52":"By default, {13/} uses the client heartbeat to determine if a client is up.","53":"Unless specified otherwise the Discovery Client will not propagate the current health check status of the application per the {0/}.","54":"Which means that after successful registration {13/} will always announce that the application is in 'UP' state.","55":"This behaviour can be altered by enabling {13/} health checks, which results in propagating application status to {13/}.","56":"As a consequence every other application won't be sending traffic to application in state other then 'UP'.","57":"application.yml","58":"Warning","59":"{44/} should only be set in {45/}.","60":"Setting the value in {46/} will cause undesirable side effects like registering in eureka with an {47/} status.","61":"If you require more control over the health checks, you may consider\nimplementing your own {48/}.","62":"{13/} Metadata for Instances and Clients","63":"It's worth spending a bit of time understanding how the {13/} metadata works, so you can use it in a way that makes sense in your platform.","64":"There is standard metadata for things like hostname, IP address, port numbers, status page and health check.","65":"These are published in the service registry and used by clients to contact the services in a straightforward way.","66":"Additional metadata can be added to the instance registration in the {49/}, and this will be accessible in the remote clients, but in general will not change the behaviour of the client, unless it is made aware of the meaning of the metadata.","67":"There are a couple of special cases described below where {2/} already assigns meaning to the metadata map.","68":"Using {13/} on Cloudfoundry","69":"Cloudfoundry has a global router so that all instances of the same app have the same hostname (it's the same in other PaaS solutions with a similar architecture).","70":"This isn't necessarily a barrier to using {13/}, but if you use the router (recommended, or even mandatory depending on the way your platform was set up), you need to explicitly set the hostname and port numbers (secure or non-secure) so that they use the router.","71":"You might also want to use instance metadata so you can distinguish between the instances on the client (eg in a custom load balancer).","72":"By default, the {50/} is {51/}.","73":"For example:","74":"application.yml","75":"Depending on the way the security rules are set up in your Cloudfoundry instance, you might be able to register and use the IP address of the host VM for direct service-to-service calls.","76":"This feature is not (yet) available on Pivotal Web Services ( PWS ).","77":"Using {13/} on AWS","78":"If the application is planned to be deployed to an AWS cloud, then the {13/} instance will have to be configured to be AWS aware and this can be done by customizing the EurekaInstanceConfigBean the following way:","79":"Changing the {13/} Instance ID","80":"A vanilla Netflix {13/} instance is registered with an ID that is equal to its host name (ie only one service per host).","81":"{2/} {13/} provides a sensible default that looks like this: {52/}.","82":"For example {53/}.","83":"Using {2/} you can override this by providing a unique identifier in {54/}.","84":"For example:","85":"application.yml","86":"With this metadata, and multiple service instances deployed on localhost, the random value will kick in there to make the instance unique.","87":"In Cloudfoundry the {55/} will be populated automatically in a {3/} application, so the random value will not be needed.","88":"Using the EurekaClient","89":"Once you have an app that is {56/} (or {57/}) you can use it to discover service instances from the {13/} Server .","90":"One way to do that is to use the native {58/} (as opposed to the Spring Cloud {59/}), eg","91":"Tip","92":"Don't use the {60/} in {61/} method or in a {62/} method (or anywhere where the {63/} might not be started yet).","93":"It is initialized in a {64/} (with {65/}) so the earliest you can rely on it being available is in another {66/} with higher phase.","94":"Alternatives to the native Netflix EurekaClient","95":"You don't have to use the raw Netflix {67/} and usually it is more convenient to use it behind a wrapper of some sort.","96":"Spring Cloud has support for {8/} (a REST client builder) and also Spring {68/} using the logical {13/} service identifiers (VIPs) instead of physical URLs.","97":"To configure {17/} with a fixed list of physical servers you can simply set {69/} to a comma-separated list of physical addresses (or hostnames), where {70/} is the ID of the client.","98":"You can also use the {71/}\nwhich provides a simple API for discovery clients that is not specific\nto Netflix, e.g.","99":"Why is it so Slow to Register a Service?","100":"Being an instance also involves a periodic heartbeat to the registry (via the client's {72/}) with default duration 30 seconds.","101":"A service is not available for discovery by clients until the instance, the server and the client all have the same metadata in their local cache (so it could take 3 heartbeats).","102":"You can change the period using {73/} and this will speed up the process of getting clients connected to other services.","103":"In production it's probably better to stick with the default because there are some computations internally in the server that make assumptions about the lease renewal period.","104":"Zones","105":"If you have deployed {13/} clients to multiple zones than you may prefer that those clients leverage services within the same zone before trying services in another zone.","106":"To do this you need to configure your {13/} clients correctly.","107":"First, you need to make sure you have {13/} servers deployed to each zone and that they are peers of each other.","108":"See the section on zones and regions for more information.","109":"Next you need to tell {13/} which zone your service is in. You can do this using the {74/} property.","110":"For example if {75/} is deployed to both {76/} and {77/} you would need to set the following {13/} properties in {78/}","111":"Service 1 in Zone 1","112":"Service 1 in Zone 2","113":"Service Discovery: {13/} Server","114":"How to Include {13/} Server","115":"To include {13/} Server in your project use the starter with group {79/} and artifact id {80/}.","116":"See the {2/} Project page for details on setting up your build system with the current {2/} Release Train.","117":"How to Run a {13/} Server","118":"Example eureka server;","119":"The server has a home page with a UI, and HTTP API endpoints per the\nnormal {13/} functionality under {81/}.","120":"{13/} background reading: see flux capacitor and google group discussion.","121":"Tip","122":"Due to Gradle's dependency resolution rules and the lack of a parent bom feature, simply depending on spring-cloud-starter-eureka-server can cause failures on application startup.","123":"To remedy this the {3/} Gradle plugin must be added and the Spring cloud starter parent bom must be imported like so:","124":"build.gradle","125":"High Availability, Zones and Regions","126":"The {13/} server does not have a backend store, but the service instances in the registry all have to send heartbeats to keep their registrations up to date (so this can be done in memory).","127":"Clients also have an in-memory cache of eureka registrations (so they don't have to go to the registry for every single request to a service).","128":"By default every {13/} server is also a {13/} client and requires (at least one) service URL to locate a peer.","129":"If you don't provide it the service will run and work, but it will shower your logs with a lot of noise about not being able to register with the peer.","130":"See also below for details of {17/}\nsupport on the client side for Zones and Regions.","131":"Standalone Mode","132":"The combination of the two caches (client and server) and the heartbeats make a standalone {13/} server fairly resilient to failure, as long as there is some sort of monitor or elastic runtime keeping it alive (eg Cloud Foundry).","133":"In standalone mode, you might prefer to switch off the client side behaviour, so it doesn't keep trying and failing to reach its peers.","134":"Example:","135":"application.yml (Standalone {13/} Server)","136":"Notice that the {82/} is pointing to the same host as the local\ninstance.","137":"Peer Awareness","138":"{13/} can be made even more resilient and available by running multiple instances and asking them to register with each other.","139":"In fact, this is the default behaviour, so all you need to do to make it work is add a valid {83/} to a peer, eg","140":"application.yml (Two Peer Aware {13/} Servers)","141":"In this example we have a YAML file that can be used to run the same server on 2 hosts (peer1 and peer2), by running it in different Spring profiles.","142":"You could use this configuration to test the peer awareness on a single host (there's not much value in doing that in production) by manipulating {84/} to resolve the host names.","143":"In fact, the {85/} is not needed if you are running on a machine that knows its own hostname (it is looked up using {86/} by default).","144":"You can add multiple peers to a system, and as long as they are all connected to each other by at least one edge, they will synchronize the registrations amongst themselves.","145":"If the peers are physically separated (inside a data centre or between multiple data centres) then the system can in principle survive split-brain type failures.","146":"Prefer IP Address","147":"In some cases, it is preferable for {13/} to advertise the IP Adresses of services rather than the hostname.","148":"Set {87/} to {88/} and when the application registers with eureka, it will use its IP Address rather than its hostname.","149":"Circuit Breaker: {14/} Clients","150":"Netflix has created a library called {14/} that implements the circuit breaker pattern .","151":"In a microservice architecture it is common to have multiple layers of service calls.","152":"Figure 1. Microservice Graph","153":"A service failure in the lower level of services can cause cascading failure all the way up to the user.","154":"When calls to a particular service reach a certain threshold (20 failures in 5 seconds is the default in {14/}), the circuit opens and the call is not made.","155":"In cases of error and an open circuit a fallback can be provided by the developer.","156":"Figure 2. {14/} fallback prevents cascading failures","157":"Having an open circuit stops cascading failures and allows overwhelmed or failing services time to heal.","158":"The fallback can be another {14/} protected call, static data or a sane empty value.","159":"Fallbacks may be chained so the first fallback makes some other business call which in turn falls back to static data.","160":"How to Include {14/}","161":"To include {14/} in your project use the starter with group {89/} and artifact id {90/}.","162":"See the {2/} Project page for details on setting up your build system with the current {2/} Release Train.","163":"Example boot app:","164":"The {91/} is provided by a Netflix contrib library called \"javanica\" .","165":"{2/} automatically wraps Spring beans with that annotation in a proxy that is connected to the {14/} circuit breaker.","166":"The circuit breaker calculates when to open and close the circuit, and what to do in case of a failure.","167":"To configure the {92/} you can use the {93/} attribute with a list of {94/} annotations.","168":"See here for more details.","169":"See the {14/} wiki for details on the properties available.","170":"Propagating the Security Context or using Spring Scopes","171":"If you want some thread local context to propagate into a {95/} the default declaration will not work because it executes the command in a thread pool (in case of timeouts).","172":"You can switch {14/} to use the same thread as the caller using some configuration, or directly in the annotation, by asking it to use a different \"Isolation Strategy\".","173":"For example:","174":"The same thing applies if you are using {96/} or {97/}.","175":"You will know when you need to do this because of a runtime exception that says it can't find the scoped context.","176":"You also have the option to set the {98/} property to {99/}.","177":"Doing so will auto configure an {14/} concurrency strategy plugin hook who will transfer the {100/} from your main thread to the one used by the {14/} command.","178":"{14/} does not allow multiple hystrix concurrency strategy to be registered so an extension mechanism is available by declaring your own {101/} as a Spring bean.","179":"{2/} will lookup for your implementation within the Spring context and wrap it inside its own plugin.","180":"Health Indicator","181":"The state of the connected circuit breakers are also exposed in the\n{102/} endpoint of the calling application.","182":"{14/} Metrics Stream","183":"To enable the {14/} metrics stream include a dependency on {103/}.","184":"This will expose the {104/} as a management endpoint.","185":"Circuit Breaker: {14/} Dashboard","186":"One of the main benefits of {14/} is the set of metrics it gathers about each HystrixCommand.","187":"The {14/} Dashboard displays the health of each circuit breaker in an efficient manner.","188":"Figure 3. {14/} Dashboard","189":"{14/} Timeouts And {17/} Clients","190":"When using {14/} commands that wrap {17/} clients you want to make sure your {14/} timeout is configured to be longer than the configured {17/} timeout, including any potential retries that might be made.","191":"For example, if your {17/} connection timeout is one second and the {17/} client might retry the request three times, than your {14/} timeout should be slightly more than three seconds.","192":"How to Include {14/} Dashboard","193":"To include the {14/} Dashboard in your project use the starter with group {105/} and artifact id {106/}.","194":"See the {2/} Project page for details on setting up your build system with the current {2/} Release Train.","195":"To run the {14/} Dashboard annotate your {3/} main class with {107/}.","196":"You then visit {108/} and point the dashboard to an individual instances {109/} endpoint in a {14/} client application.","198":"Looking at an individual instances {14/} data is not very useful in terms of the overall health of the system.","199":"{7/} is an application that aggregates all of the relevant {110/} endpoints into a combined {111/} for use in the {14/} Dashboard.","200":"Individual instances are located via {13/}.","201":"Running {7/} is as simple as annotating your main class with the {112/} annotation (eg using spring-cloud-starter-turbine to set up the classpath).","202":"All of the documented configuration properties from the {7/} 1 wiki apply.","203":"The only difference is that the {113/} does not need the port prepended as this is handled automatically unless {114/}.","204":"Note","205":"By default, {7/} looks for the {115/} endpoint on a registered instance by looking up its {116/} entry in {13/}, then appending {117/} to it.","206":"This means that if {118/} is running on its own port (which is the default), the call to {119/} will fail.","207":"To make turbine find the {14/} stream at the correct port, you need to add {120/} to the instances' metadata:","208":"The configuration key {121/} is a list of eureka serviceIds that turbine will use to lookup instances.","209":"The turbine stream is then used in the {14/} dashboard using a url that looks like: {122/} (the cluster parameter can be omitted if the name is \"default\").","210":"The {123/} parameter must match an entry in {124/}.","211":"Values returned from eureka are uppercase, thus we expect this example to work if there is an app registered with {13/} called \"customers\":","212":"The {125/} can be customized by a SPEL expression in {126/} with root an instance of {127/}.","213":"The default value is {128/}, which means that the {13/} serviceId ends up as the cluster key (ie the {129/} for customers has an {130/} of \"CUSTOMERS\").","214":"A different example would be {131/}, which would get the cluster name from the AWS ASG name.","215":"Another example:","216":"In this case, the cluster name from 4 services is pulled from their metadata map, and is expected to have values that include \"SYSTEM\" and \"USER\".","217":"To use the \"default\" cluster for all apps you need a string literal expression (with single quotes, and escaped with double quotes if it is in YAML as well):","218":"{2/} provides a {132/} that has all the dependencies you need to get a {7/} server running.","219":"Just create a {3/} application and annotate it with {133/}.","220":"Note","221":"by default {2/} allows {7/} to use the host and port to allow multiple processes per host, per cluster.","222":"If you want the native Netflix behaviour built into {7/} that does not allow multiple processes per host, per cluster (the key to the instance id is the hostname), then set the property {134/}.","224":"In some environments (eg in a PaaS setting), the classic {7/} model of pulling metrics from all the distributed {14/} commands doesn't work.","225":"In that case you might want to have your {14/} commands push metrics to {7/}, and {2/} enables that with messaging.","226":"All you need to do on the client is add a dependency to {135/} and the {136/} of your choice (see {2/} Stream documentation for details on the brokers, and how to configure the client credentials, but it should work out of the box for a local broker).","227":"On the server side Just create a {3/} application and annotate it with {137/} and by default it will come up on port 8989 (point your {14/} dashboard to that port, any path).","228":"You can customize the port using either {138/} or {139/}.","229":"If you have {140/} and {141/} on the classpath as well, then you can open up the Actuator endpoints on a separate port (with Tomcat by default) by providing a {142/} which is different.","230":"You can then point the {14/} Dashboard to the {1/} Server instead of individual {14/} streams.","231":"If {1/} is running on port 8989 on myhost, then put {143/} in the stream input field in the {14/} Dashboard.","232":"Circuits will be prefixed by their respective serviceId, followed by a dot, then the circuit name.","233":"{2/} provides a {144/} that has all the dependencies you need to get a {1/} server running - just add the Stream binder of your choice, eg {145/}.","234":"You need Java 8 to run the app because it is Netty-based.","235":"Client Side Load Balancer: {17/}","236":"{17/} is a client side load balancer which gives you a lot of control over the behaviour of HTTP and TCP clients.","237":"{8/} already uses {17/}, so if you are using {146/} then this section also applies.","238":"A central concept in {17/} is that of the named client.","239":"Each load balancer is part of an ensemble of components that work together to contact a remote server on demand, and the ensemble has a name that you give it as an application developer (eg using the {147/} annotation).","240":"{2/} creates a new ensemble as an {148/} on demand for each named client using {149/}.","241":"This contains (amongst other things) an {150/}, a {151/}, and a {152/}.","242":"How to Include {17/}","243":"To include {17/} in your project use the starter with group {153/} and artifact id {154/}.","244":"See the {2/} Project page for details on setting up your build system with the current {2/} Release Train.","245":"Customizing the {17/} Client","246":"You can configure some bits of a {17/} client using external properties in {155/}, which is no different than using the Netflix APIs natively, except that you can use {3/} configuration files.","247":"The native options can be inspected as static fields in {156/} (part of ribbon-core).","248":"{2/} also lets you take full control of the client by declaring additional configuration (on top of the {157/}) using {158/}.","249":"Example:","250":"In this case the client is composed from the components already in\n{159/} together with any in {160/}\n(where the latter generally will override the former).","251":"Warning","252":"The {161/} has to be {162/} but take care that it is not in a {163/} for the main application context, otherwise it will be shared by all the {164/}.","253":"If you use {165/} (or {166/}) you need to take steps to avoid it being included (for instance put it in a separate, non-overlapping package, or specify the packages to scan explicitly in the {167/}).","254":"{2/} Netflix provides the following beans by default for ribbon\n({168/} beanName: {169/}):","255":"{170/} ribbonClientConfig: {171/}","256":"{172/} ribbonRule: {173/}","257":"{174/} ribbonPing: {175/}","258":"{176/} ribbonServerList: {177/}","259":"{178/} ribbonServerListFilter: {179/}","260":"{180/} ribbonLoadBalancer: {181/}","261":"{182/} ribbonServerListUpdater: {183/}","262":"Creating a bean of one of those type and placing it in a {184/} configuration (such as {185/} above) allows you to override each one of the beans described.","263":"Example:","264":"This replaces the {186/} with {187/}.","265":"Customizing the {17/} Client using properties","266":"Starting with version 1.2.0, {2/} Netflix now supports customizing {17/} clients using properties to be compatible with the {17/} documentation.","267":"This allows you to change behavior at start up time in different environments.","268":"The supported properties are listed below and should be prefixed by {188/}:","269":"{189/}: should implement {190/}","270":"{191/}: should implement {192/}","271":"{193/}: should implement {194/}","272":"{195/}: should implement {196/}","273":"{197/} should implement {198/}","274":"Note","275":"\nClasses defined in these properties have precedence over beans defined using {199/} and the defaults provided by {2/} Netflix.\n","276":"To set the {200/} for a service name {201/} you could set the following:","277":"application.yml","278":"See the {17/} documentation for implementations provided by {17/}.","279":"Using {17/} with {13/}","280":"When {13/} is used in conjunction with {17/} (ie, both are on the classpath) the {202/} is overridden with an extension of {203/} which populates the list of servers from {13/}.","281":"It also replaces the {204/} interface with {205/} which delegates to {13/} to determine if a server is up.","282":"The {206/} that is installed by default is a {207/} and the purpose of this is to make physical metadata available to the load balancer without using AWS AMI metadata (which is what Netflix relies on).","283":"By default the server list will be constructed with \"zone\" information as provided in the instance metadata (so on the remote clients set {208/}), and if that is missing it can use the domain name from the server hostname as a proxy for zone (if the flag {209/} is set).","284":"Once the zone information is available it can be used in a {210/}.","285":"By default it will be used to locate a server in the same zone as the client because the default is a {211/}.","286":"The zone of the client is determined the same way as the remote instances by default, ie via {212/}.","287":"Note","288":"\nThe orthodox \"archaius\" way to set the client zone is via a\nconfiguration property called \"@zone\", and {2/} will use that\nin preference to all other settings if it is available (note that the\nkey will have to be quoted in YAML configuration).\n","289":"Note","290":"If there is no other source of zone data then a guess is made based on the client configuration (as opposed to the instance configuration).","291":"We take {213/}, which is a map from region name to a list of zones, and pull out the first zone for the instance's own region (ie the {214/}, which defaults to \"us-east-1\" for comatibility with native Netflix).","292":"Example: How to Use {17/} Without {13/}","293":"{13/} is a convenient way to abstract the discovery of remote servers so you don't have to hard code their URLs in clients, but if you prefer not to use it, {17/} and {8/} are still quite amenable.","294":"Suppose you have declared a {215/} for \"stores\", and {13/} is not in use (and not even on the classpath).","295":"The {17/} client defaults to a configured server list, and you can supply the configuration like this","296":"application.yml","297":"Example: Disable {13/} use in {17/}","298":"Setting the property {216/} will explicitly\ndisable the use of {13/} in {17/}.","299":"application.yml","300":"Using the {17/} API Directly","301":"You can also use the {217/} directly.","302":"Example:","303":"Caching of {17/} Configuration","304":"Each {17/} named client has a corresponding child Application Context that {2/} maintains, this application context is lazily loaded up on the first request to the named client.","305":"This lazy loading behavior can be changed to instead eagerly load up these child Application contexts at startup by specifying the names of the {17/} clients.","306":"application.yml","307":"Declarative REST Client: {8/}","308":"{8/} is a declarative web service client.","309":"It makes writing web service clients easier.","310":"To use {8/} create an interface and annotate it.","311":"It has pluggable annotation support including {8/} annotations and JAX-RS annotations.","312":"{8/} also supports pluggable encoders and decoders.","313":"{2/} adds support for {5/} annotations and for using the same {218/} used by default in Spring Web.","314":"{2/} integrates {17/} and {13/} to provide a load balanced http client when using {8/}.","315":"How to Include {8/}","316":"To include {8/} in your project use the starter with group {219/} and artifact id {220/}.","317":"See the {2/} Project page for details on setting up your build system with the current {2/} Release Train.","318":"Example spring boot app","319":"StoreClient.java","320":"In the {221/} annotation the String value (\"stores\" above) is an arbitrary client name, which is used to create a {17/} load balancer (see below for details of {17/} support ).","321":"You can also specify a URL using the {222/} attribute (absolute value or just a hostname).","322":"The name of the bean in the application context is the fully qualified name of the interface.","323":"To specify your own alias value you can use the {223/} value of the {224/} annotation.","324":"The {17/} client above will want to discover the physical addresses for the \"stores\" service.","325":"If your application is a {13/} client then it will resolve the service in the {13/} service registry.","326":"If you don't want to use {13/}, you can simply configure a list of servers in your external configuration (see above for example ).","327":"Overriding {8/} Defaults","328":"A central concept in {2/}'s {8/} support is that of the named client.","329":"Each feign client is part of an ensemble of components that work together to contact a remote server on demand, and the ensemble has a name that you give it as an application developer using the {225/} annotation.","330":"{2/} creates a new ensemble as an {226/} on demand for each named client using {227/}.","331":"This contains (amongst other things) an {228/}, a {229/}, and a {230/}.","332":"{2/} lets you take full control of the feign client by declaring additional configuration (on top of the {231/}) using {232/}.","333":"Example:","334":"In this case the client is composed from the components already in {233/} together with any in {234/} (where the latter will override the former).","335":"Note","336":"{235/} does not need to be annotated with {236/}.","337":"However, if it is, then take care to exclude it from any {237/} that would otherwise include this configuration as it will become the default source for {238/}, {239/}, {240/}, etc., when specified.","338":"This can be avoided by putting it in a separate, non-overlapping package from any {241/} or {242/}, or it can be explicitly excluded in {243/}.","339":"Note","340":"\nThe {244/} attribute is now deprecated in favor of the {245/} attribute.\n","341":"Warning","342":"Previously, using the {246/} attribute, did not require the {247/} attribute.","343":"Using {248/} is now required.","344":"Placeholders are supported in the {249/} and {250/} attributes.","345":"{2/} Netflix provides the following beans by default for feign ({251/} beanName: {252/}):","346":"{253/} feignDecoder: {254/} (which wraps a {255/})","347":"{256/} feignEncoder: {257/}","348":"{258/} feignLogger: {259/}","349":"{260/} feignContract: {261/}","350":"{262/} feignBuilder: {263/}","351":"{264/} feignClient: if {17/} is enabled it is a {265/}, otherwise the default feign client is used.","352":"The OkHttpClient and ApacheHttpClient feign clients can be used by setting {266/} or {267/} to {268/}, respectively, and having them on the classpath.","353":"{2/} Netflix does not provide the following beans by default for feign, but still looks up beans of these types from the application context to create the feign client:","354":"Creating a bean of one of those type and placing it in a {269/} configuration (such as {270/} above) allows you to override each one of the beans described.","355":"Example:","356":"This replaces the {271/} with {272/} and adds a {273/} to the collection of {274/}.","357":"Default configurations can be specified in the {275/} attribute {276/} in a similar manner as described above.","358":"The difference is that this configuration will apply to all feign clients.","359":"Note","360":"\nIf you need to use {277/} bound variables in your {278/} or disable {14/} in {8/}.\n","361":"application.yml","362":"Creating {8/} Clients Manually","363":"In some cases it might be necessary to customize your {8/} Clients in a way that is not possible using the methods above.","364":"In this case you can create Clients using the {8/} Builder API .","365":"Below is an example which creates two {8/} Clients with the same interface but configures each one with a separate request interceptor.","366":"Note","367":"\nIn the above example {279/} is the default configuration\nprovided by {2/} Netflix.\n","368":"Note","369":"\n{280/} is the name of the service the Clients will be making requests to.\n","370":"{8/} {14/} Support","371":"If {14/} is on the classpath and {281/}, {8/} will wrap all methods with a circuit breaker.","372":"Returning a {282/} is also available.","373":"This lets you use reactive patterns (with a call to {283/} or {284/} or asynchronous use (with a call to {285/}).","374":"To disable {14/} support on a per-client basis create a vanilla {286/} with the \"prototype\" scope, e.g.:","375":"Warning","376":"Prior to the {2/} Dalston release, if {14/} was on the classpath {8/} would have wrapped all methods in a circuit breaker by default.","377":"This default behavior was changed in {2/} Dalston in favor for an opt-in approach.","378":"{8/} {14/} Fallbacks","379":"{14/} supports the notion of a fallback: a default code path that is executed when they circuit is open or there is an error.","380":"To enable fallbacks for a given {287/} set the {288/} attribute to the class name that implements the fallback.","381":"If one needs access to the cause that made the fallback trigger, one can use the {289/} attribute inside {290/}.","382":"Warning","383":"There is a limitation with the implementation of fallbacks in {8/} and how {14/} fallbacks work.","384":"Fallbacks are currently not supported for methods that return {291/} and {292/}.","385":"{8/} and {293/}","386":"When using {8/} with {14/} fallbacks, there are multiple beans in the {294/} of the same type.","387":"This will cause {295/} to not work because there isn't exactly one bean, or one marked as primary.","388":"To work around this, {2/} Netflix marks all {8/} instances as {296/}, so Spring Framework will know which bean to inject.","389":"In some cases, this may not be desirable.","390":"To turn off this behavior set the {297/} attribute of {298/} to false.","391":"{8/} Inheritance Support","392":"{8/} supports boilerplate apis via single-inheritance interfaces.","393":"This allows grouping common operations into convenient base interfaces.","394":"UserService.java","395":"UserResource.java","396":"UserClient.java","397":"Note","398":"It is generally not advisable to share an interface between a server and a client.","399":"It introduces tight coupling, and also actually doesn't work with {5/} in its current form (method parameter mapping is not inherited).","400":"{8/} request/response compression","401":"You may consider enabling the request or response GZIP compression for your {8/} requests.","402":"You can do this by enabling one of the properties:","403":"{8/} request compression gives you settings similar to what you may set for your web server:","404":"These properties allow you to be selective about the compressed media types and minimum request threshold length.","405":"{8/} logging","406":"A logger is created for each {8/} client created.","407":"By default the name of the logger is the full class name of the interface used to create the {8/} client.","408":"{8/} logging only responds to the {299/} level.","409":"application.yml","410":"The {300/} object that you may configure per client, tells {8/} how much to log.","411":"Choices are:","412":"{301/}, No logging (DEFAULT).","413":"{302/}, Log only the request method and URL and the response status code and execution time.","414":"{303/}, Log the basic information along with request and response headers.","415":"{304/}, Log the headers, body, and metadata for both requests and responses.","416":"For example, the following would set the {305/} to {306/}:","417":"External Configuration: {18/}","418":"{18/} is the Netflix client side configuration library.","419":"It is the library used by all of the {4/} components for configuration.","420":"{18/} is an extension of the Apache Commons Configuration project.","421":"It allows updates to configuration by either polling a source for changes or for a source to push changes to the client.","422":"{18/} uses Dynamic<Type>Property classes as handles to properties.","423":"{18/} Example","424":"{18/} has its own set of configuration files and loading priorities.","425":"Spring applications should generally not use {18/} directly, but the need to configure the Netflix tools natively remains.","426":"{2/} has a Spring Environment Bridge so {18/} can read properties from the Spring Environment.","427":"This allows {3/} projects to use the normal configuration toolchain, while allowing them to configure the Netflix tools, for the most part, as documented.","428":"Router and Filter: {10/}","429":"Routing in an integral part of a microservice architecture.","430":"For example, {307/} may be mapped to your web application, {308/} is mapped to the user service and {309/} is mapped to the shop service.","431":"{10/} is a JVM based router and server side load balancer by Netflix.","432":"Netflix uses {10/} for the following:","433":"Authentication","434":"Insights","435":"Stress Testing","436":"Canary Testing","437":"Dynamic Routing","438":"Service Migration","439":"Load Shedding","440":"Security","441":"Static Response handling","442":"Active/Active traffic management","443":"{10/}’s rule engine allows rules and filters to be written in essentially any JVM language, with built in support for Java and Groovy.","444":"Note","445":"\nThe configuration property {310/} has been replaced by two new properties, {311/} and {312/} which default to 200 and 20 respectively.\n","446":"Note","447":"Default {14/} isolation pattern (ExecutionIsolationStrategy) for all routes is SEMAPHORE.","448":"{313/} can be changed to THREAD if this isolation pattern is preferred.","449":"How to Include {10/}","450":"To include {10/} in your project use the starter with group {314/} and artifact id {315/}.","451":"See the {2/} Project page for details on setting up your build system with the current {2/} Release Train.","452":"Embedded {10/} Reverse Proxy","453":"{2/} has created an embedded {10/} proxy to ease the development of a very common use case where a UI application wants to proxy calls to one or more back end services.","454":"This feature is useful for a user interface to proxy to the backend services it requires, avoiding the need to manage CORS and authentication concerns independently for all the backends.","455":"To enable it, annotate a {3/} main class with {316/}, and this forwards local calls to the appropriate service.","456":"By convention, a service with the ID \"users\", will receive requests from the proxy located at {317/} (with the prefix stripped).","457":"The proxy uses {17/} to locate an instance to forward to via discovery, and all requests are executed in a hystrix command , so failures will show up in {14/} metrics, and once the circuit is open the proxy will not try to contact the service.","458":"Note","459":"\nthe {10/} starter does not include a discovery client, so for\nroutes based on service IDs you need to provide one of those\non the classpath as well (e.g. {13/} is one choice).\n","460":"To skip having a service automatically added, set {318/} to a list of service id patterns.","461":"If a service matches a pattern that is ignored, but also included in the explicitly configured routes map, then it will be unignored.","462":"Example:","463":"application.yml","464":"In this example, all services are ignored except \"users\".","465":"To augment or change\nthe proxy routes, you can add external configuration like the\nfollowing:","466":"application.yml","467":"This means that http calls to \"/myusers\" get forwarded to the \"users\"\nservice (for example \"/myusers/101\" is forwarded to \"/101\").","468":"To get more fine-grained control over a route you can specify the path\nand the serviceId independently:","469":"application.yml","470":"This means that http calls to \"/myusers\" get forwarded to the \"users_service\" service.","471":"The route has to have a \"path\" which can be specified as an ant-style pattern, so \"/myusers/*\" only matches one level, but \"/myusers/**\" matches hierarchically.","472":"The location of the backend can be specified as either a \"serviceId\"\n(for a service from discovery) or a \"url\" (for a physical location), e.g.","473":"application.yml","474":"These simple url-routes don't get executed as a {319/} nor can you loadbalance multiple URLs with {17/}.","475":"To achieve this, specify a service-route and configure a {17/} client for the serviceId (this currently requires disabling {13/} support in {17/}: see above for more information ), eg","476":"application.yml","477":"You can provide convention between serviceId and routes using regexmapper.","478":"It uses regular expression named groups to extract variables from serviceId and inject them into a route pattern.","479":"ApplicationConfiguration.java","480":"This means that a serviceId \"myusers-v1\" will be mapped to route \"/v1/myusers/**\".","481":"Any regular expression is accepted but all named groups must be present in both servicePattern and routePattern.","482":"If servicePattern does not match a serviceId, the default behavior is used.","483":"In the example above, a serviceId \"myusers\" will be mapped to route \"/myusers/**\" (no version detected) This feature is disable by default and only applies to discovered services.","484":"To add a prefix to all mappings, set {320/} to a value, such as {321/}.","485":"The proxy prefix is stripped from the request before the request is forwarded by default (switch this behaviour off with {322/}).","486":"You can also switch off the stripping of the service-specific prefix from individual routes, eg","487":"application.yml","488":"Note","489":"{323/} only applies to the prefix set in {324/}.","490":"It does have any effect on prefixes defined within a given route's {325/}.","491":"In this example, requests to \"/myusers/101\" will be forwarded to \"/myusers/101\" on the \"users\" service.","492":"The {326/} entries actually bind to an object of type {327/}.","493":"If you look at the properties of that object you will see that it also has a \"retryable\" flag.","494":"Set that flag to \"true\" to have the {17/} client automatically retry failed requests (and if you need to you can modify the parameters of the retry operations using the {17/} client configuration).","495":"The {328/} header is added to the forwarded requests by default.","496":"To turn it off set {329/}.","497":"The prefix path is stripped by default, and the request to the backend picks up a header \"X-Forwarded-Prefix\" (\"/myusers\" in the examples above).","498":"An application with {330/} could act as a standalone\nserver if you set a default route (\"/\"), for example {331/} would route all traffic (i.e. \"/**\") to the \"home\" service.","499":"If more fine-grained ignoring is needed, you can specify specific patterns to ignore.","500":"These patterns are evaluated at the start of the route location process, which means prefixes should be included in the pattern to warrant a match.","501":"Ignored patterns span all services and supersede any other route specification.","502":"application.yml","503":"This means that all calls such as \"/myusers/101\" will be forwarded to \"/101\" on the \"users\" service.","504":"But calls including \"/admin/\" will not resolve.","505":"Warning","506":"If you need your routes to have their order preserved you need to use a YAML file as the ordering will be lost using a properties file.","507":"For example:","508":"application.yml","509":"If you were to use a properties file, the {332/} path may end up in front of the {333/}\npath rendering the {334/} path unreachable.","510":"{10/} Http Client","511":"The default HTTP client used by zuul is now backed by the Apache HTTP Client instead of the deprecated {17/} {335/}.","512":"To use {336/} or to use the {337/} set {338/} or {339/} respectively.","513":"Cookies and Sensitive Headers","514":"It's OK to share headers between services in the same system, but you probably don't want sensitive headers leaking downstream into external servers.","515":"You can specify a list of ignored headers as part of the route configuration.","516":"Cookies play a special role because they have well-defined semantics in browsers, and they are always to be treated as sensitive.","517":"If the consumer of your proxy is a browser, then cookies for downstream services also cause problems for the user because they all get jumbled up (all downstream services look like they come from the same place).","518":"If you are careful with the design of your services, for example if only one of the downstream services sets cookies, then you might be able to let them flow from the backend all the way up to the caller.","519":"Also, if your proxy sets cookies and all your back end services are part of the same system, it can be natural to simply share them (and for instance use Spring Session to link them up to some shared state).","520":"Other than that, any cookies that get set by downstream services are likely to be not very useful to the caller, so it is recommended that you make (at least) \"Set-Cookie\" and \"Cookie\" into sensitive headers for routes that are not part of your domain.","521":"Even for routes that are part of your domain, try to think carefully about what it means before allowing cookies to flow between them and the proxy.","522":"The sensitive headers can be configured as a comma-separated list per\nroute, e.g.","523":"application.yml","524":"Note","525":"this is the default value for {340/}, so you don't need to set it unless you want it to be different.","526":"NB this is new in {2/} Netflix 1.1 (in 1.0 the user had no control over headers and all cookies flow in both directions).","527":"The {341/} are a blacklist and the default is not empty, so to make {10/} send all headers (except the \"ignored\" ones) you would have to explicitly set it to the empty list.","528":"This is necessary if you want to pass cookie or authorization headers to your back end.","529":"Example:","530":"application.yml","531":"Sensitive headers can also be set globally by setting {342/}.","532":"If {343/} is set on a route, this will override the global {344/} setting.","533":"Ignored Headers","534":"In addition to the per-route sensitive headers, you can set a global value for {345/} for values that should be discarded (both request and response) during interactions with downstream services.","535":"By default these are empty, if Spring Security is not on the classpath, and otherwise they are initialized to a set of well-known \"security\" headers (eg involving caching) as specified by Spring Security.","536":"The assumption in this case is that the downstream services might add these headers too, and we want the values from the proxy.","537":"To not discard these well known security headers in case Spring Security is on the classpath you can set {346/} to {347/}.","538":"This can be useful if you disabled the HTTP Security response headers in Spring Security and want the values provided by downstream services","539":"The Routes Endpoint","540":"If you are using {348/} with tha {0/} you will enable (by default) an additional endpoint, available via HTTP as {349/}.","541":"A GET to this endpoint will return a list of the mapped routes.","542":"A POST will force a refresh of the existing routes (eg in case there have been changes in the service catalog).","543":"You can disable this endpoint by setting {350/} to {351/}.","544":"Note","545":"\nthe routes should respond automatically to changes in the\nservice catalog, but the POST to /routes is a way to force the change\nto happen immediately.\n","546":"Strangulation Patterns and Local Forwards","547":"A common pattern when migrating an existing application or API is to \"strangle\" old endpoints, slowly replacing them with different implementations.","548":"The {10/} proxy is a useful tool for this because you can use it to handle all traffic from clients of the old endpoints, but redirect some of the requests to new ones.","549":"Example configuration:","550":"application.yml","551":"In this example we are strangling the \"legacy\" app which is mapped to all requests that do not match one of the other patterns.","552":"Paths in {352/} have been extracted into a new service with an external URL.","553":"And paths in {353/} are forwarded so they can be handled locally, eg with a normal Spring {354/}.","554":"Paths in {355/} are also forwarded, but with a different prefix (ie {356/} is forwarded to {357/}).","555":"Note","556":"\nThe ignored patterns aren’t completely ignored, they just\naren’t handled by the proxy (so they are also effectively forwarded\nlocally).\n","557":"Uploading Files through {10/}","558":"If you {358/} you can use the proxy paths to upload files and it should just work as long as the files are small.","559":"For large files there is an alternative path which bypasses the Spring {359/} (to avoid multipart processing) in \"/zuul/*\".","560":"Ie if {360/} then you can POST large files to \"/zuul/customers/*\".","561":"The servlet path is externalized via {361/}.","562":"Extremely large files will also require elevated timeout settings if the proxy route takes you through a {17/} load balancer, eg","563":"application.yml","564":"Note that for streaming to work with large files, you need to use chunked encoding in the request (which some browsers do not do by default).","565":"Eg on the command line:","566":"Query String Encoding","567":"When processing the incoming request, query params are decoded so they can be available for possible modifications in {10/} filters.","568":"They are then re-encoded when building the backend request in the route filters.","569":"The result can be different than the original input if it was encoded using Javascript's {362/} method for example.","570":"While this causes no issues in most cases, some web servers can be picky with the encoding of complex query string.","571":"To force the original encoding of the query string, it is possible to pass a special flag to {363/} so\nthat the query string is taken as is with the {364/} method :","572":"application.yml","573":"Note: This special flag only works with {365/} and you loose the ability to easily override\nquery parameters with {366/} since\nthe query string is now fetched directly on the original {367/}.","574":"Plain Embedded {10/}","575":"You can also run a {10/} server without the proxying, or switch on parts of the proxying platform selectively, if you use {368/} (instead of {369/}).","576":"Any beans that you add to the application of type {370/} will be installed automatically, as they are with {371/}, but without any of the proxy filters being added automatically.","577":"In this case the routes into the {10/} server are still specified by configuring \"zuul.routes.*\", but there is no service discovery and no proxying, so the \"serviceId\" and \"url\" settings are ignored.","578":"For example:","579":"application.yml","580":"maps all paths in \"/api/**\" to the {10/} filter chain.","581":"Disable {10/} Filters","582":"{10/} for {2/} comes with a number of {372/} beans enabled by default in both proxy and server mode.","583":"See the zuul filters package for the possible filters that are enabled.","584":"If you want to disable one, simply set {373/}.","585":"By convention, the package after {374/} is the {10/} filter type.","586":"For example to disable {375/} set {376/}.","587":"Providing {14/} Fallbacks For Routes","588":"When a circuit for a given route in {10/} is tripped you can provide a fallback response by creating a bean of type {377/}.","589":"Within this bean you need to specify the route ID the fallback is for and provide a {378/} to return as a fallback.","590":"Here is a very simple {379/} implementation.","591":"And here is what the route configuration would look like.","592":"If you would like to provide a default fallback for all routes than you can create a bean of\ntype {380/} and have the {381/} method return {382/} or {383/}.","593":"{10/} Developer Guide","594":"For a general overview of how {10/} works, please see the {10/} Wiki.","595":"The {10/} Servlet","596":"{10/} is implemented as a Servlet.","597":"For the general cases, {10/} is embedded into the Spring Dispatch mechanism.","598":"This allows {5/} to be in control of the routing.","599":"In this case, {10/} is configured to buffer requests.","600":"If there is a need to go through {10/} without buffering requests (eg for large file uploads), the Servlet is also installed outside of the Spring Dispatcher.","601":"By default, this is located at {384/}.","602":"This path can be changed with the {385/} property.","603":"{10/} RequestContext","604":"To pass information between filters, {10/} uses a .","605":"Its data is held in a {386/} specific to each request.","606":"Information about where to route requests, errors and the actual {387/} and {388/} are stored there.","607":"The {389/} extends {390/}, so anything can be stored in the context.","608":"contains the keys that are used by the filters installed by {2/} Netflix (more on these later).","609":"{391/} vs. {392/}","610":"{2/} Netflix installs a number of filters based on which annotation was used to enable {10/}.","611":"{393/} is a superset of {394/}.","612":"In other words, {395/} contains all filters installed by {396/}.","613":"The additional filters in the \"proxy\" enable routing functionality.","614":"If you want a \"blank\" {10/}, you should use {397/}.","615":"{398/} Filters","616":"Creates a {399/} that loads route definitions from {3/} configuration files.","617":"The following filters are installed (as normal Spring Beans):","618":"Pre filters:","619":"{400/}: Detects if the request is through the Spring Dispatcher.","620":"Sets boolean with key {401/}.","621":"{402/}: Parses form data and reencodes it for downstream requests.","622":"{403/}: if the {404/} request parameter is set, this filter sets {405/} and {406/} to true.","623":"Route filters:","624":"{407/}: This filter forwards requests using the Servlet {408/}.","625":"The forwarding location is stored in the {409/} attribute {410/}.","626":"This is useful for forwarding to endpoints in the current application.","627":"Post filters:","628":"{411/}: Writes responses from proxied requests to the current response.","629":"Error filters:","630":"{412/}: Forwards to /error (by default) if {413/} is not null.","631":"The default forwarding path ({414/}) can be changed by setting the {415/} property.","632":"{416/} Filters","633":"Creates a {417/} that loads route definitions from a {418/} (like {13/}), as well as from properties.","634":"A route is created for each {419/} from the {420/}.","635":"As new services are added, the routes will be refreshed.","636":"In addition to the filters described above, the following filters are installed (as normal Spring Beans):","637":"Pre filters:","638":"{421/}: This filter determines where and how to route based on the supplied {422/}.","639":"It also sets various proxy-related headers for downstream requests.","640":"Route filters:","641":"{423/}: This filter uses {17/}, {14/} and pluggable HTTP clients to send requests.","642":"Service ids are found in the {424/} attribute {425/}.","643":"This filter can use different HTTP clients.","644":"They are:","645":"Apache {426/}.","646":"This is the default client.","647":"Squareup {427/} v3.","648":"This is enabled by having the {428/} library on the classpath and setting {429/}.","649":"Netflix {17/} HTTP client.","650":"This is enabled by setting {430/}.","651":"This client has limitations, such as it doesn't support the PATCH method, but also has built-in retry.","652":"{431/}: This filter sends requests to predetermined URLs via an Apache HttpClient.","653":"URLs are found in {432/}.","654":"Custom {10/} Filter examples","655":"Most of the following \"How to Write\" examples below are included Sample {10/} Filters project.","656":"There are also examples of manipulating the request or response body in that repository.","657":"How to Write a Pre Filter","658":"Pre filters are used to set up data in the {433/} for use in filters downstream.","659":"The main use case is to set information required for route filters.","660":"The filter above populates {434/} from the {435/} request parameter.","661":"In reality, it's not a good idea to do that kind of direct mapping, but the service id should be looked up from the value of {436/} instead.","662":"Now that {437/} is populated, {438/} won't run and {439/} will.","663":"If you wanted to route to a full URL instead, call {440/} instead.","664":"To modify the path that routing filters will forward to, set the {441/}.","665":"How to Write a Route Filter","666":"Route filters are run after pre filters and are used to make requests to other services.","667":"Much of the work here is to translate request and response data to and from the client required model.","668":"The above filter translates Servlet request information into OkHttp3 request information, executes an HTTP request, then translates OkHttp3 reponse information to the Servlet response.","669":"WARNING: this filter might have bugs and not function correctly.","670":"How to Write a Post Filter","671":"Post filters typically manipulate the response.","672":"In the filter below, we add a random {442/} as the {443/} header.","673":"Other manipulations, such as transforming the response body, are much more complex and compute-intensive.","674":"How {10/} Errors Work","675":"If an exception is thrown during any portion of the {10/} filter lifecycle, the error filters are executed.","676":"The {444/} is only run if {445/} is not {446/}.","677":"It then sets specific {447/} attributes in the request and forwards the request to the {3/} error page.","678":"{10/} Eager Application Context Loading","679":"{10/} internally uses {17/} for calling the remote url's and {17/} clients are by default lazily loaded up by {2/} on first call.","680":"This behavior can be changed for {10/} using the following configuration and will result in the child {17/} related Application contexts being eagerly loaded up at application startup time.","681":"application.yml","682":"{11/} support with {9/}","683":"Do you have non-jvm languages you want to take advantage of {13/}, {17/} and Config Server?","684":"The {2/} Netflix {9/} was inspired by Netflix Prana .","685":"It includes a simple http api to get all of the instances (ie host and port) for a given service.","686":"You can also proxy service calls through an embedded {10/} proxy which gets its route entries from {13/}.","687":"The {2/} Config Server can be accessed directly via host lookup or through the {10/} Proxy.","688":"The non-jvm app should implement a health check so the {9/} can report to eureka if the app is up or down.","689":"To include {9/} in your project use the dependency with group {448/}\nand artifact id {449/}.","690":"To enable the {9/}, create a {3/} application with {450/}.","691":"This annotation includes {451/}, {452/}, and {453/}.","692":"Run the resulting application on the same host as the non-jvm application.","693":"To configure the side car add {454/} and {455/} to {456/}.","694":"The {457/} property is the port the non-jvm app is listening on.","695":"This is so the {9/} can properly register the app with {13/}.","696":"The {458/} is a uri accessible on the non-jvm app that mimicks a {3/} health indicator.","697":"It should return a json document like the following:","698":"health-uri-document","699":"Here is an example application.yml for a {9/} application:","700":"application.yml","701":"The api for the {459/} method is {460/}.","702":"Here is an example response for {461/} that returns two instances on different hosts.","703":"This api is accessible to the non-jvm app (if the sidecar is on port 5678) at {462/}.","704":"/hosts/customers","705":"The {10/} proxy automatically adds routes for each service known in eureka to {463/}, so the customers service is available at {464/}.","706":"The Non-jvm app can access the customer service via {465/} (assuming the sidecar is listening on port 5678).","707":"If the Config Server is registered with {13/}, non-jvm application can access it via the {10/} proxy.","708":"If the serviceId of the ConfigServer is {466/} and the {9/} is on port 5678, then it can be accessed at http://localhost:5678/configserver","709":"Non-jvm app can take advantage of the Config Server's ability to return YAML documents.","710":"For example, a call to http://sidecar.local.spring.io:5678/configserver/default-master.yml might result in a YAML document like the following","711":"{12/} with {5/}","712":"{2/} Netflix includes {12/}.","713":"{12/} is a Java VM implementation of Reactive Extensions: a library for composing asynchronous and event-based programs by using observable sequences.","714":"{2/} Netflix provides support for returning {467/} objects from {5/} Controllers.","715":"It also supports using {468/} objects for Server-sent events (SSE) .","716":"This can be very convenient if your internal APIs are already built using {12/} (see {8/} {14/} Support for examples).","717":"Here are some examples of using {469/}:","718":"If you have an {470/}, rather than a single, you can use {471/} or {472/}.","719":"Here are some examples:","720":"If you have a streaming endpoint and client, SSE could be an option.","721":"To convert {473/} to a Spring {474/} use {475/}.","722":"Here are some examples:","723":"Metrics: {6/}, {16/}, and {15/}","724":"When used together, {6/}/{16/} and {15/} provide a near real-time operational insight platform.","725":"{6/} and {16/} are Netflix's metrics collection libraries.","726":"{15/} is a Netflix metrics backend to manage dimensional time series data.","727":"{16/} served Netflix for several years and is still usable, but is gradually being phased out in favor of {6/}, which is only designed to work with Java 8. {2/} Netflix provides support for both, but Java 8 based applications are encouraged to use {6/}.","728":"Dimensional vs. Hierarchical Metrics","729":"{0/} metrics are hierarchical and metrics are separated only by name.","730":"These names often follow a naming convention that embeds key/value attribute pairs (dimensions) into the name separated by periods.","731":"Consider the following metrics for two endpoints, root and star-star:","732":"The first metric gives us a normalized count of successful requests against the root endpoint per unit of time.","733":"But what if the system had 20 endpoints and you want to get a count of successful requests against all the endpoints?","734":"Some hierarchical metrics backends would allow you to specify a wild card such as {476/} that would read all 20 metrics and aggregate the results.","735":"Alternatively, you could provide a {477/} that intercepts and records a metric like {478/} for all successful requests irrespective of the endpoint, but now you must write 20+1 different metrics.","736":"Similarly if you want to know the total number of successful requests for all endpoints in the service, you could specify a wild card such as {479/} {480/}.","737":"Even in the presence of wildcarding support on a hierarchical metrics backend, naming consistency can be difficult.","738":"Specifically the position of these tags in the name string can slip with time, breaking queries.","739":"For example, suppose we add an additional dimension to the hierarchical metrics above for HTTP method.","740":"Then {481/} becomes {482/}, etc. Our {483/} suddenly no longer has the same semantic meaning.","741":"Furthermore, if the new dimension is not applied uniformly across the codebase, certain queries may become impossible.","742":"This can quickly get out of hand.","743":"Netflix metrics are tagged (aka dimensional).","744":"Each metric has a name, but this single named metric can contain multiple statistics and 'tag' key/value pairs that allows more querying flexibility.","745":"In fact, the statistics themselves are recorded in a special tag.","746":"Recorded with Netflix {16/} or {6/}, a timer for the root endpoint described above contains 4 statistics per status code, where the count statistic is identical to {0/}'s counter.","747":"In the event that we have encountered an HTTP 200 and 400 thus far, there will be 8 available data points:","748":"Default Metrics Collection","749":"Without any additional dependencies or configuration, a {2/} based service will autoconfigure a {16/} {484/} and begin collecting metrics on every {5/} request.","750":"By default, a {16/} timer with the name {485/} will be recorded for each MVC request which is tagged with:","751":"HTTP method","752":"HTTP status (e.g. 200, 400, 500)","753":"URI (or \"root\" if the URI is empty), sanitized for {15/}","754":"The exception class name, if the request handler threw an exception","755":"The caller, if a request header with a key matching {486/} is set on the request.","756":"There is no default key for {487/}.","757":"You must add it to your application properties if you wish to collect caller information.","758":"Set the {488/} property to change the name of the metric from {489/} to a name you provide.","759":"If Spring AOP is enabled and {490/} is present on your runtime classpath, {2/} will also collect metrics on every client call made with {491/}.","760":"A {16/} timer with the name of {492/} will be recorded for each MVC request which is tagged with:","761":"HTTP method","762":"HTTP status (e.g. 200, 400, 500), \"CLIENT_ERROR\" if the response returned null, or \"IO_ERROR\" if an {493/} occurred during the execution of the {494/} method","763":"URI, sanitized for {15/}","764":"Client name","765":"Warning","766":"Avoid using hardcoded url parameters within {495/}.","767":"When targeting dynamic endpoints use URL variables.","768":"This will avoid potential \"GC Overhead Limit Reached\" issues where {496/} treats each url as a unique key.","769":"Metrics Collection: {6/}","770":"To enable {6/} metrics, include a dependency on {497/}:","771":"In {6/} parlance, a meter is a named, typed, and tagged configuration and a metric represents the value of a given meter at a point in time.","772":"{6/} meters are created and controlled by a registry, which currently has several different implementations.","773":"{6/} provides 4 meter types: counter, timer, gauge, and distribution summary.","774":"{2/} {6/} integration configures an injectable {498/} instance for you.","775":"Specifically, it configures a {499/} instance in order to unify the collection of REST metrics and the exporting of metrics to the {15/} backend under a single {16/} API.","776":"Practically, this means that your code may use a mixture of {16/} monitors and {6/} meters and both will be scooped up by {0/} {500/} instances and both will be shipped to the {15/} backend.","777":"{6/} Counter","778":"A counter is used to measure the rate at which some event is occurring.","779":"The counter records a single time-normalized statistic.","780":"{6/} Timer","781":"A timer is used to measure how long some event is taking.","782":"{2/} automatically records timers for {5/} requests and conditionally {501/} requests, which can later be used to create dashboards for request related metrics like latency:","783":"Figure 4. Request Latency","784":"The timer simultaneously records 4 statistics: count, max, totalOfSquares, and totalTime.","785":"The count statistic will always match the single normalized value provided by a counter if you had called {502/} once on the counter for each time you recorded a timing, so it is rarely necessary to count and time separately for a single operation.","786":"For long running operations, {6/} provides a special {503/}.","787":"{6/} Gauge","788":"Gauges are used to determine some current value like the size of a queue or number of threads in a running state.","789":"Since gauges are sampled, they provide no information about how these values fluctuate between samples.","790":"The normal use of a gauge involves registering the gauge once in initialization with an id, a reference to the object to be sampled, and a function to get or compute a numeric value based on the object.","791":"The reference to the object is passed in separately and the {6/} registry will keep a weak reference to the object.","792":"If the object is garbage collected, then {6/} will automatically drop the registration.","793":"See the note in {6/}'s documentation about potential memory leaks if this API is misused.","794":"{6/} Distribution Summaries","795":"A distribution summary is used to track the distribution of events.","796":"It is similar to a timer, but more general in that the size does not have to be a period of time.","797":"For example, a distribution summary could be used to measure the payload sizes of requests hitting a server.","798":"Metrics Collection: {16/}","799":"Warning","800":"\nIf your code is compiled on Java 8, please use {6/} instead of {16/} as {6/} is destined to replace {16/} entirely in the long term.\n","801":"In {16/} parlance, a monitor is a named, typed, and tagged configuration and a metric represents the value of a given monitor at a point in time.","802":"{16/} monitors are logically equivalent to {6/} meters.","803":"{16/} monitors are created and controlled by a {504/}.","804":"In spite of the above warning, {16/} does have a wider array of monitor options than {6/} has meters.","805":"{2/} integration configures an injectable {505/} instance for you.","806":"Once you have created the appropriate {506/} type in {16/}, the process of recording data is wholly similar to {6/}.","807":"Creating {16/} Monitors","808":"If you are using the {16/} {507/} instance provided by {2/} (specifically, an instance of {508/}), {16/} provides convenience classes for retrieving counters and timers .","809":"These convenience classes ensure that only one {509/} is registered for each unique combination of name and tags.","810":"To manually create a Monitor type in {16/}, especially for the more exotic monitor types for which convenience methods are not provided, instantiate the appropriate type by providing a {510/} instance:","811":"Metrics Backend: {15/}","812":"{15/} was developed by Netflix to manage dimensional time series data for near real-time operational insight.","813":"{15/} features in-memory data storage, allowing it to gather and report very large numbers of metrics, very quickly.","814":"{15/} captures operational intelligence.","815":"Whereas business intelligence is data gathered for analyzing trends over time, operational intelligence provides a picture of what is currently happening within a system.","816":"{2/} provides a {511/} that has all the dependencies you need.","817":"Then just annotate your {3/} application with {512/} and provide a location for your running {15/} server with the {513/} property.","818":"Global tags","819":"{2/} enables you to add tags to every metric sent to the {15/} backend.","820":"Global tags can be used to separate metrics by application name, environment, region, etc.","821":"Each bean implementing {514/} will contribute to the global tag list:","822":"Using {15/}","823":"To bootstrap a in-memory standalone {15/} instance:","824":"Tip","825":"\nAn {15/} standalone node running on an r3.2xlarge (61GB RAM) can handle roughly 2 million metrics per minute for a given 6 hour window.\n","826":"Once running and you have collected a handful of metrics, verify that your setup is correct by listing tags on the {15/} server:","827":"Tip","828":"\nAfter executing several requests against your service, you can gather some very basic information on the request latency of every request by pasting the following url in your browser: {515/}\n","829":"The {15/} wiki contains a compilation of sample queries for various scenarios.","830":"Make sure to check out the alerting philosophy and docs on using double exponential smoothing to generate dynamic alert thresholds.","831":"Retrying Failed Requests","832":"{2/} Netflix offers a variety of ways to make HTTP requests.","833":"You can use a load balanced {516/}, {17/}, or {8/}.","834":"No matter how you choose to your HTTP requests, there is always a chance the request may fail.","835":"When a request fails you may want to have the request retried automatically.","836":"To accomplish this when using Sping Cloud Netflix you need to include Spring Retry on your application's classpath.","837":"When Spring Retry is present load balanced {517/}, {8/}, and {10/} will automatically retry any failed requests (assuming you configuration allows it to).","838":"Configuration","839":"Anytime {17/} is used with Spring Retry you can control the retry functionality by configuring certain {17/} properties.","840":"The properties you can use are {518/}, {519/}, and {520/}.","841":"See the {17/} documentation for a description of what there properties do.","842":"In addition you may want to retry requests when certain status codes are returned in the response.","843":"You can list the response codes you would like the {17/} client to retry using the property {521/}.","844":"For example","845":"You can also create a bean of type {522/} and implement the {523/}\nmethod to determine whether you want to retry a request given the status code.","847":"You can turn off {10/}'s retry functionality by setting {524/} to {525/}.","848":"You can also disable retry functionality on route by route basis by setting {526/} to {527/}."},"errors":{},"nouns":{"0":"Spring Boot Actuator","1":"Turbine Stream","2":"Spring Cloud","3":"Spring Boot","4":"Netflix OSS","5":"Spring MVC","6":"Spectator","7":"Turbine","8":"Feign","9":"Sidecar","10":"Zuul","11":"Polyglot","12":"RxJava","13":"Eureka","14":"Hystrix","15":"Atlas","16":"Servo","17":"Ribbon","18":"Archaius"},"name":"spring-cloud-netflix","timestamp":1494115323471});</script></body></html>