<!DOCTYPE html><html lang="zh-CN"><head>
<meta charset="UTF-8">
<!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge"><![endif]-->
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 1.5.4">
<meta name="author" content="Stephane Maldini, Simon Baslé">
<title>Reactor Core 中文文档 参考手册 中文版</title>
<style>
@import url(https://fonts.googleapis.com/css?family=Montserrat:400,700);
@import url(https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/1.6.2/semantic.min.css);


#header .details br+span.author:before {
    content: "\00a0\0026\00a0";
    color: rgba(0,0,0,.85);
}

#header .details br+span.email:before {
    content: "(";
}

#header .details br+span.email:after {
    content: ")";
}

/*! normalize.css v2.1.2 | MIT License | git.io/normalize */
/* ========================================================================== HTML5 display definitions ========================================================================== */
/** Correct `block` display not defined in IE 8/9. */
@import url(http://cdnjs.cloudflare.com/ajax/libs/font-awesome/3.2.1/css/font-awesome.css);

article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary {
    display: block;
}

/** Correct `inline-block` display not defined in IE 8/9. */
audio, canvas, video {
    display: inline-block;
}

/** Prevent modern browsers from displaying `audio` without controls. Remove excess height in iOS 5 devices. */
audio:not([controls]) {
    display: none;
    height: 0;
}

/** Address `[hidden]` styling not present in IE 8/9. Hide the `template` element in IE, Safari, and Firefox < 22. */
[hidden], template {
    display: none;
}

script {
    display: none !important;
}

/* ========================================================================== Base ========================================================================== */
/** 1. Set default font family to sans-serif. 2. Prevent iOS text size adjust after orientation change, without disabling user zoom. */
html {
    font-family: sans-serif; /* 1 */
    -ms-text-size-adjust: 100%; /* 2 */
    -webkit-text-size-adjust: 100%; /* 2 */
}

/** Remove default margin. */
body {
    margin: 0;
}

/* ========================================================================== Links ========================================================================== */
/** Remove the gray background color from active links in IE 10. */
a {
    background: transparent;
}

/** Address `outline` inconsistency between Chrome and other browsers. */
a:focus {
    outline: thin dotted;
}

/** Improve readability when focused and also mouse hovered in all browsers. */
a:active, a:hover {
    outline: 0;
}

/* ========================================================================== Typography ========================================================================== */
/** Address variable `h1` font-size and margin within `section` and `article` contexts in Firefox 4+, Safari 5, and Chrome. */
h1 {
    font-size: 2em;
    margin: 1.2em 0;
}

/** Address styling not present in IE 8/9, Safari 5, and Chrome. */
abbr[title] {
    border-bottom: 1px dotted;
}

/** Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome. */
b, strong {
    font-weight: bold;
}

/** Address styling not present in Safari 5 and Chrome. */
dfn {
    font-style: italic;
}

/** Address differences between Firefox and other browsers. */
hr {
    -moz-box-sizing: content-box;
    box-sizing: content-box;
    height: 0;
}

/** Address styling not present in IE 8/9. */
mark {
    background: #ff0;
    color: #000;
}

/** Correct font family set oddly in Safari 5 and Chrome. */
code, kbd, pre, samp {
    font-family: monospace, serif;
    font-size: 1em;
}

/** Improve readability of pre-formatted text in all browsers. */
pre {
    white-space: pre-wrap;
}

/** Set consistent quote types. */
q {
    quotes: "\201C" "\201D" "\2018" "\2019";
}

/** Address inconsistent and variable font size in all browsers. */
small {
    font-size: 80%;
}

/** Prevent `sub` and `sup` affecting `line-height` in all browsers. */
sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

sup {
    top: -0.5em;
}

sub {
    bottom: -0.25em;
}

/* ========================================================================== Embedded content ========================================================================== */
/** Remove border when inside `a` element in IE 8/9. */
img {
    border: 0;
}

/** Correct overflow displayed oddly in IE 9. */
svg:not(:root) {
    overflow: hidden;
}

/* ========================================================================== Figures ========================================================================== */
/** Address margin not present in IE 8/9 and Safari 5. */
figure {
    margin: 0;
}

/* ========================================================================== Forms ========================================================================== */
/** Define consistent border, margin, and padding. */
fieldset {
    border: 1px solid #c0c0c0;
    margin: 0 2px;
    padding: 0.35em 0.625em 0.75em;
}

/** 1. Correct `color` not being inherited in IE 8/9. 2. Remove padding so people aren't caught out if they zero out fieldsets. */
legend {
    border: 0; /* 1 */
    padding: 0; /* 2 */
}

/** 1. Correct font family not being inherited in all browsers. 2. Correct font size not being inherited in all browsers. 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome. */
button, input, select, textarea {
    font-family: inherit; /* 1 */
    font-size: 100%; /* 2 */
    margin: 0; /* 3 */
}

/** Address Firefox 4+ setting `line-height` on `input` using `!important` in the UA stylesheet. */
button, input {
    line-height: normal;
}

/** Address inconsistent `text-transform` inheritance for `button` and `select`. All other form control elements do not inherit `text-transform` values. Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+. Correct `select` style inheritance in Firefox 4+ and Opera. */
button, select {
    text-transform: none;
}

/** 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio` and `video` controls. 2. Correct inability to style clickable `input` types in iOS. 3. Improve usability and consistency of cursor style between image-type `input` and others. */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
    -webkit-appearance: button; /* 2 */
    cursor: pointer; /* 3 */
}

/** Re-set default cursor for disabled elements. */
button[disabled], html input[disabled] {
    cursor: default;
}

/** 1. Address box sizing set to `content-box` in IE 8/9. 2. Remove excess padding in IE 8/9. */
input[type="checkbox"], input[type="radio"] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
}

/** 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome. 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome (include `-moz` to future-proof). */
input[type="search"] {
    -webkit-appearance: textfield; /* 1 */
    -moz-box-sizing: content-box;
    -webkit-box-sizing: content-box; /* 2 */
    box-sizing: content-box;
}

/** Remove inner padding and search cancel button in Safari 5 and Chrome on OS X. */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}

/** Remove inner padding and border in Firefox 4+. */
button::-moz-focus-inner, input::-moz-focus-inner {
    border: 0;
    padding: 0;
}

/** 1. Remove default vertical scrollbar in IE 8/9. 2. Improve readability and alignment in all browsers. */
textarea {
    overflow: auto; /* 1 */
    vertical-align: top; /* 2 */
}

/* ========================================================================== Tables ========================================================================== */
/** Remove most spacing between table cells. */
table {
    border-collapse: collapse;
    border-spacing: 0;
}

meta.foundation-mq-small {
    font-family: "only screen and (min-width: 768px)";
    width: 768px;
}

meta.foundation-mq-medium {
    font-family: "only screen and (min-width:1280px)";
    width: 1280px;
}

meta.foundation-mq-large {
    font-family: "only screen and (min-width:1440px)";
    width: 1440px;
}

*, *:before, *:after {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}

html, body {
    font-size: 100%;
}

body {
    background: white;
    color: #34302d;
    padding: 0;
    margin: 0;
    font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
    font-weight: normal;
    font-style: normal;
    line-height: 1.8em;
    position: relative;
    cursor: auto;
}

#content, #content p {
    line-height: 1.8em;
    margin-top: 1.5em;
}

#content li p {
  margin-top: 0.25em;
}

a:hover {
    cursor: pointer;
}

img, object, embed {
    max-width: 100%;
    height: auto;
}

object, embed {
    height: 100%;
}

img {
    -ms-interpolation-mode: bicubic;
}

#map_canvas img, #map_canvas embed, #map_canvas object, .map_canvas img, .map_canvas embed, .map_canvas object {
    max-width: none !important;
}

.left {
    float: left !important;
}

.right {
    float: right !important;
}

.text-left {
    text-align: left !important;
}

.text-right {
    text-align: right !important;
}

.text-center {
    text-align: center !important;
}

.text-justify {
    text-align: justify !important;
}

.hide {
    display: none;
}

.antialiased, body {
    -webkit-font-smoothing: antialiased;
}

img {
    display: inline-block;
    vertical-align: middle;
}

textarea {
    height: auto;
    min-height: 50px;
}

select {
    width: 100%;
}

p.lead, .paragraph.lead > p, #preamble > .sectionbody > .paragraph:first-of-type p {
    font-size: 1.21875em;
}

.subheader, #content #toctitle, .admonitionblock td.content > .title, .exampleblock > .title, .imageblock > .title, .listingblock > .title, .literalblock > .title, .mathblock > .title, .openblock > .title, .paragraph > .title, .quoteblock > .title, .sidebarblock > .title, .tableblock > .title, .verseblock > .title, .videoblock > .title, .dlist > .title, .olist > .title, .ulist > .title, .qlist > .title, .hdlist > .title, .tableblock > caption {
    color: #6db33f;
    font-weight: 300;
    margin-top: 0.2em;
    margin-bottom: 0.5em;
}

/* Typography resets */
div, dl, dt, dd, ul, ol, li, h1, h2, h3, #toctitle, .sidebarblock > .content > .title, h4, h5, h6, pre, form, p, blockquote, th, td {
    margin: 0;
    padding: 0;
    direction: ltr;
}

/* Default Link Styles */
a {
    color: #6db33f;
    line-height: inherit;
    text-decoration: none;
}

a:hover, a:focus {
    color: #6db33f;
    text-decoration: underline;
}

a img {
    border: none;
}

/* Default paragraph styles */
p {
    font-family: inherit;
    font-weight: normal;
    font-size: 1em;
    margin-bottom: 1.25em;
    text-rendering: optimizeLegibility;
}

p aside {
    font-size: 0.875em;
    font-style: italic;
}

/* Default header styles */
h1, h2, h3, #toctitle, .sidebarblock > .content > .title, h4, h5, h6 {
    font-family: "Montserrat", Arial, sans-serif;
    font-weight: normal;
    font-style: normal;
    color: #34302d;
    text-rendering: optimizeLegibility;
    margin-top: 1.6em;
    margin-bottom: 0.6em;
}

h1 small, h2 small, h3 small, #toctitle small, .sidebarblock > .content > .title small, h4 small, h5 small, h6 small {
    font-size: 60%;
    color: #6db33f;
    line-height: 0;
}

h1 {
    font-size: 2.125em;
}

h2 {
    font-size: 1.6875em;
}

h3, #toctitle, .sidebarblock > .content > .title {
    font-size: 1.375em;
}

h4 {
    font-size: 1.125em;
}

h5 {
    font-size: 1.125em;
}

h6 {
    font-size: 1em;
}

hr {
    border: solid #dcd2c9;
    border-width: 1px 0 0;
    clear: both;
    margin: 1.25em 0 1.1875em;
    height: 0;
}

/* Helpful Typography Defaults */
em, i {
    font-style: italic;
    line-height: inherit;
}

strong, b {
    font-weight: bold;
    line-height: inherit;
}

small {
    font-size: 60%;
    line-height: inherit;
}

code {
    font-family: Consolas, "Liberation Mono", Courier, monospace;
    font-weight: bold;
    color: #305CB5;
}

/* Lists */
ul, ol, dl {
    font-size: 1em;
    margin-bottom: 1.25em;
    list-style-position: outside;
    font-family: inherit;
}

ul, ol {
    margin-left: 1.5em;
}

ul.no-bullet, ol.no-bullet {
    margin-left: 1.5em;
}

/* Unordered Lists */
ul li ul, ul li ol {
    margin-left: 1.25em;
    margin-bottom: 0;
    font-size: 1em; /* Override nested font-size change */
}

ul.square li ul, ul.circle li ul, ul.disc li ul {
    list-style: inherit;
}

ul.square {
    list-style-type: square;
}

ul.circle {
    list-style-type: circle;
}

ul.disc {
    list-style-type: disc;
}

ul.no-bullet {
    list-style: none;
}

/* Ordered Lists */
ol li ul, ol li ol {
    margin-left: 1.25em;
    margin-bottom: 0;
}

/* Definition Lists */
dl dt {
    margin-bottom: 0.3125em;
    font-weight: bold;
}

dl dd {
    margin-bottom: 1.25em;
}

/* Abbreviations */
abbr, acronym {
    text-transform: uppercase;
    font-size: 90%;
    color: #34302d;
    border-bottom: 1px dotted #dddddd;
    cursor: help;
}

abbr {
    text-transform: none;
}

/* Blockquotes */
blockquote {
    margin: 0 0 1.25em;
    padding: 0.5625em 1.25em 0 1.1875em;
    border-left: 1px solid #dddddd;
}

blockquote cite {
    display: block;
    font-size: 0.8125em;
    color: #655241;
}

blockquote cite:before {
    content: "\2014 \0020";
}

blockquote cite a, blockquote cite a:visited {
    color: #655241;
}

blockquote, blockquote p {
    color: #34302d;
}

/* Microformats */
.vcard {
    display: inline-block;
    margin: 0 0 1.25em 0;
    border: 1px solid #dddddd;
    padding: 0.625em 0.75em;
}

.vcard li {
    margin: 0;
    display: block;
}

.vcard .fn {
    font-weight: bold;
    font-size: 0.9375em;
}

.vevent .summary {
    font-weight: bold;
}

.vevent abbr {
    cursor: auto;
    text-decoration: none;
    font-weight: bold;
    border: none;
    padding: 0 0.0625em;
}

@media only screen and (min-width: 768px) {
    h1, h2, h3, #toctitle, .sidebarblock > .content > .title, h4, h5, h6 {
    }

    h1 {
        font-size: 2.75em;
    }

    h2 {
        font-size: 2.3125em;
    }

    h3, #toctitle, .sidebarblock > .content > .title {
        font-size: 1.6875em;
    }

    h4 {
        font-size: 1.4375em;
    }
}

/* Print styles.  Inlined to avoid required HTTP connection: www.phpied.com/delay-loading-your-print-css/ Credit to Paul Irish and HTML5 Boilerplate (html5boilerplate.com)
*/
.print-only {
    display: none !important;
}

@media print {
    * {
        background: transparent !important;
        color: #000 !important; /* Black prints faster: h5bp.com/s */
        box-shadow: none !important;
        text-shadow: none !important;
    }

    a, a:visited {
        text-decoration: underline;
    }

    a[href]:after {
        content: " (" attr(href) ")";
    }

    abbr[title]:after {
        content: " (" attr(title) ")";
    }

    .ir a:after, a[href^="javascript:"]:after, a[href^="#"]:after {
        content: "";
    }

    pre, blockquote {
        border: 1px solid #999;
        page-break-inside: avoid;
    }

    thead {
        display: table-header-group; /* h5bp.com/t */
    }

    tr, img {
        page-break-inside: avoid;
    }

    img {
        max-width: 100% !important;
    }

    @page {
        margin: 0.5cm;
    }

    p, h2, h3, #toctitle, .sidebarblock > .content > .title {
        orphans: 3;
        widows: 3;
    }

    h2, h3, #toctitle, .sidebarblock > .content > .title {
        page-break-after: avoid;
    }

    .hide-on-print {
        display: none !important;
    }

    .print-only {
        display: block !important;
    }

    .hide-for-print {
        display: none !important;
    }

    .show-for-print {
        display: inherit !important;
    }
}

/* Tables */
table {
    background: white;
    margin-bottom: 1.25em;
    border: solid 1px #34302d;
}

table thead, table tfoot {
    font-weight: bold;
}

table thead tr th, table thead tr td, table tfoot tr th, table tfoot tr td {
    padding: 0.5em 0.625em 0.625em;
    font-size: inherit;
    color: #34302d;
    text-align: left;
}

table thead tr th {
    color: white;
    background: #34302d;
}

table tr th, table tr td {
    padding: 0.5625em 0.625em;
    font-size: inherit;
    color: #34302d;
    border: 0 none;
}

table tr.even, table tr.alt, table tr:nth-of-type(even) {
    background: #f2F2F2;
}

table thead tr th, table tfoot tr th, table tbody tr td, table tr td, table tfoot tr td {
    display: table-cell;
}

.clearfix:before, .clearfix:after, .float-group:before, .float-group:after {
    content: " ";
    display: table;
}

.clearfix:after, .float-group:after {
    clear: both;
}

*:not(pre) > code {
    font-size: inherit;
    padding: 0;
    white-space: nowrap;
    background-color: inherit;
    border: 0 solid #dddddd;
    -webkit-border-radius: 6px;
    border-radius: 6px;
    text-shadow: none;
}

pre, pre > code {
    color: black;
    font-family: monospace, serif;
    font-weight: normal;
}

.keyseq {
    color: #774417;
}

kbd:not(.keyseq) {
    display: inline-block;
    color: #211306;
    font-size: 0.75em;
    background-color: #F7F7F7;
    border: 1px solid #ccc;
    -webkit-border-radius: 3px;
    border-radius: 3px;
    -webkit-box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2), 0 0 0 2px white inset;
    box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2), 0 0 0 2px white inset;
    margin: -0.15em 0.15em 0 0.15em;
    padding: 0.2em 0.6em 0.2em 0.5em;
    vertical-align: middle;
    white-space: nowrap;
}

.keyseq kbd:first-child {
    margin-left: 0;
}

.keyseq kbd:last-child {
    margin-right: 0;
}

.menuseq, .menu {
    color: black;
}

b.button:before, b.button:after {
    position: relative;
    top: -1px;
    font-weight: normal;
}

b.button:before {
    content: "[";
    padding: 0 3px 0 2px;
}

b.button:after {
    content: "]";
    padding: 0 2px 0 3px;
}

p a > code:hover {
    color: #541312;
}

#header, #content, #footnotes, #footer {
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    margin-top: 0;
    margin-bottom: 0;
    max-width: 62.5em;
    *zoom: 1;
    position: relative;
    padding-left: 4em;
    padding-right: 4em;
}

#header:before, #header:after, #content:before, #content:after, #footnotes:before, #footnotes:after, #footer:before, #footer:after {
    content: " ";
    display: table;
}

#header:after, #content:after, #footnotes:after, #footer:after {
    clear: both;
}

#header {
    margin-bottom: 2.5em;
}

#header > h1 {
    color: #34302d;
    font-weight: 400;
}

#header span {
    color: #34302d;
}

#header #revnumber {
    text-transform: capitalize;
}

#header br {
    display: none;
}

#header br + span {
}

#revdate {
    display: block;
}

#toc {
    border-bottom: 1px solid #e6dfd8;
    padding-bottom: 1.25em;
}

#toc > ul {
    margin-left: 0.25em;
}

#toc ul.sectlevel0 > li > a {
    font-style: italic;
}

#toc ul.sectlevel0 ul.sectlevel1 {
    margin-left: 0;
    margin-top: 0.5em;
    margin-bottom: 0.5em;
}

#toc ul {
    list-style-type: none;
}

#toctitle {
    color: #385dbd;
}

@media only screen and (min-width: 768px) {
    body.toc2 {
        padding-left: 15em;
        padding-right: 0;
    }

    #toc.toc2 {
        position: fixed;
        width: 15em;
        left: 0;
        border-bottom: 0;
        z-index: 1000;
        padding: 1em;
        height: 100%;
        top: 0px;
        background: #F1F1F1;
        overflow: auto;

        -moz-transition-property: top;
        -o-transition-property: top;
        -webkit-transition-property: top;
        transition-property: top;
        -moz-transition-duration: 0.4s;
        -o-transition-duration: 0.4s;
        -webkit-transition-duration: 0.4s;
        transition-duration: 0.4s;
    }

    #reactor-header {
        position: fixed;
        top: -75px;
        left: 0;
        right: 0;
        height: 75px;


        -moz-transition-property: top;
        -o-transition-property: top;
        -webkit-transition-property: top;
        transition-property: top;
        -moz-transition-duration: 0.4s;
        -o-transition-duration: 0.4s;
        -webkit-transition-duration: 0.4s;
        transition-duration: 0.4s;
    }

    body.head-show #toc.toc2 {
        top: 75px;
    }
    body.head-show #reactor-header {
        top: 0;
    }

    #toc.toc2 a {
        color: #34302d;
        font-family: Montserrat;
    }

    #toc.toc2 #toctitle {
        margin-top: 0;
        font-size: 1.2em;
    }

    #toc.toc2 > ul {
        font-size: .90em;
    }

    #toc.toc2 ul ul {
        margin-left: 0;
        padding-left: 0.4em;
    }

    #toc.toc2 ul.sectlevel0 ul.sectlevel1 {
        padding-left: 0;
        margin-top: 0.5em;
        margin-bottom: 0.5em;
    }

    body.toc2.toc-right {
        padding-left: 0;
        padding-right: 15em;
    }

    body.toc2.toc-right #toc.toc2 {
        border-right: 0;
        border-left: 1px solid #e6dfd8;
        left: auto;
        right: 0;
    }
}

@media only screen and (min-width: 1280px) {
    body.toc2 {
        padding-left: 20em;
        padding-right: 0;
    }

    #toc.toc2 {
        width: 20em;
    }

    #toc.toc2 #toctitle {
        font-size: 1.375em;
    }

    #toc.toc2 > ul {
        font-size: 0.95em;
    }

    #toc.toc2 ul ul {
        padding-left: 1.25em;
    }

    body.toc2.toc-right {
        padding-left: 0;
        padding-right: 20em;
    }
}

#content #toc {
    border-style: solid;
    border-width: 1px;
    border-color: #d9d9d9;
    margin-bottom: 1.25em;
    padding: 1.25em;
    background: #f2f2f2;
    border-width: 0;
    -webkit-border-radius: 6px;
    border-radius: 6px;
}

#content #toc > :first-child {
    margin-top: 0;
}

#content #toc > :last-child {
    margin-bottom: 0;
}

#content #toc a {
    text-decoration: none;
}

#content #toctitle {
    font-weight: bold;
    font-family: "Montserrat", Arial, sans-serif;
    font-size: 1em;
    padding-left: 0.125em;
}

#footer {
    max-width: 100%;
    background-color: white;
    padding: 1.25em;
    color: #CCC;
    border-top: 3px solid #F1F1F1;
}

#footer-text {
    color: #444;
    line-height: 1.44;
}

.sect1 {
    padding-bottom: 1.25em;
}

.sect1 + .sect1 {
    border-top: 1px solid #e6dfd8;
}

#content h1 > a.anchor, h2 > a.anchor, h3 > a.anchor, #toctitle > a.anchor, .sidebarblock > .content > .title > a.anchor, h4 > a.anchor, h5 > a.anchor, h6 > a.anchor {
    position: absolute;
    width: 1em;
    margin-left: -1em;
    display: block;
    text-decoration: none;
    visibility: hidden;
    text-align: center;
    font-weight: normal;
}

#content h1 > a.anchor:before, h2 > a.anchor:before, h3 > a.anchor:before, #toctitle > a.anchor:before, .sidebarblock > .content > .title > a.anchor:before, h4 > a.anchor:before, h5 > a.anchor:before, h6 > a.anchor:before {
    content: '\00A7';
    font-size: .85em;
    vertical-align: text-top;
    display: block;
    margin-top: 0.05em;
}

#content h1:hover > a.anchor, #content h1 > a.anchor:hover, h2:hover > a.anchor, h2 > a.anchor:hover, h3:hover > a.anchor, #toctitle:hover > a.anchor, .sidebarblock > .content > .title:hover > a.anchor, h3 > a.anchor:hover, #toctitle > a.anchor:hover, .sidebarblock > .content > .title > a.anchor:hover, h4:hover > a.anchor, h4 > a.anchor:hover, h5:hover > a.anchor, h5 > a.anchor:hover, h6:hover > a.anchor, h6 > a.anchor:hover {
    visibility: visible;
}

#content h1 > a.link, h2 > a.link, h3 > a.link, #toctitle > a.link, .sidebarblock > .content > .title > a.link, h4 > a.link, h5 > a.link, h6 > a.link {
    color: #34302d;
    text-decoration: none;
}

#content h1 > a.link:hover, h2 > a.link:hover, h3 > a.link:hover, #toctitle > a.link:hover, .sidebarblock > .content > .title > a.link:hover, h4 > a.link:hover, h5 > a.link:hover, h6 > a.link:hover {
    color: #34302d;
}

.imageblock, .literalblock, .listingblock, .mathblock, .verseblock, .videoblock {
    margin-bottom: 1.25em;
    margin-top: 1.25em;
}

.admonitionblock td.content > .title, .exampleblock > .title, .imageblock > .title, .listingblock > .title, .literalblock > .title, .mathblock > .title, .openblock > .title, .paragraph > .title, .quoteblock > .title, .sidebarblock > .title, .tableblock > .title, .verseblock > .title, .videoblock > .title, .dlist > .title, .olist > .title, .ulist > .title, .qlist > .title, .hdlist > .title {
    text-align: left;
    font-weight: bold;
}

.tableblock > caption {
    text-align: left;
    font-weight: bold;
    white-space: nowrap;
    overflow: visible;
    max-width: 0;
}

table.tableblock #preamble > .sectionbody > .paragraph:first-of-type p {
    font-size: inherit;
}

.admonitionblock > table {
    border: 0;
    background: none;
    width: 100%;
}

.admonitionblock > table td.icon {
    text-align: center;
    width: 80px;
}

.admonitionblock > table td.icon img {
    max-width: none;
}

.admonitionblock > table td.icon .title {
    font-weight: bold;
    text-transform: uppercase;
}

.admonitionblock > table td.content {
    padding-left: 1.125em;
    padding-right: 1.25em;
    border-left: 1px solid #dcd2c9;
    color: #34302d;
}

.admonitionblock > table td.content > :last-child > :last-child {
    margin-bottom: 0;
}

.exampleblock > .content {
    border-style: solid;
    border-width: 1px;
    border-color: #f3e0ce;
    margin-bottom: 1.25em;
    padding: 1.25em;
    background: white;
    -webkit-border-radius: 6px;
    border-radius: 6px;
}

.exampleblock > .content > :first-child {
    margin-top: 0;
}

.exampleblock > .content > :last-child {
    margin-bottom: 0;
}

.exampleblock > .content h1, .exampleblock > .content h2, .exampleblock > .content h3, .exampleblock > .content #toctitle, .sidebarblock.exampleblock > .content > .title, .exampleblock > .content h4, .exampleblock > .content h5, .exampleblock > .content h6, .exampleblock > .content p {
    color: #333333;
}

.exampleblock > .content h1, .exampleblock > .content h2, .exampleblock > .content h3, .exampleblock > .content #toctitle, .sidebarblock.exampleblock > .content > .title, .exampleblock > .content h4, .exampleblock > .content h5, .exampleblock > .content h6 {
    margin-bottom: 0.625em;
}

.exampleblock > .content h1.subheader, .exampleblock > .content h2.subheader, .exampleblock > .content h3.subheader, .exampleblock > .content .subheader#toctitle, .sidebarblock.exampleblock > .content > .subheader.title, .exampleblock > .content h4.subheader, .exampleblock > .content h5.subheader, .exampleblock > .content h6.subheader {
}

.exampleblock.result > .content {
    -webkit-box-shadow: 0 1px 8px #d9d9d9;
    box-shadow: 0 1px 8px #d9d9d9;
}

.sidebarblock {
    padding: 1.25em 2em;
    background: #F1F1F1;
    margin: 2em -2em;

}

.sidebarblock > :first-child {
    margin-top: 0;
}

.sidebarblock > :last-child {
    margin-bottom: 0;
}

.sidebarblock h1, .sidebarblock h2, .sidebarblock h3, .sidebarblock #toctitle, .sidebarblock > .content > .title, .sidebarblock h4, .sidebarblock h5, .sidebarblock h6, .sidebarblock p {
    color: #333333;
}

.sidebarblock h1, .sidebarblock h2, .sidebarblock h3, .sidebarblock #toctitle, .sidebarblock > .content > .title, .sidebarblock h4, .sidebarblock h5, .sidebarblock h6 {
    margin-bottom: 0.625em;
}

.sidebarblock h1.subheader, .sidebarblock h2.subheader, .sidebarblock h3.subheader, .sidebarblock .subheader#toctitle, .sidebarblock > .content > .subheader.title, .sidebarblock h4.subheader, .sidebarblock h5.subheader, .sidebarblock h6.subheader {
}

.sidebarblock > .content > .title {
    color: #6db33f;
    margin-top: 0;
    font-size: 1.2em;
}

.exampleblock > .content > :last-child > :last-child, .exampleblock > .content .olist > ol > li:last-child > :last-child, .exampleblock > .content .ulist > ul > li:last-child > :last-child, .exampleblock > .content .qlist > ol > li:last-child > :last-child, .sidebarblock > .content > :last-child > :last-child, .sidebarblock > .content .olist > ol > li:last-child > :last-child, .sidebarblock > .content .ulist > ul > li:last-child > :last-child, .sidebarblock > .content .qlist > ol > li:last-child > :last-child {
    margin-bottom: 0;
}

.literalblock pre:not([class]), .listingblock pre:not([class]) {
    background: #D8E6E9;
}

.literalblock pre, .literalblock pre[class], .listingblock pre, .listingblock pre[class] {
    border-width: 1px;
    border-style: solid;
    border-color: rgba(21, 35, 71, 0.1);
    -webkit-border-radius: 6px;
    border-radius: 6px;
    padding: 0.8em;
    word-wrap: break-word;
}

.literalblock pre.nowrap, .literalblock pre[class].nowrap, .listingblock pre.nowrap, .listingblock pre[class].nowrap {
    overflow-x: auto;
    white-space: pre;
    word-wrap: normal;
}

.literalblock pre > code, .literalblock pre[class] > code, .listingblock pre > code, .listingblock pre[class] > code {
    display: block;
}

@media only screen {
    .literalblock pre, .literalblock pre[class], .listingblock pre, .listingblock pre[class] {
        font-size: 0.72em;
    }
}

@media only screen and (min-width: 768px) {
    .literalblock pre, .literalblock pre[class], .listingblock pre, .listingblock pre[class] {
        font-size: 0.81em;
    }
}

@media only screen and (min-width: 1280px) {
    .literalblock pre, .literalblock pre[class], .listingblock pre, .listingblock pre[class] {
        font-size: 0.9em;
    }
}

.listingblock pre.highlight {
    padding: 0;
    line-height: 1em;
}

.listingblock pre.highlight > code {
    padding: 0.8em;
}

.listingblock > .content {
    position: relative;
}

.listingblock:hover code[class*=" language-"]:before {
    text-transform: uppercase;
    font-size: 0.9em;
    color: #999;
    position: absolute;
    top: 0.375em;
    right: 0.375em;
}

.listingblock:hover code.asciidoc:before {
    content: "asciidoc";
}

.listingblock:hover code.clojure:before {
    content: "clojure";
}

.listingblock:hover code.css:before {
    content: "css";
}

.listingblock:hover code.groovy:before {
    content: "groovy";
}

.listingblock:hover code.html:before {
    content: "html";
}

.listingblock:hover code.java:before {
    content: "java";
}

.listingblock:hover code.javascript:before {
    content: "javascript";
}

.listingblock:hover code.python:before {
    content: "python";
}

.listingblock:hover code.ruby:before {
    content: "ruby";
}

.listingblock:hover code.sass:before {
    content: "sass";
}

.listingblock:hover code.scss:before {
    content: "scss";
}

.listingblock:hover code.xml:before {
    content: "xml";
}

.listingblock:hover code.yaml:before {
    content: "yaml";
}

.listingblock.terminal pre .command:before {
    content: attr(data-prompt);
    padding-right: 0.5em;
    color: #999;
}

.listingblock.terminal pre .command:not([data-prompt]):before {
    content: '$';
}

table.pyhltable {
    border: 0;
    margin-bottom: 0;
}

table.pyhltable td {
    vertical-align: top;
    padding-top: 0;
    padding-bottom: 0;
}

table.pyhltable td.code {
    padding-left: .75em;
    padding-right: 0;
}

.highlight.pygments .lineno, table.pyhltable td:not(.code) {
    color: #999;
    padding-left: 0;
    padding-right: .5em;
    border-right: 1px solid #dcd2c9;
}

.highlight.pygments .lineno {
    display: inline-block;
    margin-right: .25em;
}

table.pyhltable .linenodiv {
    background-color: transparent !important;
    padding-right: 0 !important;
}

.quoteblock {
    margin: 0 0 1.25em;
    padding: 0.5625em 1.25em 0 1.1875em;
    border-left: 3px solid #dddddd;
}

.quoteblock blockquote {
    margin: 0 0 1.25em 0;
    padding: 0 0 0.5625em 0;
    border: 0;
}

.quoteblock blockquote > .paragraph:last-child p {
    margin-bottom: 0;
}

.quoteblock .attribution {
    margin-top: -.25em;
    padding-bottom: 0.5625em;
    font-size: 0.8125em;
}

.quoteblock .attribution br {
    display: none;
}

.quoteblock .attribution cite {
    display: block;
    margin-bottom: 0.625em;
}

table thead th, table tfoot th {
    font-weight: bold;
}

table.tableblock.grid-all {
    border-collapse: separate;
    border-radius: 6px;
    border-top: 1px solid #34302d;
    border-bottom: 1px solid #34302d;
}

table.tableblock.frame-topbot, table.tableblock.frame-none {
    border-left: 0;
    border-right: 0;
}

table.tableblock.frame-sides, table.tableblock.frame-none {
    border-top: 0;
    border-bottom: 0;
}

table.tableblock td .paragraph:last-child p > p:last-child, table.tableblock th > p:last-child, table.tableblock td > p:last-child {
    margin-bottom: 0;
}

th.tableblock.halign-left, td.tableblock.halign-left {
    text-align: left;
}

th.tableblock.halign-right, td.tableblock.halign-right {
    text-align: right;
}

th.tableblock.halign-center, td.tableblock.halign-center {
    text-align: center;
}

th.tableblock.valign-top, td.tableblock.valign-top {
    vertical-align: top;
}

th.tableblock.valign-bottom, td.tableblock.valign-bottom {
    vertical-align: bottom;
}

th.tableblock.valign-middle, td.tableblock.valign-middle {
    vertical-align: middle;
}

tbody tr th {
    display: table-cell;
    background: rgba(105, 60, 22, 0.25);
}

tbody tr th, tbody tr th p, tfoot tr th, tfoot tr th p {
    color: #211306;
    font-weight: bold;
}

td > div.verse {
    white-space: pre;
}

ol {
    margin-left: 1.75em;
}

ul li ol {
    margin-left: 1.5em;
}

dl dd {
    margin-left: 1.125em;
}

dl dd:last-child, dl dd:last-child > :last-child {
    margin-bottom: 0;
}

ol > li p, ul > li p, ul dd, ol dd, .olist .olist, .ulist .ulist, .ulist .olist, .olist .ulist {
    margin-bottom: 0.625em;
}

ul.unstyled, ol.unnumbered, ul.checklist, ul.none {
    list-style-type: none;
}

ul.unstyled, ol.unnumbered, ul.checklist {
    margin-left: 0.625em;
}

ul.checklist li > p:first-child > i[class^="icon-check"]:first-child, ul.checklist li > p:first-child > input[type="checkbox"]:first-child {
    margin-right: 0.25em;
}

ul.checklist li > p:first-child > input[type="checkbox"]:first-child {
    position: relative;
    top: 1px;
}

ul.inline {
    margin: 0 auto 0.625em auto;
    margin-left: -1.375em;
    margin-right: 0;
    padding: 0;
    list-style: none;
    overflow: hidden;
}

ul.inline > li {
    list-style: none;
    float: left;
    margin-left: 1.375em;
    display: block;
}

ul.inline > li > * {
    display: block;
}

.unstyled dl dt {
    font-weight: normal;
    font-style: normal;
}

ol.arabic {
    list-style-type: decimal;
}

ol.decimal {
    list-style-type: decimal-leading-zero;
}

ol.loweralpha {
    list-style-type: lower-alpha;
}

ol.upperalpha {
    list-style-type: upper-alpha;
}

ol.lowerroman {
    list-style-type: lower-roman;
}

ol.upperroman {
    list-style-type: upper-roman;
}

ol.lowergreek {
    list-style-type: lower-greek;
}

.hdlist > table, .colist > table {
    border: 0;
    background: none;
}

.hdlist > table > tbody > tr, .colist > table > tbody > tr {
    background: none;
}

td.hdlist1 {
    padding-right: .75em;
    font-weight: bold;
}

td.hdlist1, td.hdlist2 {
    vertical-align: top;
}

.literalblock + .colist, .listingblock + .colist {
    margin-top: -0.5em;
}

.colist > table tr > td:first-of-type {
    padding: 0 .75em;
}

.colist > table tr > td:last-of-type {
    padding: 0.25em 0;
}

.qanda > ol > li > p > em:only-child {
    color: #063f40;
}

.thumb, .th {
    line-height: 0;
    display: inline-block;
    border: solid 4px white;
    -webkit-box-shadow: 0 0 0 1px #dddddd;
    box-shadow: 0 0 0 1px #dddddd;
}

.imageblock.left, .imageblock[style*="float: left"] {
    margin: 0.25em 0.625em 1.25em 0;
}

.imageblock.right, .imageblock[style*="float: right"] {
    margin: 0.25em 0 1.25em 0.625em;
}

.imageblock > .title {
    margin-bottom: 0;
}

.imageblock.thumb, .imageblock.th {
    border-width: 6px;
}

.imageblock.thumb > .title, .imageblock.th > .title {
    padding: 0 0.125em;
}

.image.left, .image.right {
    margin-top: 0.25em;
    margin-bottom: 0.25em;
    display: inline-block;
    line-height: 0;
}

.image.left {
    margin-right: 0.625em;
}

.image.right {
    margin-left: 0.625em;
}

a.image {
    text-decoration: none;
}

span.footnote, span.footnoteref {
    vertical-align: super;
    font-size: 0.875em;
}

span.footnote a, span.footnoteref a {
    text-decoration: none;
}

#footnotes {
    padding-top: 0.75em;
    padding-bottom: 0.75em;
    margin-bottom: 0.625em;
}

#footnotes hr {
    width: 20%;
    min-width: 6.25em;
    margin: -.25em 0 .75em 0;
    border-width: 1px 0 0 0;
}

#footnotes .footnote {
    padding: 0 0.375em;
    font-size: 0.875em;
    margin-left: 1.2em;
    text-indent: -1.2em;
    margin-bottom: .2em;
}

#footnotes .footnote a:first-of-type {
    font-weight: bold;
    text-decoration: none;
}

#footnotes .footnote:last-of-type {
    margin-bottom: 0;
}

#content #footnotes {
    margin-top: -0.625em;
    margin-bottom: 0;
    padding: 0.75em 0;
}

.gist .file-data > table {
    border: none;
    background: #fff;
    width: 100%;
    margin-bottom: 0;
}

.gist .file-data > table td.line-data {
    width: 99%;
}

div.unbreakable {
    page-break-inside: avoid;
}

.big {
    font-size: larger;
}

.small {
    font-size: smaller;
}

.underline {
    text-decoration: underline;
}

.overline {
    text-decoration: overline;
}

.line-through {
    text-decoration: line-through;
}

.aqua {
    color: #00bfbf;
}

.aqua-background {
    background-color: #00fafa;
}

.black {
    color: black;
}

.black-background {
    background-color: black;
}

.blue {
    color: #0000bf;
}

.blue-background {
    background-color: #0000fa;
}

.fuchsia {
    color: #bf00bf;
}

.fuchsia-background {
    background-color: #fa00fa;
}

.gray {
    color: #606060;
}

.gray-background {
    background-color: #7d7d7d;
}

.green {
    color: #006000;
}

.green-background {
    background-color: #007d00;
}

.lime {
    color: #00bf00;
}

.lime-background {
    background-color: #00fa00;
}

.maroon {
    color: #600000;
}

.maroon-background {
    background-color: #7d0000;
}

.navy {
    color: #000060;
}

.navy-background {
    background-color: #00007d;
}

.olive {
    color: #606000;
}

.olive-background {
    background-color: #7d7d00;
}

.purple {
    color: #600060;
}

.purple-background {
    background-color: #7d007d;
}

.red {
    color: #bf0000;
}

.red-background {
    background-color: #fa0000;
}

.silver {
    color: #909090;
}

.silver-background {
    background-color: #bcbcbc;
}

.teal {
    color: #006060;
}

.teal-background {
    background-color: #007d7d;
}

.white {
    color: #bfbfbf;
}

.white-background {
    background-color: #fafafa;
}

.yellow {
    color: #bfbf00;
}

.yellow-background {
    background-color: #fafa00;
}

span.icon > [class^="icon-"], span.icon > [class*=" icon-"] {
    cursor: default;
}

.admonitionblock td.icon [class^="icon-"]:before {
    font-size: 2.5em;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    cursor: default;
}

.admonitionblock td.icon .icon-note:before {
    content: "\f05a";
    color: #095557;
    color: #064042;
}

.admonitionblock td.icon .icon-tip:before {
    content: "\f0eb";
    text-shadow: 1px 1px 2px rgba(155, 155, 0, 0.8);
    color: #111;
}

.admonitionblock td.icon .icon-warning:before {
    content: "\f071";
    color: #bf6900;
}

.admonitionblock td.icon .icon-caution:before {
    content: "\f06d";
    color: #bf3400;
}

.admonitionblock td.icon .icon-important:before {
    content: "\f06a";
    color: #bf0000;
}

.conum {
    display: inline-block;
    color: white !important;
    background-color: #211306;
    -webkit-border-radius: 100px;
    border-radius: 100px;
    text-align: center;
    width: 20px;
    height: 20px;
    font-size: 12px;
    font-weight: bold;
    line-height: 20px;
    font-family: Arial, sans-serif;
    font-style: normal;
    position: relative;
    top: -2px;
    letter-spacing: -1px;
}

.conum * {
    color: white !important;
}

.conum + b {
    display: none;
}

.conum:after {
    content: attr(data-value);
}

.conum:not([data-value]):empty {
    display: none;
}

body {
    padding-top: 60px;
}

#toc.toc2 ul ul {
    padding-left: 1em;
}
#toc.toc2 ul ul.sectlevel2 {
}

#toctitle {
    color: #34302d;
    display: none;
}

#header h1 {
    font-weight: bold;
    position: relative;
    left: -0.0625em;
}

#header h1 span.lo {
    color: #dc9424;
}

#content h2, #content h3, #content #toctitle, #content .sidebarblock > .content > .title, #content h4, #content h5, #content #toctitle {
    font-weight: normal;
    position: relative;
    left: -0.0625em;
}

#content h2 {
    font-weight: bold;
}

.literalblock .content pre.highlight, .listingblock .content pre.highlight {
    background: #D8E6E9;
}

.admonitionblock > table td.content {
    border-color: #e6dfd8;
}

table.tableblock.grid-all {
    -webkit-border-radius: 0;
    border-radius: 0;
}

#footer {
    background-color: #while;
    color: #34302d;
}

.imageblock .title {
    text-align: center;
}

#content h1.sect0 {
    font-size: 48px;
}

#toc > ul > li > a {
    font-size: large;
}




@import url(https://fonts.googleapis.com/css?family=Montserrat:400,700|Karla:400,700);
body {
}
#reactor-header {
    background: #34302d;
    border-top: 4px solid #6db33f;
    z-index: 2000;
    font-family: 'Montserrat';
    height: 75px;
}

#reactor-header h1#logo {
    margin: 7px 0 0 10px;
    padding: 0;
    float: left;
}

#reactor-header h1#logo a {
    display: block;
    background: url(images/logo-2x.png) no-repeat 0 0;
    background-size: 253px 80px;
    height: 40px;
    width: 253px;
    text-indent: -6000em;
    margin: 8px 0;
}
#reactor-header h1#logo a:hover strong {
    filter: progid:DXImageTransform.Microsoft.Alpha(enabled=false);
    opacity: 1;
}
#reactor-header h1#logo a strong {
    display: block;
    background: url(images/logo-2x.png) no-repeat 0 0;
    background-size: 253px 80px;
    color: red;
    height: 40px;
    width: 253px;
    text-indent: -6000em;
    margin: 8px 0;
    -moz-transition-property: opacity;
    -o-transition-property: opacity;
    -webkit-transition-property: opacity;
    transition-property: opacity;
    -moz-transition-duration: 0.2s;
    -o-transition-duration: 0.2s;
    -webkit-transition-duration: 0.2s;
    transition-duration: 0.2s;
    filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=0);
    opacity: 0;
}

#nav, #nav ul {
    display: block;
    margin: 0;
    padding: 0;
}
#nav {
    float: right;
    margin-right: 10px;
}
#nav ul li {
    display: block;
    float: left;
    list-style: none;
    margin: 0;
    padding: 0;
}
#nav ul li a {
    color: white;
    text-decoration: none;
    font-weight: 500;
    display: block;
    text-transform: uppercase;
    font-size: 13.5px;
    line-height: 71px;
    margin: 0;
    padding: 0 12px;
    -moz-transition-property: background-color;
    -o-transition-property: background-color;
    -webkit-transition-property: background-color;
    transition-property: background-color;
    -moz-transition-duration: 0.2s;
    -o-transition-duration: 0.2s;
    -webkit-transition-duration: 0.2s;
    transition-duration: 0.2s;
}
#nav ul li a:hover {
    background: #6db33f;
}
#nav ul li a.active {
    background: #6db33f;
}

</style>
<link rel="stylesheet" href="//cdn.bootcss.com/font-awesome/4.5.0/css/font-awesome.min.css">
<style>
/* Stylesheet for CodeRay to match GitHub theme | MIT License | http://foundation.zurb.com */
/*pre.CodeRay {background-color:#f7f7f8;}*/
.CodeRay .line-numbers{border-right:1px solid #d8d8d8;padding:0 0.5em 0 .25em}
.CodeRay span.line-numbers{display:inline-block;margin-right:.5em;color:rgba(0,0,0,.3)}
.CodeRay .line-numbers strong{color:rgba(0,0,0,.4)}
table.CodeRay{border-collapse:separate;border-spacing:0;margin-bottom:0;border:0;background:none}
table.CodeRay td{vertical-align: top;line-height:1.45}
table.CodeRay td.line-numbers{text-align:right}
table.CodeRay td.line-numbers>pre{padding:0;color:rgba(0,0,0,.3)}
table.CodeRay td.code{padding:0 0 0 .5em}
table.CodeRay td.code>pre{padding:0}
.CodeRay .debug{color:#fff !important;background:#000080 !important}
.CodeRay .annotation{color:#007}
.CodeRay .attribute-name{color:#000080}
.CodeRay .attribute-value{color:#700}
.CodeRay .binary{color:#509}
.CodeRay .comment{color:#998;font-style:italic}
.CodeRay .char{color:#04d}
.CodeRay .char .content{color:#04d}
.CodeRay .char .delimiter{color:#039}
.CodeRay .class{color:#458;font-weight:bold}
.CodeRay .complex{color:#a08}
.CodeRay .constant,.CodeRay .predefined-constant{color:#008080}
.CodeRay .color{color:#099}
.CodeRay .class-variable{color:#369}
.CodeRay .decorator{color:#b0b}
.CodeRay .definition{color:#099}
.CodeRay .delimiter{color:#000}
.CodeRay .doc{color:#970}
.CodeRay .doctype{color:#34b}
.CodeRay .doc-string{color:#d42}
.CodeRay .escape{color:#666}
.CodeRay .entity{color:#800}
.CodeRay .error{color:#808}
.CodeRay .exception{color:inherit}
.CodeRay .filename{color:#099}
.CodeRay .function{color:#900;font-weight:bold}
.CodeRay .global-variable{color:#008080}
.CodeRay .hex{color:#058}
.CodeRay .integer,.CodeRay .float{color:#099}
.CodeRay .include{color:#555}
.CodeRay .inline{color:#000}
.CodeRay .inline .inline{background:#ccc}
.CodeRay .inline .inline .inline{background:#bbb}
.CodeRay .inline .inline-delimiter{color:#d14}
.CodeRay .inline-delimiter{color:#d14}
.CodeRay .important{color:#555;font-weight:bold}
.CodeRay .interpreted{color:#b2b}
.CodeRay .instance-variable{color:#008080}
.CodeRay .label{color:#970}
.CodeRay .local-variable{color:#963}
.CodeRay .octal{color:#40e}
.CodeRay .predefined{color:#369}
.CodeRay .preprocessor{color:#579}
.CodeRay .pseudo-class{color:#555}
.CodeRay .directive{font-weight:bold}
.CodeRay .type{font-weight:bold}
.CodeRay .predefined-type{color:inherit}
.CodeRay .reserved,.CodeRay .keyword {color:#000;font-weight:bold}
.CodeRay .key{color:#808}
.CodeRay .key .delimiter{color:#606}
.CodeRay .key .char{color:#80f}
.CodeRay .value{color:#088}
.CodeRay .regexp .delimiter{color:#808}
.CodeRay .regexp .content{color:#808}
.CodeRay .regexp .modifier{color:#808}
.CodeRay .regexp .char{color:#d14}
.CodeRay .regexp .function{color:#404;font-weight:bold}
.CodeRay .string{color:#d20}
.CodeRay .string .string .string{background:#ffd0d0}
.CodeRay .string .content{color:#d14}
.CodeRay .string .char{color:#d14}
.CodeRay .string .delimiter{color:#d14}
.CodeRay .shell{color:#d14}
.CodeRay .shell .delimiter{color:#d14}
.CodeRay .symbol{color:#990073}
.CodeRay .symbol .content{color:#a60}
.CodeRay .symbol .delimiter{color:#630}
.CodeRay .tag{color:#008080}
.CodeRay .tag-special{color:#d70}
.CodeRay .variable{color:#036}
.CodeRay .insert{background:#afa}
.CodeRay .delete{background:#faa}
.CodeRay .change{color:#aaf;background:#007}
.CodeRay .head{color:#f8f;background:#505}
.CodeRay .insert .insert{color:#080}
.CodeRay .delete .delete{color:#800}
.CodeRay .change .change{color:#66f}
.CodeRay .head .head{color:#f4f}
</style>
<link type="text/css" rel="stylesheet" charset="UTF-8" href="css/springcloud.min.css"><script type="text/javascript" charset="UTF-8" src="js/springcloud.min.js"></script></head>
<body class="book toc2 toc-left">
<div id="header">
<h1><font o="1">Reactor 3参考指南</font></h1>
<div class="details">
<span id="author" class="author notranslate">Stephane Maldini</span><br>
<span id="email" class="email"><a href="https://twitter.com/smaldini"><font o="2">@smaldini</font></a></span><br>
<span id="author2" class="author notranslate">Simon Baslé</span><br>
<span id="email2" class="email"><a href="https://twitter.com/simonbasle"><font o="3">@simonbasle</font></a></span><br>
<span id="revdate"><font o="3"> 3.0.7.RELEASE</font></span>
</div>
<div id="toc" class="toc2">
<div id="toctitle"><font o="1256">目录</font></div>
<ul class="sectlevel1">
<li><a href="#_about_the_documentation"><font o="4">关于文档</font></a>
<ul class="sectlevel2">
<li><a href="#_latest_version_copyright_notice">1.1.<font o="6">最新版本和版权声明</font></a></li>
<li><a href="#_getting_help">1.2.<font o="8">获得帮助</font></a></li>
<li><a href="#_where_to_go_from_here">1.3.<font o="10">从哪里去</font></a></li>
</ul>
</li>
<li><a href="#getting-started"><font o="11">2.入门</font></a>
<ul class="sectlevel2">
<li><a href="#_introducing_reactor">2.1.<font o="13">介绍Reactor</font></a></li>
<li><a href="#_the_bom">2.2.<font o="15">物料清单</font></a></li>
<li><a href="#getting">2.3.<font o="17">获取Reactor</font></a></li>
</ul>
</li>
<li><a href="#intro-reactive"><font o="18">3.反应式编程简介</font></a>
<ul class="sectlevel2">
<li><a href="#_blocking_can_be_wasteful">3.1.<font o="20">阻塞可能是浪费的</font></a></li>
<li><a href="#_asynchronicity_to_the_rescue">3.2.<font o="22">异步的补偿？</font></a></li>
<li><a href="#_from_imperative_to_reactive_programming">3.3.<font o="24">从命令式到反应式编程</font></a></li>
<li><a href="#_composability_and_readability">3.4.<font o="26">组合性和可读性</font></a></li>
<li><a href="#_the_assembly_line_analogy">3.5.<font o="28">装配线类比</font></a></li>
<li><a href="#_operators">3.6.<font o="30">Operator</font></a></li>
<li><a href="#reactive.subscribe">3.7.<font o="32">没有事情发生，直到你<code i="5">subscribe()</code></font></a></li>
<li><a href="#reactive.backpressure">3.8.<font o="34">背压</font></a></li>
<li><a href="#reactive.hotCold">3.9.<font o="36">热vs冷</font></a></li>
</ul>
</li>
<li><a href="#core-features"><font o="37">4. Reactor Core功能</font></a>
<ul class="sectlevel2">
<li><a href="#flux">4.1.<font o="39"><code i="6">Flux</code>，0-n项的异步序列</font></a></li>
<li><a href="#mono">4.2.<font o="41"><code i="7">Mono</code>，异步0-1结果</font></a></li>
<li><a href="#_simple_ways_to_create_a_flux_mono_and_to_subscribe_to_it">4.3.<font o="43">简单的方法来创建一个Flux / Mono并订阅它</font></a></li>
<li><a href="#producing">4.4.<font o="45">以编程方式创建序列</font></a></li>
<li><a href="#schedulers">4.5.<code i="8">Schedulers</code></a></li>
<li><a href="#error.handling">4.6.<font o="49">处理错误</font></a></li>
<li><a href="#_processor">4.7.<font o="51">处理器</font></a></li>
</ul>
</li>
<li><a href="#which-operator"><font o="52">我需要哪个Operator？</font></a>
<ul class="sectlevel2">
<li><a href="#which.create">5.1.<font o="54">创建新序列...</font></a></li>
<li><a href="#which.values">5.2.<font o="56">现有序列</font></a></li>
<li><a href="#which.peeking">5.3.<font o="58">窥视一个序列</font></a></li>
<li><a href="#which.filtering">5.4.<font o="60">过滤序列</font></a></li>
<li><a href="#which.errors">5.5.<font o="62">错误</font></a></li>
<li><a href="#which.time">5.6.<font o="64">时间</font></a></li>
<li><a href="#which.window">5.7.<font o="66">拆分<code i="9">Flux</code></font></a></li>
<li><a href="#which.blocking">5.8.<font o="68">回到同步世界</font></a></li>
</ul>
</li>
<li><a href="#testing"><font o="69">6.测试</font></a>
<ul class="sectlevel2">
<li><a href="#_testing_a_scenario_with_code_stepverifier_code">6.1.<font o="71">用<code i="10">StepVerifier</code>测试场景</font></a></li>
<li><a href="#_manipulating_time">6.2.<font o="73">操纵时间</font></a></li>
<li><a href="#_performing_post_execution_assertions_with_code_stepverifier_code">6.3.<font o="75">使用<code i="11">StepVerifier</code>执行执行后断言</font></a></li>
<li><a href="#_manually_emitting_with_code_testpublisher_code">6.4.<font o="77">手动发射<code i="12">TestPublisher</code></font></a></li>
</ul>
</li>
<li><a href="#_debugging_reactor"><font o="78">7.调试Reactor</font></a>
<ul class="sectlevel2">
<li><a href="#_the_typical_reactor_stack_trace">7.1.<font o="80">典型的Reactor堆栈跟踪</font></a></li>
<li><a href="#_activating_debug_mode">7.2.<font o="82">激活调试模式</font></a></li>
<li><a href="#_reading_a_stack_trace_in_debug_mode">7.3.<font o="84">在调试模式下读取堆栈跟踪</font></a></li>
<li><a href="#_logging_a_stream">7.4.<font o="86">记录流</font></a></li>
</ul>
</li>
<li><a href="#_advanced_features_and_concepts"><font o="87">8.高级功能和概念</font></a>
<ul class="sectlevel2">
<li><a href="#_mutualizing_operator_usage">8.1.<font o="89">互动运算符使用</font></a></li>
<li><a href="#reactor.hotCold">8.2.<font o="91">热vs冷</font></a></li>
<li><a href="#_broadcast_to_multiple_subscribers_with_code_connectableflux_code">8.3.<font o="93">向<code i="13">ConnectableFlux</code>广播多个订阅者</font></a></li>
<li><a href="#_parallelize_work_with_code_parallelflux_code">8.4.<font o="95">并行工作与<code i="14">ParallelFlux</code></font></a></li>
<li><a href="#_backpressure_and_the_associated_rules">8.5.<font o="97">背压和相关规则</font></a></li>
<li><a href="#hooks">8.6.<font o="99">全局钩</font></a></li>
<li><a href="#_replacing_default_code_schedulers_code">8.7.<font o="101">替换默认<code i="15">Schedulers</code></font></a></li>
</ul>
</li>
<li><a href="#_faq_best_practices_and_other_how_do_i"><font o="102">9.常见问题，最佳做法和其他“我该怎么办？”</font></a>
<ul class="sectlevel2">
<li><a href="#faq.chain">9.1.<font o="104">我只是在<code i="16">Flux</code>上使用了一个操作符，但似乎不适用...什么给了？</font></a></li>
<li><a href="#faq.monoThen">9.2.<font o="106">我的<code i="17">Mono</code>延续（<code i="18">then</code>或<code i="19">and</code>）从未被调用</font></a></li>
<li><a href="#faq.retryWhen">9.3.<font o="108">如何使用<code i="20">retryWhen</code>来模拟<code i="21">retry(3)</code>？</font></a></li>
<li><a href="#faq.exponentialBackoff">9.4.<font o="110">如何使用<code i="22">retryWhen</code>进行指数退避？</font></a></li>
</ul>
</li>
<li><a href="#_how_is_reactor_implemented"><font o="111">附录A：如何实施Reactor？</font></a></li>
<li><a href="#_a_primer_at_writing_an_operator"><font o="112">附录B：在编写Operator时的底稿</font></a></li>
<li><a href="#_automatic_optimizations"><font o="113">附录C：自动优化</font></a>
<ul class="sectlevel2">
<li><a href="#macrofusion"><font o="114">C.1.</font><font o="115">宏融合</font></a></li>
<li><a href="#microfusion"><font o="116">C.2.</font><font o="117">微融合</font></a></li>
</ul>
</li>
<li><a href="#_migrating_from_rxjava"><font o="118">附录D：从RxJava迁移</font></a></li>
<li><a href="#processor"><font o="119">附录E：选择正确的<code i="23">Processor</code></font></a>
<ul class="sectlevel2">
<li><a href="#_sync_processors"><font o="120">E.1.</font><font o="121">同步处理器</font></a></li>
<li><a href="#_async_processors"><font o="122">E.2.</font><font o="123">异步处理器</font></a></li>
</ul>
</li>
</ul>
</div>
</div>
<div id="content">
<div class="sect1">
<h2 id="_about_the_documentation"><a class="anchor" href="#_about_the_documentation"></a><font o="124">关于文档</font></h2>
<div class="sectionbody">
<div class="paragraph">
<p><font o="125">本节简要介绍了Reactor参考文档。</font><font o="126">您可以以线性方式阅读本参考指南，或者如果您不感兴趣的话可以跳过该部分。</font></p>
</div>
<div class="sect2">
<h3 id="_latest_version_copyright_notice"><a class="anchor" href="#_latest_version_copyright_notice"></a>1.1.<font o="128">最新版本和版权声明</font></h3>
<div class="paragraph">
<p><font o="129">Reactor参考指南可作为html文档使用。</font><font o="130">最新的副本可在</font><a href="http://projectreactor.io/docs/core/release/reference/docs/index.html" class="bare"><font o="130">http://projectreactor.io/docs/core/release/reference/docs/index.html</font></a>上找到</p>
</div>
<div class="paragraph">
<p><font o="131">只要您不对这些副本收取任何费用，并且进一步规定，每个副本都包含本版权声明，无论是以印刷版还是电子版分发，本文档的副本可供您自己使用并分发给他人。</font></p>
</div>
</div>
<div class="sect2">
<h3 id="_getting_help"><a class="anchor" href="#_getting_help"></a>1.2.<font o="133">获得帮助</font></h3>
<div class="paragraph">
<p><font o="134">有几种方法可以帮助Reactor。</font></p>
</div>
<div class="ulist">
<ul>
<li>
<p><font o="135">在</font><a href="https://gitter.im/reactor/reactor"><font o="135">Gitter</font></a><font o="135">上与社区取得联系
 </font><font o="135">。</font></p>
</li>
<li>
<p><font o="136">在stackoverflow.com上提出问题，标签是</font><a href="https://stackoverflow.com/tags/project-reactor"><code>project-reactor</code></a><font o="136">。</font></p>
</li>
<li>
<p><font o="137">在github问题中报告错误（或提问），最受监控的最相关的存储库是
 </font><a href="https://github.com/reactor/reactor-core/issues"><font o="137">reactor-core</font></a><font o="137">和
 </font><a href="https://github.com/reactor/reactor-addons/issues"><font o="137">reactor-addons</font></a><font o="137"> 
（其中包括反应堆测试和适配器问题）</font></p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="注意"></i>
</td>
<td class="content"><font o="138">
所有的Reactor是开源的，
 </font><a href="https://github.com/reactor/reactor-core/tree/master/src/docs/asciidoc"><font o="138">包括这个文档</font></a><font o="138">！</font><font o="139">如果您发现文档有问题或者只是想改进文档，请
 </font><a href="https://github.com/reactor/reactor-core/blob/master/CONTRIBUTING.md"><font o="139">参与</font></a><font o="139">。
</font></td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_where_to_go_from_here"><a class="anchor" href="#_where_to_go_from_here"></a>1.3.<font o="141">从哪里去</font></h3>
<div class="ulist">
<ul>
<li>
<p><font o="142">团长</font><a href="#getting-started"><font o="142">入门</font></a><font o="142">如果你喜欢跳直入代码。</font></p>
</li>
<li>
<p><font o="143">如果你刚刚进入</font><em><font o="143">Reactive Programming</font></em><font o="143">，那么你最好从“ </font><a href="#intro-reactive"><font o="143">反应编程简介”</font></a><font o="143">开始</font><font o="143">...</font></p>
</li>
<li>
<p><font o="144">为了深入了解Reactor的核心功能，请访问</font><a href="#core-features"><font o="144">Reactor Core功能</font></a><font o="144">：</font></p>
<div class="ulist">
<ul>
<li>
<p><font o="145">如果您正在寻找适合该工作的工具，但无法想像相关的Operator，也许</font><a href="#which-operator"><font o="145">我需要哪个Operator？</font></a><font o="146">在那里的部分可以帮助？</font></p>
</li>
<li>
<p><font o="147">详细了解“ </font><a href="#flux"><font o="147"><code i="24">Flux</code></font></a><font o="147"> ”中的Reactor反向类型，即</font><a href="#flux"><font o="147">0-n项的异步序列</font></a><font o="147"> “和” </font><a href="#mono"><font o="147"><code i="25">Mono</code>，异步0-1结果</font></a><font o="147"> “部分</font></p>
</li>
<li>
<p><font o="148">使用</font><a href="#schedulers"><font o="148">Scheduler</font></a><font o="148">切换线程上下文</font><font o="148">。</font></p>
</li>
<li>
<p><font o="149">了解如何处理</font><a href="#error.handling"><font o="149">处理错误</font></a><font o="149">部分</font><font o="149">中的</font><a href="#error.handling"><font o="149">错误</font></a><font o="149">。</font></p>
</li>
</ul>
</div>
</li>
<li>
<p><font o="150">单元测试？</font><font o="151">是的，可以使用<code i="26">reactor-test</code>项目！</font><font o="152">见</font><a href="#testing"><font o="152">测试</font></a><font o="152">。</font></p>
</li>
<li>
<p><a href="#producing"><font o="153">以编程方式创建序列</font></a><font o="153">可以更高级地创建反应源。</font></p>
</li>
</ul>
</div>
</div>
</div>
</div>
 <div style="font-size:35px;color:#FF0000;background:#DDDDDD;padding:30px;line-height:50px;">文档该部分需要用188贡献值兑换后才能阅读，请<a href="login" target="_blank">登录</a>后兑换。</div> <div class="sect1">
<h2 id="_how_is_reactor_implemented"><a class="anchor" href="#_how_is_reactor_implemented"></a><font o="1204">附录A：如何实施Reactor？</font></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_a_primer_at_writing_an_operator"><a class="anchor" href="#_a_primer_at_writing_an_operator"></a><font o="1205">附录B：在编写Operator时的底稿</font></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_automatic_optimizations"><a class="anchor" href="#_automatic_optimizations"></a><font o="1206">附录C：自动优化</font></h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="macrofusion"><a class="anchor" href="#macrofusion"></a><font o="1207">C.1.</font><font o="1208">宏融合</font></h3>

</div>
<div class="sect2">
<h3 id="microfusion"><a class="anchor" href="#microfusion"></a><font o="1209">C.2.</font><font o="1210">微融合</font></h3>

</div>
</div>
</div>
<div class="sect1">
<h2 id="_migrating_from_rxjava"><a class="anchor" href="#_migrating_from_rxjava"></a><font o="1211">附录D：从RxJava迁移</font></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="processor"><a class="anchor" href="#processor"></a><font o="1212">附录E：选择正确的<code i="816">Processor</code></font></h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_sync_processors"><a class="anchor" href="#_sync_processors"></a><font o="1213">E.1.</font><font o="1214">同步处理器</font></h3>
<div class="paragraph">
<p><font o="1215">TODO</font></p>
</div>
<div class="sect3">
<h4 id="_emitterprocessor"><a class="anchor" href="#_emitterprocessor"></a><font o="1216">E.1.1.</font><font o="1217">EmitterProcessor</font></h4>
<div class="paragraph">
<p><font o="1218">TODO</font></p>
</div>
</div>
<div class="sect3">
<h4 id="_directprocessor"><a class="anchor" href="#_directprocessor"></a><font o="1219">E.1.2.</font><font o="1220">DirectProcessor</font></h4>
<div class="paragraph">
<p><font o="1221">TODO</font></p>
</div>
</div>
<div class="sect3">
<h4 id="_unicastprocessor"><a class="anchor" href="#_unicastprocessor"></a><font o="1222">E.1.3.</font><font o="1223">UnicastProcessor</font></h4>
<div class="paragraph">
<p><font o="1224">TODO</font></p>
</div>
</div>
<div class="sect3">
<h4 id="_replayprocessor"><a class="anchor" href="#_replayprocessor"></a><font o="1225">E.1.4.</font><font o="1226">ReplayProcessor</font></h4>
<div class="paragraph">
<p><font o="1227">TODO</font></p>
</div>
</div>
<div class="sect3">
<h4 id="_monoprocessor"><a class="anchor" href="#_monoprocessor"></a><font o="1228">E.1.5.</font><font o="1229">单处理器</font></h4>
<div class="paragraph">
<p><font o="1230">TODO</font></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_async_processors"><a class="anchor" href="#_async_processors"></a><font o="1231">E.2.</font><font o="1232">异步处理器</font></h3>
<div class="paragraph">
<p><font o="1233">TODO</font></p>
</div>
<div class="sect3">
<h4 id="_topicprocessor"><a class="anchor" href="#_topicprocessor"></a><font o="1234">E.2.1.</font><font o="1235">TopicProcessor</font></h4>
<div class="paragraph">
<p><font o="1236">TODO</font></p>
</div>
</div>
<div class="sect3">
<h4 id="_workqueueprocessor"><a class="anchor" href="#_workqueueprocessor"></a><font o="1237">E.2.2.</font><font o="1238">WorkQueueProcessor</font></h4>
<div class="paragraph">
<p><font o="1239">TODO</font></p>
</div>
</div>
</div>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1"><font o="1240">1</font></a><font o="1240">.</font><em><font o="1241">Bill Of Materials</font></em><font o="1241">，一个策略化的版本化兼容工件列表
</font></div>
<div class="footnote" id="_footnote_2">
<a href="#_footnoteref_2"><font o="1242">2</font></a><font o="1242">.</font><font o="1243">（希望不会）
</font></div>
<div class="footnote" id="_footnote_3">
<a href="#_footnoteref_3"><font o="1244">3</font></a><font o="1244">.</font><font o="1245">如果顶部已经存在于您的pom中，只需附加内容即可
</font></div>
<div class="footnote" id="_footnote_4">
<a href="#_footnoteref_4"><font o="1246">4</font></a><font o="1246">.</font><font o="1247">您也可以从<code i="817">Executor</code>创建一个，尽管不鼓励
</font></div>
<div class="footnote" id="_footnote_5">
<a href="#_footnoteref_5"><font o="1248">5</font></a><font o="1248">.</font><font o="1249">认为<code i="818">OutOfMemoryError</code>。</font><font o="1250">有关详细信息，请查看<code i="819">Exceptions.throwIfFatal</code>方法
</font></div>
<div class="footnote" id="_footnote_6">
<a href="#_footnoteref_6"><font o="1251">6</font></a><font o="1251">.</font><font o="1252">有时被称为“副作用”
</font></div>
<div class="footnote" id="_footnote_7">
<a href="#_footnoteref_7"><font o="1253">7</font></a><font o="1253">.</font><font o="1254">从上游请求最大值，并在下游没有产生足够的请求时应用策略
</font></div>
</div>
<div id="footer">
<div id="footer-text"><font o="1255">
最后更新2017-04-19 16:53:30 +00：00
</font></div>
</div>

<script type="text/javascript" charset="UTF-8" name="springcloud">springcloud.cc({"original":{"1":"{3/} 3 Reference Guide","2":"@smaldini","3":"@simonbasle3.0.7.RELEASE","4":"1. About the Documentation","6":"Latest version & Copyright Notice","8":"Getting help","10":"Where to go from here","11":"2. Getting started","13":"Introducing {3/}","15":"The BOM","17":"Getting {3/}","18":"3. Introduction to Reactive Programming","20":"Blocking can be wasteful","22":"Asynchronicity to the rescue?","24":"From Imperative to Reactive Programming","26":"Composability and readability","28":"The assembly line analogy","30":"Operators","32":"Nothing happens until you {5/}","34":"Backpressure","36":"Hot vs Cold","37":"4. {1/} Features","39":"{6/}, an asynchronous sequence of 0-n items","41":"{7/}, an asynchronous 0-1 result","43":"Simple ways to create a Flux/Mono and to subscribe to it","45":"Programmatically creating a sequence","49":"Handling Errors","51":"Processor","52":"5. Which operator do I need?","54":"Creating a new sequence…","56":"An existing sequence","58":"Peeking into a sequence","60":"Filtering a sequence","62":"Errors","64":"Time","66":"Splitting a {9/}","68":"Going back to the Synchronous world","69":"6. Testing","71":"Testing a scenario with {10/}","73":"Manipulating Time","75":"Performing post-execution assertions with {11/}","77":"Manually emitting with {12/}","78":"7. Debugging {3/}","80":"The typical {3/} stack trace","82":"Activating debug mode","84":"Reading a stack trace in debug mode","86":"Logging a stream","87":"8. Advanced features and concepts","89":"Mutualizing operator usage","91":"Hot vs Cold","93":"Broadcast to multiple subscribers with {13/}","95":"Parallelize work with {14/}","97":"Backpressure and the associated rules","99":"Global hooks","101":"Replacing default {15/}","102":"9. FAQ, best practices and other \"How do I…​?\"","104":"I just used an operator on my {16/} but it doesn't seem to apply… What gives?","106":"My {17/} continuation ({18/} or {19/}) is never called","108":"How to use {20/} to emulate {21/}?","110":"How to use {22/} for exponential backoff?","111":"Appendix A: How is {3/} implemented?","112":"Appendix B: A primer at writing an operator","113":"Appendix C: Automatic optimizations","114":"C.1.","115":"Macro-fusion","116":"C.2.","117":"Micro-fusion","118":"Appendix D: Migrating from RxJava","119":"Appendix E: Choosing the right {23/}","120":"E.1.","121":"Sync Processors","122":"E.2.","123":"Async Processors","124":"1. About the Documentation","125":"This section provides a brief overview of {3/} reference documentation.","126":"You can read this reference guide in a linear fashion, or you can skip sections if something doesn't interest you.","128":"Latest version & Copyright Notice","129":"The {3/} reference guide is available as html documents.","130":"The latest copy is available at http://projectreactor.io/docs/core/release/reference/docs/index.html","131":"Copies of this document may be made for your own use and for distribution to\nothers, provided that you do not charge any fee for such copies and further\nprovided that each copy contains this Copyright Notice, whether distributed in\nprint or electronically.","133":"Getting help","134":"There are several ways to reach out for help with {3/}.","135":"Get in touch with the community on\n{4/}.","136":"Ask a question on stackoverflow.com, the tag is .","137":"Report bugs (or ask questions) in github issues, the most relevant repositories\nthat are most monitored are\n{2/} and\n{0/}\n(which covers reactor-test and adapters issues)","138":"All of {3/} is open source, including this documentation !","139":"If you find problems with the docs or if you just want to improve them, please get involved .","141":"Where to go from here","142":"Head to Getting started if you feel like jumping straight into the code.","143":"If you’re new to Reactive Programming though, you’d probably better start\nwith the Introduction to Reactive Programming…​","144":"In order to dig deeper into the core features of {3/}, head to {1/} Features:","145":"If you're looking for the right tool for the job but cannot think of a relevant operator, maybe the Which operator do I need?","146":"section in there could help?","147":"Learn more about {3/}’s reactive types in the \"{24/}, an asynchronous sequence of 0-n items\" and \"{25/}, an asynchronous 0-1 result\" sections","148":"Switch threading contexts using a Scheduler.","149":"Learn how to handle errors in the Handling Errors section.","150":"Unit testing?","151":"Yes it is possible with the {26/} project!","152":"See Testing .","153":"Programmatically creating a sequence is possible for more advanced creation of reactive sources.","154":"2. Getting started","156":"Introducing {3/}","157":"{3/} is a fully non-blocking reactive programming foundation for the JVM, with efficient demand management (backpressure).","158":"It integrates directly with Java 8 functional APIs, notably {27/}, {28/} and {29/}.","159":"It offers composable asynchronous sequence APIs {30/} ([N] elements) and {31/} ([0|1] elements), extensively implementing the Reactive Extensions specification.","160":"{3/} also supports non-blocking IPC with the {32/} components.","161":"Suited for Microservices Architecture, {3/} IPC offers backpressure-ready network engines for HTTP (including Websockets), TCP and UDP.","162":"Reactive Encoding/ Decoding is fully supported.","164":"The BOM","165":"{3/} 3 uses a BOM[1]\nmodel since {33/}, with the {34/} release train.","166":"This allows to regroup artifacts that are meant to work well together without\nhaving to wonder about the sometimes divergent versioning schemes of these artifacts.","167":"The BOM is like a curated list of versions.","168":"It is itself versioned, using a release train scheme with a codename followed by a qualifier:","169":"The codenames represent what would traditionally be the MAJOR.MINOR number.","170":"They come from the Periodic Table of Elements (mostly), in growing alphabetical order.","171":"The qualifiers are (in chronological order):","172":"{35/}..{36/}: Milestones or developer previews","173":"{37/}: The first GA release in a codename series","174":"{38/}..{39/}: The subsequent GA releases in a codename series (equivalent to\nPATCH number, SR stands for \"Service Release\").","176":"Getting {3/}","177":"As mentioned above, the easiest way to use {3/} in your core is to use the BOM and add the relevant dependencies to your project.","178":"Note that when adding such a dependency, you omit the version so that it gets picked up from the BOM.","179":"However, if you want to force the use of a specific artifact's version, you can specify it when adding your dependency, as you usually would.","180":"You can also of course forgo the BOM entirely and always specify dependencies with their artifact versions.","182":"Maven installation","183":"The BOM concept is natively supported by Maven.","184":"First, you'll need to import the BOM by adding the following to your {40/}: [ 3 ]","185":"Notice the {41/} tag, this is in addition to the regular\n{42/} section.","186":"Next, add your dependencies to the relevant reactor projects as usual, except\nwithout a {43/}:","187":"dependency to the core library","188":"no version tag here","189":"reactor-test provides facilities to unit test reactive streams","191":"Gradle installation","192":"Gradle has no core support for Maven BOMs, but you can use Spring’s\ngradle-dependency-management\nplugin.","193":"First, apply the plugin from Gradle Plugin Portal:","194":"as of this writing, 1.0.1.RELEASE is the latest version of the plugin, check for updates.","195":"Then use it to import the BOM:","196":"Finally add a dependency to your project without a version number:","197":"no third {44/} separated section for the version, it is taken from the BOM","198":"3. Introduction to Reactive Programming","199":"{3/} is an implementation of the Reactive Programming paradigm, which can be\nsummed up as:","200":"Reactive programming is oriented around data flows and the propagation of change.","201":"This means that the underlying execution model will automatically propagate changes through the data flow.","202":"In this particular instance, pioneered by the Reactive Extensions (Rx) library\nin the .NET ecosystem, and also implemented by RxJava on the JVM, the reactive\naspect is translated in our object-oriented languages to a kind of extension\nof the Observer design pattern.","203":"As time went, a standardization emerged through the Reactive Streams effort, a specification which defines a set of interfaces and interaction rules for reactive libraries on the JVM.","204":"It will be integrated into Java 9 (with the {45/} class).","205":"One can also compare the main reactive streams pattern with the familiar Iterator design pattern, as there is a duality to the {46/}-{47/} pair in all these libraries.","206":"One major difference is that while an Iterator is pull based, reactive streams are push -based.","207":"Using an iterator is quite imperative, even though the method of accessing values is solely the responsibility of the {48/}.","208":"Indeed, it is up to the developer to choose when to access the {49/} item in the sequence.","209":"In reactive streams, the equivalent of the above pair is {50/}-{51/}.","210":"But it is the {52/} that notifies the Subscriber of newly available values as they come , and this push aspect is key to being reactive.","211":"Plus operations applied to pushed values are expressed declaratively rather than imperatively.","212":"Additionally to pushing values, the error handling and completion aspects are\nalso covered in a well defined manner, so a {53/} can push new values to\nits {54/} (calling {55/}), but also signal an error (calling {56/}\nand terminating the sequence) or completion (calling {57/} and\nterminating the sequence).","213":"onNext x 0..N [onError |","214":"onComplete]","215":"This approach is very flexible, as the pattern applies indifferently to use\ncases where there is at most one value, n values or even an infinite sequence of\nvalues (for instance the ticks of a clock).","216":"But let’s step back a bit and reflect on why we would need such an asynchronous\nreactive library in the first place.","218":"Blocking can be wasteful","219":"Modern applications nowadays can reach huge scales of users, and even though the\ncapabilities of modern hardware have continued to improve, performance of the\nmodern software is still a key concern.","220":"There are broadly two ways one can improve a program’s performance:","221":"parallelize: use more threads and more hardware resources\nand/or","222":"seek more efficiency in how current resources are used.","223":"Usually, Java developers will naturally write program using blocking code.","224":"This is all well until there is a performance bottleneck, at which point the time comes to introduce additional thread(s), running similar blocking code.","225":"But this scaling in resource utilization can quickly introduce contention and concurrency problems.","226":"Worse!","227":"If you look closely, as soon as a program involves some latency (notably I/O, like a database request or a network call), there is a waste of resources in the sense that the thread now sits idle, waiting for some data.","228":"So the parallelization approach is not a silver bullet: although it is necessary\nin order to access the full power of the hardware, it is also complex to reason\nabout and susceptible to resource wasting…​","230":"Asynchronicity to the rescue?","231":"The second approach described above, seeking more efficiency, can be a solution to that last problem.","232":"By writing asynchronous non-blocking code, you allow for the execution to switch to another active task using the same underlying resources , and to later come back to the current \"train of thought\" when the asynchronous processing has completed.","233":"But how can you produce asynchronous code on the JVM?","234":"Java offers mainly two models of asynchronous programming:","235":"Callbacks : asynchronous methods don't have a return value but take an extra {58/} parameter (a lambda or simple anonymous class) that will get called when the result is available.","236":"Most well known example is Swing's {59/} hierarchy.","237":"Futures : asynchronous methods return a {60/} immediately .","238":"The asynchronous process computes a {61/} value, but the future wraps access to it, isn't immediately valued and can be polled until it becomes valued.","239":"{62/} running {63/} tasks use Futures for instance.","240":"So is it good enough?","241":"Well, not for every use cases, and both approaches have limitations…","242":"Callbacks are very hard to compose together, quickly leading to code that is\ndifficult to read and maintain (\"Callback Hell\").","243":"Futures are a bit better, but they are still not so good at composition, despite the improvements brought in Java 8 by {64/}… Orchestrating multiple futures together is doable, but not that easy.","244":"Plus it is very (too?) easy to stay in familiar territory and block on a {65/} by calling their {66/} method.","245":"And lastly, they lack the support for multiple values and advanced error handling.","246":"This might seem familiar: isn’t that what Reactive Programming directly tries to\naddress with the {67/}-{68/} pair?","248":"From Imperative to Reactive Programming","249":"Indeed, reactive libraries like {3/} aim at addressing these drawbacks of \"classic\" asynchronous approaches on the JVM, while also focusing on a few additional aspects.","250":"To sum it up:","251":"Composability and readability","252":"Data as a flow manipulated using a rich vocabulary of operators","253":"Nothing happens until you subscribe","254":"Backpressure or the ability for the consumer to signal the producer that\nthe rate of emission is too high for it to keep up","255":"High level but high value abstraction that is concurrency-agnostic","257":"Composability and readability","258":"By composability, we mean the ability to orchestrate multiple asynchronous tasks\ntogether, using results from previous tasks to feed input to subsequent ones, or\nexecuting several tasks in a fork-join style, as well as reusing asynchronous\ntasks as discrete components in an higher level system.","259":"This is tightly coupled to readability and maintainability of one's code, as these layers of asynchronous processes get more and more complex.","260":"As we saw, the callback model is simple, but one of its main drawbacks is that for complex processes you need to have a callback executed from a callback, itself nested inside another callback, and so on…","261":"That is what is referred to as Callback Hell .","262":"And as you can guess (or know from experience), such code is pretty hard to go back to and reason about.","263":"{3/} on the other hand offers rich composition options where code mirrors the\norganization of the abstract process, and everything is kept at the same level\n(no nesting if it is not necessary).","265":"The assembly line analogy","266":"You can think of data processed by a reactive application as moving through an assembly line.","267":"{3/} is the conveyor belt and working stations.","268":"So the raw material pours from a source (the original {69/}) and ends up as a finished product ready to be pushed to the consumer (or {70/}).","269":"It can go to various transformations and other intermediary steps, or be part of\na larger assembly line that aggregates intermediate pieces together.","270":"Finally, if there is a glitch or a clogging at one point (for example boxing the\nproducts takes a disproportionately long time), the workstation can signal that\nupstream and limit the flow of raw material.","272":"Operators","273":"In {3/}, operators are what we represented in the above analogy as the assembly line's workstations.","274":"Each operator adds behavior to a {71/}, and it actually wraps the previous step's {72/} into a new instance.","275":"The whole chain is thus layered, like an onion, where data originates from the\nfirst {73/} in the center and moves outward, transformed by each layer.","276":"Understanding this can help you avoid a common mistake that would lead you to believe that an operator you used in your chain is not being applied.","277":"See this item in the FAQ.","278":"While the Reactive Streams specification doesn't specify operators at all, one of the high added values of derived reactive libraries like {3/} is the rich vocabulary of operators that they bring along.","279":"These cover a lot of ground, from simple transformation and filtering to complex orchestration and error handling.","281":"Nothing happens until you {74/}","282":"In {3/} when you write a {75/} chain, data doesn't start pumping into it by default.","283":"Instead, what you have is a abstract description of your asynchronous process (which can help with reusability and composition by the way).","284":"By the act of subscribing , you tie the {76/} to a {77/}, which triggers the flow of data in the whole chain.","285":"This is achieved internally by a single {78/} signal from the {79/} that is propagated upstream, right back to the source {80/}.","287":"Backpressure","288":"The same mechanism is in fact used to implement backpressure, which we\ndescribed in the assembly line analogy as a feedback signal sent up the line when\na working station is slower to process than the upstream.","289":"The real mechanism defined by the Reactive Streams specification is pretty close\nto the analogy: a subscriber can work in unbounded mode and let the source\npush all the data at its fastest achievable rate, but can also use the {81/}\nmechanism to signal the source that it is ready to process at most {82/} elements.","290":"Intermediate operators can also change the request in-flight.","291":"Imagine a {83/} operator that groups elements in batches of 10. If the subscriber requests 1 buffer, then it is acceptable for the source to produce 10 elements.","292":"Prefetching strategies can also be applied is producing the elements before they are requested is not too costly.","293":"This transforms the push model into a push-pull hybrid where the downstream can\npull n elements from upstream if they are readily available, but if they’re not\nthen they will get pushed by the upstream whenever they are produced.","295":"Hot vs Cold","296":"In the Rx family of reactive libraries, one can distinguish two broad categories of reactive sequences: hot and cold .","297":"This distinction mainly has to do with how the reactive stream reacts to subscribers:","298":"a Cold sequence will start anew for each {84/}, including at the source of data.","299":"If the source wraps an HTTP call, a new HTTP request will be made for each subscription","300":"a Hot sequence will not start from scratch for each {85/}.","301":"Rather, late subscribers will receive signals emitted after they subscribed.","302":"Note however that some hot reactive streams can cache or replay the history of emissions totally or partially… From a general perspective, a hot sequence will emit wether or not there are some subscribers listening.","303":"For more information on hot vs cold in the context of {3/}, see\nthis reactor-specific section.","304":"4. {1/} Features","305":"{86/} is the main artifact of the project, a reactive library that\nfocuses on the Reactive Streams specification and targets Java 8.","306":"{3/} introduces composable reactive types that implement {87/} but also provide a rich vocabulary of operators, {88/} and {89/}.","307":"The former represents a reactive sequence of 0..N items, while the later represents a single-valued-or-empty result.","308":"This distinction allows to carry a bit of semantic into the type, indicating the rough cardinality of the asynchronous processing.","309":"For instance, an HTTP request only produces one response so there wouldn't be much sense in doing a {90/} operation… Expressing the result of such an HTTP call as a {91/} thus makes more sense than as a {92/}, as it offers only operators that are relevant to a \"zero or one item\" context.","310":"In parallel, operators that change the maximum cardinality of the processing will also switch to the relevant type.","311":"For instance the {93/} operator exists in {94/}, but returns a {95/}.","313":"{96/}, an asynchronous sequence of 0-n items","314":"A {97/} is a standard {98/} representing an asynchronous sequence\nof 0 to N emitted items, optionally terminated by either a success signal or an\nerror.","315":"As in the RS spec, these 3 types of signal translate to calls to downstream’s\n{99/}, {100/} or {101/} methods.","316":"With this large scope of possible signal, {102/} is the general-purpose reactive type.","317":"Note that all events, even terminating ones, are optional: no onNext event but an onComplete event represents an empty finite sequence, but remove the onComplete and you have an infinite empty sequence.","318":"Similarly, infinite sequences are not necessarily empty: {103/} produces a {104/} that is infinite and emits regular ticks from a clock.","320":"{105/}, an asynchronous 0-1 result","321":"A {106/} is a specialized {107/} that emits at most one item then\noptionally terminates with an {108/} signal or an {109/}.","322":"As such it offers only a relevant subset of operators.","323":"For instance, combination operators can either ignore the right hand-side emissions and return another {110/} or emit values from both sides, in which case they'll switch to a {111/}.","324":"Note that a {112/} can be used to represent no-value asynchronous processes that\nonly have the concept of completion (think {113/}): just use an empty\n{114/}.","326":"Simple ways to create a Flux/Mono and to subscribe to it","327":"The easiest way to get started with {115/} and {116/} is to use one of the\nnumerous factory methods found in their respective classes.","328":"For instance, to create a simple sequence of {117/}, you can either enumerate\nthem or put them in a collection and create the Flux from it:","329":"Other examples of factory methods include:","330":"notice the factory method honors the generic type even though there will be\nno value","331":"the subtlety is that the first parameter is the start of the range, while\nthe second parameter is the number of items to produce.","332":"When it comes to subscribing, {118/} and {119/} make use of Java 8 lambdas.","333":"You have a wide choice of {120/} variants that take lambdas for different combinations of callbacks:","334":"Lambda-based subscribe variants for {121/}","335":"Just subscribe and trigger the sequence.","336":"Do something with each produced value.","337":"Deal with values but also react to an error.","338":"Deal with values, errors but also execute some code when the sequence\nsuccessfully completes.","339":"Deal with values, errors, successful completion but also do something with\nthe {122/} produced by this {123/} call.","340":"These variants return a reference to the subscription that one can use to cancel said subscription when no more data is needed.","341":"Upon cancellation, the source should stop producing values and clean up any resources it created.","342":"This cancel and clean-up behavior is represented in {3/} by the general-purpose {124/} interface.","343":"These are convenience variant over the Reactive Streams defined subscribe:","344":"That last variant is useful if you already have a {125/} handy, but more often you'll need it because you want to do something subscription-related in the other callbacks.","345":"Most probably, that'd be dealing with backpressure and triggering the requests yourself.","346":"In that case, you can ease things up by using the {126/} abstract\nclass, which offers convenience methods for that:","347":"Using a {127/} to fine tune backpressure","348":"The {128/} is an abstract class so we create an anonymous\nimplementation and specify the generic type.","349":"{129/} defines hooks for the various signal handling you can implement in a {130/}.","350":"It also deals with the boilerplate of capturing the {131/} object so you can manipulate it in other hooks.","351":"{132/} is such a method: it propagates backpressure request to the capture subscription from any of the hooks.","352":"Here we start the stream by requesting 1 element from the source.","353":"upon receiving a new value, we continue requesting new items from the source\none by one.","354":"Other hooks are {133/}, {134/}, {135/} and\n{136/} (which is always called when the sequence terminates, with the\ntype of termination passed in as a {137/} parameter).","355":"When manipulating request like that, you must be careful to produce enough demand for the sequence to advance or your Flux will get \"stuck\".","356":"That is the reason why {138/} forces you to implement the subscription and onNext hooks, where you should usually call {139/} at least once.","357":"{140/} also offers a {141/} method to switch to unbounded\nmode (equivalent to {142/}.","359":"Programmatically creating a sequence","360":"In this section, we'll introduce means of creating a {143/} (or {144/}) by programmatically defining its associated events (onNext, onError, onComplete).","361":"All these methods share the fact that they expose an API to trigger the events that we call a sink .","362":"There are actually a few sink variants, as you will discover below.","364":"Generate","365":"The simplest form of programmatic creation of a {145/} is through the {146/}\nmethod, which takes a generator function.","366":"This is for synchronous and one-by-one emissions, meaning that the sink is a {147/} and that its {148/} method can only be called at most once per callback invocation.","367":"You can then additionally call {149/} or {150/}.","368":"The most useful variant is probably the one that also allow you to keep a state that you can refer to in your sink usage to decide what to emit next.","369":"The generator function then becomes a {151/}, with {152/} the type of the state object.","370":"You have to provide a {153/} for the initial state, and your generator function now returns a new state on each round.","371":"For instance, you could simply use an {154/} as the state:","372":"Example of state-based {155/}","373":"we supply the initial state value of 0","374":"we use the state to choose what to emit (a row in the multiplication table of 3)","375":"we also use it to choose when to stop (multiplication tables traditionally stop at times ten)","376":"we return a new state that will be used in next invocation (unless the sequence terminated in this one)","377":"The code above generates the table of 3, as the following sequence:","378":"You can also use a mutable {156/}.","379":"The example above could for instance be rewritten using a single {157/} as the state, mutating it on each round:","380":"Mutable state variant","381":"this time we generate a mutable object as the state","382":"we mutate the state here","383":"we return the same instance as the new state","384":"\nIf your state object needs to clean up some resources, use the\n{158/} variant to clean up the last\nstate instance.\n","386":"Create","387":"The more advanced form of programmatic creation of a {159/}, {160/} can both\nwork asynchronously or synchronously and is suitable for multiple emissions per\nround.","388":"It exposes a {161/}, with its {162/}/{163/}/{164/} methods.","389":"Contrary to generate, it doesn't have a state-based variant, but on the other hand it can trigger multiple events in the callback (and even from any thread at a later point in time).","390":"{165/} can be very useful to bridge an existing API with the reactive world.","391":"For instance, an asynchronous API based on listeners.","392":"Imagine that you use an API that is listener-based.","393":"It processes data by chunks and has two events: (1) a chunk of data is ready and (2) the processing is complete (terminal event), as represented in the {166/} interface:","394":"You can use {167/} to bridge this into a {168/}:","395":"we bridge to the {169/} API","396":"each element in a chunk becomes an element in the {170/}.","397":"the processComplete event is translated to an {171/}","398":"all of this is done asynchronously whenever the myEventProcessor executes","399":"Additionally, since {172/} can be asynchronous and manages backpressure, you\ncan refine how to behave backpressure-wise, by indicating an {173/}:","400":"{174/} to Completely ignore downstream backpressure requests.","401":"This may yield {175/} when queues get full downstream.","402":"{176/} to signal an {177/} when the downstream can’t keep up","403":"{178/} to drop the incoming signal if the downstream is not ready to receive it.","404":"{179/} to let downstream only get the latest signals from upstream.","405":"{180/} (the default) to buffer all signals if the downstream can't keep up.","406":"(this does unbounded buffering and may lead to {181/})","407":"{182/} also has a {183/} generator.","408":"As you should expect, the {184/} of Mono's create doesn't allow several emissions.","409":"It will drop all signals subsequent to the first one.","410":"Push model","411":"A variant of {185/} is {186/}, which is suitable for processing events from a single producer.","412":"Similar to {187/}, {188/} can also be asynchronous and can manage backpressure using any of the overflow strategies supported by {189/}.","413":"But only one producing thread may invoke {190/}, {191/} or {192/} at a time.","414":"we bridge to the {193/} API","415":"events are pushed to sink using {194/} from a single listener thread","416":"{195/} event generated from the same listener thread","417":"{196/} event also generated from the same listener thread","418":"Hybrid push/pull model","419":"Unlike {197/}, {198/} may be used in {199/} or {200/} mode, making it suitable for bridging with listener-based APIs where data may be delivered asynchronously at any time.","420":"{201/} callback can be registered on {202/} to track requests.","421":"The callback may be used to request more data from source if required and to manage backpressure by delivering data to sink only when requests are pending.","422":"This enables a hybrid push/pull model where downstream can pull data that is already available from upstream and upstream can push data to downstream when data becomes available at a later time.","423":"Poll for messages when requests are made","424":"If messages are available immediately, push them to sink","425":"Remaining messages that arrive asynchronously later are also delivered","426":"Cleaning up","427":"Two callbacks {203/} and {204/} are provided to perform any cleanup on cancellation or termination.","428":"{205/} can be used to perform cleanup when the {206/} completes, errors out or is cancelled.","429":"'onCancel can be used to perform any action specific to cancellation prior to cleanup using {207/}.","430":"onCancel is invoked for cancel signal","431":"onDispose is invoked for complete/error/cancel","433":"Handle","434":"Both present in {208/} and {209/}, {210/} is a tiny bit different.","435":"It is an instance method, meaning that it is chained on an existing source like common operators.","436":"It is close to {211/}, in the sense that it uses a {212/} and\nonly allows one-by-one emissions.","437":"But {213/} can be used to generate an arbitrary value out of each source element, possibly skipping some elements.","438":"In that sense, it can serve as a combination of {214/} and {215/}.","439":"As such, the signature of handle is {216/}.","440":"Let's take an example: the reactive streams specification disallows {217/} values in a sequence.","441":"What if you want to perform a {218/} but you want to use a preexisting method as the map function, and said method sometimes returns null?","442":"For instance, the following method:","443":"Can be applied safely to a source of integers:\n.Using {219/} for a \"map and eliminate nulls\" scenario","444":"map to letters","445":"but if the \"map function\" returns null…​","446":"…​filter it out by not calling {220/}","447":"Which will print out:","450":"{3/}, like RxJava, can be considered concurrency agnostic .","451":"It doesn't enforce a concurrency model but rather leave you, the developer, in command.","452":"But that doesn’t prevent the library from helping you with concurrency…​","453":"In {3/}, the execution model and where the execution happens is determined by the {222/} that is used.","454":"A {223/} is an interface that can abstract a wide range of implementations.","455":"The {224/} class has static methods that give access to the following execution contexts:","456":"the current thread ({225/})","457":"a single, reusable thread ({226/}).","458":"Note that this method reuses the same thread for all callers, until the Scheduler is disposed.","459":"If you want a per-call dedicated thread, use {227/} instead.","460":"an elastic thread pool ({228/}).","461":"It will create new worker pools as needed, and reuse idle ones unless they stay idle for too long (default is 60s), in which case the workers are disposed.","462":"This is a good choice for I/O blocking work for instance.","463":"a fixed pool of workers that is tuned for parallel work ({229/}).","464":"It will create as many workers as you have CPU cores.","465":"a time-aware scheduler capable of scheduling tasks in the future, including\nrecurring tasks ({230/}).","466":"Additionally, you can create a {231/} out of any pre-existing\n{232/} using {233/}, and\nalso create new instances of the various scheduler types using {234/} methods.","467":"\nOperators are implemented using non-blocking algorithms that are\ntuned to facilitate the work-stealing that can happen in some Schedulers.\n","468":"Some operators use a specific Scheduler from {235/} by default (and will usually give you the option of providing a different one).","469":"For instance, calling the factory method {236/} will produces a {237/} that ticks every 300ms.","470":"This is enabled by {238/} by default.","471":"{3/} offers two means of switching execution context (or {239/}) in a reactive chain: {240/} and {241/}.","472":"Both take a {242/} and allow to switch the execution context to that scheduler.","473":"But {243/} placement in the chain matters, while {244/}'s doesn't.","474":"To understand that difference, you first have to remember that Nothing happens until you {245/} .","475":"In {3/}, when you chain operators you wrap as many {246/}/{247/} specific implementations inside one another.","476":"And as soon as you subscribe, a chain of {248/} is created backward.","477":"This is effectively hidden from you and all you can see is the outer layer of {249/} (or {250/}) and {251/}, but these intermediate operator-specific subscribers are where the real work happens.","478":"With that knowledge, let’s have a closer look at the two operators:","479":"{252/} applies as any other operator, in the middle of that subscriber chain.","480":"As such, it takes signals from downstream and replays them upstream, but executing the callback on a worker from the associated {253/}.","481":"So it affects where the subsequent operators will execute (until another publishOn is chained in).","482":"{254/} rather applies to the subscription process, when that backward chain is constructed.","483":"As a consequence, no matter where you place the {255/} in the chain, it is always the context of the source emission that is affected.","484":"However, this doesn't affect the behavior of subsequent calls to {256/}: they will still switch the execution context for the part of the chain after them.","485":"Also, only the earliest {257/} call in the chain is actually taken into account.","487":"Handling Errors","488":"\nFor a quick look at the available operators for error handling, see\nthe relevant operator decision tree.\n","489":"In Reactive Streams, errors are terminal events.","490":"As soon as an error occurs, it stop the sequence and gets propagated down the chain of operators to the last step, the {258/} you defined and its {259/} method.","491":"Such errors should still be dealt with at the application level, for instance\nby displaying an error notification in a UI, or sending a meaningful error\npayload in a REST endpoint, so the subscriber’s {260/} method should always\nbe defined.","492":"If not defined, {261/} will throw an {262/}.","493":"You can further detect and triage it by the {263/} method.","494":"But {3/} also offers alternative means of dealing with errors in the middle\nof the chain, as error-handling operators.","495":"Before you learn about error-handling operators, you must keep in mind that any error in a reactive sequence is a terminal event .","496":"Even if an error-handling operator is used, it doesn't allow the original sequence to continue, but rather converts the {264/} signal into the start of a new sequence (the fallback one).","497":"As such it replaces the terminated sequence upstream .","498":"Let's go through each mean of error handling one-by-one.","499":"When relevant we'll make a parallel with imperative world's {265/} patterns.","501":"Error handling operators","502":"The {266/} at the end of the chain is akin to a {267/} block.","503":"There, execution skips to the catch in case an Exception is thrown:","504":"a transformation is performed that can throw an exception.","505":"if everything went well, a second transformation is performed.","506":"each successfully transformed value is printed out.","507":"in case of an error, the sequence terminates and an error message is displayed.","508":"This is conceptually similar to the following try/catch block:","509":"if an exception is thrown here…​","510":"…​the rest of the loops is skipped…​","511":"…​and the execution goes straight to here.","512":"Now that we've established a parallel, you may be familiar with several ways of dealing with exceptions in a try/catch block.","513":"Most notably:","514":"catch and return a default value","515":"catch and execute an alternative path (fallback method)","516":"catch, wrap to a {268/} and re-throw","517":"catch, log an error specific message and re-throw","518":"the {269/} block to clean up resources, or a Java 7’s \"try-with-resource\" construct","519":"All of these have equivalent in {3/}, in the form of error handling operators.","520":"Default value","521":"The equivalent of (1) is {270/}:","522":"You also have the option of filtering when to recover with a default value vs\nletting the error propagate, depending on the exception that occurred:","523":"Fallback method","524":"If you want more than a single default value and you have an alternative safer way of processing your data, you can use {271/}.","525":"This would be the equivalent of (2) .","526":"For example, if your nominal process is fetching data from an external\nunreliable service, but you also keep a local cache of the same data that can\nbe a bit more out of date but is more reliable, you could do the following:","527":"for each key, we asynchronously call the external service.","528":"if the external service call fails, we fallback to the cache for that key.","529":"Note we always apply the same fallback, whatever the source error {272/} is.","530":"Like {273/}, {274/} has variants that let you filter which exceptions to fallback on, based either on the exception's class or a {275/}.","531":"The fact that it takes a {276/} also allows you to choose a different fallback sequence to switch to, depending on the error encountered:","532":"The function allows to dynamically choose how to continue.","533":"If the source times out, let’s hit the local cache.","534":"If the source says the key is unknown, let’s create a new entry.","535":"In all other cases, \"re-throw\".","536":"Catch and rethrow","537":"That last line inside the previous {277/} gives us an hint as to how item\n(3) (catch wrap and rethrow) could be achieved:","538":"But actually, there is a more straightforward way of achieving the same with {278/}:","539":"Log or react on the side","540":"For cases where you want the error to continue propagating, but you still want to react to it without modifying the sequence (for instance logging it like in item (4) ), there is the {279/} operator.","541":"This operator as well as all {280/} prefixed operators are sometimes referred to as a \"side-effect\".","542":"That is because they allow to peek inside the sequence's events without modifying them.","543":"The example below makes use of that to ensure that when we fallback to the cache, we at least log that the external service had a failure.","544":"We could also imagine we have statistic counters to increment as an error side-effect…","545":"the external service call that can fail…​","546":"is decorated with a logging side-effect…​","547":"and then protected with the cache fallback.","548":"Using resources and the finally block","549":"The last parallel to draw with the imperative world is the cleaning up that can be done either via a Java 7 \"try-with-resources\" construct or the use of the {281/} block ( (5) ).","550":"Both have their {3/} equivalent, actually: {282/} and {283/}:","551":"The first lambda generates the resource.","552":"Here we return our mock {284/}.","553":"The second lambda processes the resource, returning a {285/}.","554":"The third lambda is called when the flux from 2) terminates or is cancelled, to clean up resources.","555":"After subscription and execution of the sequence, the {286/} atomic boolean would become {287/}.","556":"On the other hand, {288/} is about side-effects that you want to be executed whenever the sequence terminates, either with onComplete, onError or a cancel.","557":"It gives you a hint as to what kind of termination triggered the side-effect:","558":"We assume we want to gather statistics, here we use a {289/}.","559":"{290/} consumes a {291/} for the type of termination.","560":"Here we increment statistics in case of cancellation only.","561":"{292/} will cancel after 1 item is emitted.","562":"Demonstrating the terminal aspect of {293/}","563":"In order to demonstrate that all these operators cause the upstream original sequence to terminate when the error happens, let's take a more visual example with a {294/}.","564":"The interval operator ticks every x units of time with an increasing {295/}:","565":"Note that {296/} executes on the timer {297/} by default.","566":"Assuming we'd want to run that example in a main class, we add a sleep here so that the application doesn't exit immediately without any value being produced.","567":"This prints out, one line every 250ms:","568":"Even with one extra second of runtime, no more tick comes in from the {298/}.","569":"The sequence was indeed terminated by the error.","570":"Retrying","571":"There is another operator of interest with regards to error handling, and you might be tempted to use it in the case above.","572":"{299/}, as its mame indicates, allows to retry an erroring sequence.","573":"But the caveat is that it works by re-subscribing to the upstream {300/}.","574":"So this is still in effect a different sequence, and the original one is still terminated.","575":"To verify that, we can re-use the previous example and append a {301/} to retry once instead of the onErrorReturn:","576":"{302/} will associate each value with the duration since previous value\nwas emitted.","577":"We also want to see when there is an {303/}","578":"We have enough time for our 4x2 ticks","579":"This prints out:","580":"Here a new {304/} started, from tick 0. The additional 250ms duration is\ncoming from the 4th tick, the one that causes the exception and subsequent retry","581":"As you can see above, {305/} merely re-subscribed to the original {306/}\nonce, restarting the tick from 0. The second time around, since the exception\nstill occurs, it gives up and propagate it downstream.","582":"There is a more advanced version of {307/} that uses a \"companion\" flux to tell whether or not a particular failure should retry: {308/}.","583":"This companion flux is created by the operator but decorated by the user, in order to customize the retry condition.","584":"The companion flux is a {309/} that gets passed to a {310/}, the sole parameter of retryWhen.","585":"As the user, you define that function and make it return a new {311/}.","586":"Retry cycles will go like this:","587":"each time an error happens (potential for a retry), the error is emitted into the companion flux.","588":"That flux has been originally decorated by your function.","589":"If the companion flux emits something, a retry happens.","590":"If the companion flux completes, the retry cycle stops and the original\nsequence completes too.","591":"If the companion flux errors, the retry cycle stops and the original sequence stops too.","592":"or completes, the error causes the original sequence to fail and terminate.","593":"The distinction between the last two cases is important.","594":"Simply completing the companion would effectively swallow an error.","595":"Consider the following attempt at emulating {312/} using {313/}:","596":"This continuously errors, calling for retry attempts","597":"before the retry will let us see all failures","598":"Here we just consider the first 3 errors as retry-able ({314/}), then give up.","599":"In effect, this results in an empty flux, but that completes successfully .","600":"Since {315/} on the same flux would have terminated with the latest error, this is not entirely the same…","601":"Getting to the same behavior involves a few additional tricks:","602":"Trick one: use {316/} and a {317/} of \"number of acceptable retries + 1\"…​","603":"The zip function will allow to count the retries while keeping track of the\noriginal error.","604":"To allow for 3 retries, indexes before 4 return a value to emit…​","605":"…​but in order to terminate the sequence in error, we throw the original\nexception after these 3 retries.","606":"\nA similar code can be used to implement an exponential backoff and retry\npattern, as shown in the FAQ.\n","608":"How are exceptions in operators or functions handled?","609":"In general, all operators can themselves contain code that potentially trigger\nan exception, or calls a user-defined callback that similarly can fail, so they\nall contain some form of error handling.","610":"As a rule of thumb, an Unchecked Exception will always be propagated through {318/}.","611":"For instance, throwing a {319/} inside a {320/} function will translate to an {321/} event:","612":"This would print out:","613":"{3/} however defines a set of exceptions that are always deemed fatal [ 5 ] , meaning that {3/} cannot keep operating.","614":"These are thrown rather than propagated.","615":"Internally There are also cases where an unchecked exception still cannot be propagated, most notably during the subscribe and request phases, due to concurrency races that could lead to double onError/onComplete.","616":"When these races happen, the error that cannot be propagated is \"dropped\".","617":"These cases can still be managed to some extent, as the error goes through the {322/} customizable hook.","618":"You may wonder, what about Checked Exceptions?","619":"If, say, you need to call some method that declares it {323/} exceptions, you will still have to deal with said exceptions in a {324/} block.","620":"You have several options, though:","621":"catch the exception and recover from it, the sequence continues normally.","622":"catch the exception and wrap it into an unchecked one, then throw it (interrupting the sequence).","623":"The {325/} utility class can help you with that (see below).","624":"if you're expected to return a {326/} (eg. you're in a {327/}), just wrap the exception into an erroring flux: {328/}.","625":"(the sequence also terminates)","626":"{3/} has an {329/} utility class that you can use, notably to ensure\nthat exceptions are wrapped only if they are checked exceptions:","627":"use the {330/} method to wrap exceptions if necessary.","628":"It will also call {331/} first, and won't wrap {332/}.","629":"use the {333/} method to get the original unwrapped exception (going back to\nthe root cause of a hierarchy of reactor-specific exceptions).","630":"Let’s take the example of a {334/} that uses a conversion method that can throw\nan {335/}:","631":"Now imagine you want to use that method in a {336/}.","632":"You now have to explicitly catch the exception, and your map function cannot re-throw it.","633":"So you can propagate it to map's {337/} as a {338/}:","634":"Later on, when subscribing to the above flux and reacting to errors, eg.","635":"in the UI, you could revert back to the original exception in case you want to do something special for IOExceptions:","637":"Processor","638":"Processors are a special kind of {339/} that are also a {340/}.","639":"That means that you can {341/} to a {342/} (generally, they implement {343/}), but also call methods to manually inject data into the sequence or terminate it…","640":"There are several kind of Processors, each with a few particular semantics, but\nbefore you start looking into these, you need to ask yourself the following question:","642":"Do I need a Processor?","643":"Most of the time, you should try to avoid using a {344/}.","644":"They are harder to use correctly and prone to some corner cases.","645":"So if you think a {345/} could be a good match for your use-case, ask\nyourself if you have tried these two alternatives before:","646":"could a classic operator or combination of operators fit the bill?","647":"(see Which operator do I need? )","648":"could a generator operator work instead?","649":"(generally these operators are made to bridge APIs that are not reactive, providing a \"sink\" that is very similar in concept to a {346/} in the sense that it allows you to populate the sequence with data, or terminate it).","650":"If after exploring the above alternatives you still think you need a {347/},\nhead to the Choosing the right {348/} appendix to learn about the different implementations.","651":"5. Which operator do I need?","652":"In this section, if an operator is specific to {349/} or {350/} it will be prefixed accordingly, common operators have no prefix.","653":"When a specific use case is covered by a combination of operators, it is presented as a method call, with leading dot and parameters in parenthesis, like {351/}.","654":"I want to deal with: Creating a new sequence…​, An existing sequence, Peeking into a sequence,\nErrors, Time, Splitting a {352/} or Going back to the Synchronous world.","656":"Creating a new sequence…","657":"that emits a {353/} I already have: {354/}","658":"…​from an {355/}: {356/}","659":"…​from a potentially {357/} T: {358/}","660":"that emits a {359/} returned by a method: {360/} as well","661":"…​but lazily captured: use {361/} or wrap {362/} inside {363/}","662":"that emits several {364/} I can explicitly enumerate: {365/}","663":"that iterates over…​","664":"an array: {366/}","665":"a collection / iterable: {367/}","666":"a range of integers: {368/}","667":"that emits from various single-valued sources like…​","668":"a {369/}: {370/}","669":"a task: {371/}, {372/}","670":"a {373/}: {374/}","671":"that completes: {375/}","672":"that errors immediately: {376/}","673":"that never does anything: {377/}","674":"that is decided at subscription: {378/}","675":"that depends on a disposable resource: {379/}","676":"that generates events programmatically (can use state)…​","677":"synchronously and one-by-one: {380/}","678":"asynchronously (can also be sync), multiple emissions possible in one pass: {381/}\n({382/} as well, without the multiple emission aspect)","680":"An existing sequence","681":"I want to transform existing data…​","682":"on a 1-to-1 basis (eg. strings to their length): {383/}","683":"…​by just casting it: {384/}","684":"on a 1-to-n basis (eg. strings to their characters): {385/} + use a factory method","685":"on a 1-to-n basis with programmatic behavior for each source element and/or state: {386/}","686":"running an asynchronous task for each source item (eg. urls to http request): {387/} + an async {388/}-returning method","687":"…​ignoring some data: conditionally return a {389/} in the flatMap lambda","688":"…​retaining the original sequence order: {390/} (this triggers the async processes immediately but reorders the results)","689":"I want to aggregate a {391/}…​ (the {392/} prefix is assumed below)","690":"into a List: {393/}, {394/}","691":"into a Map: {395/}, {396/}","692":"into an arbitrary container: {397/}","693":"into the size of the sequence: {398/}","694":"by applying a function between each element (eg. running sum): {399/}","695":"…​but emitting each intermediary value: {400/}","696":"into a boolean value from a predicate…​","697":"applied to all values (AND): {401/}","698":"applied to at least one value (OR): {402/}","699":"testing the presence of any value: {403/}","700":"testing the presence of a specific value: {404/}","701":"I want to combine publishers…​","702":"in sequential order: {405/} / {406/}","703":"…​but delaying any error until remaining publishers have been emitted: {407/}","704":"…​but eagerly subscribing to subsequent publishers: {408/}","705":"in emission order (combined items emitted as they come): {409/} / {410/}","706":"…​with different types (transforming merge): {411/} / {412/}","707":"by pairing values…​","708":"from 2 Monos into a {413/}: {414/}","709":"from n Monos when they all completed: {415/}","710":"into an arbitrary container type…​","711":"each time all sides have emitted: {416/} (up to the smallest cardinality)","712":"each time a new value arrives at either side: {417/}","713":"only considering the sequence that emits first: {418/}, {419/}, {420/}","714":"triggered by the elements in a source sequence: {421/} (each source element is mapped to a Publisher)","715":"triggered by the start of the next publisher in a sequence of publishers: {422/}","716":"I want to repeat an existing sequence: {423/}","717":"…​but at time intervals: {424/}","718":"I have an empty sequence but…​","719":"I want a value instead: {425/}","720":"I want another sequence instead: {426/}","721":"I have a sequence but I’m not interested in values: {427/}","722":"…​and I want the completion represented as a {428/}: {429/}","723":"…​and I want to wait for another task to complete at the end: {430/}","724":"…​and I want to switch to another {431/} at the end: {432/}","725":"…​and I want to switch to a {433/} at the end: {434/}","726":"I have a Mono for which I want to defer completion…​","727":"…​only when 1-N other publishers have all emitted (or completed): {435/}","729":"Peeking into a sequence","730":"Without modifying the final sequence, I want to…​","731":"get notified of / execute additional behavior [6] on…​","732":"emissions: {436/}","733":"completion: {437/}, {438/} (includes the result if any)","734":"error termination: {439/}","735":"cancellation: {440/}","736":"subscription: {441/}","737":"request: {442/}","738":"completion or error: {443/} (Mono version includes the result if any)","739":"but after it has been propagated downstream: {444/}","740":"any type of signal, represented as a {445/}: {446/}","741":"any terminating condition (complete, error, cancel): {447/}","742":"log what happens internally: {448/}","743":"I want to know of all events…​","744":"each represented as {449/} object…​","745":"in a callback outside the sequence: {450/}","746":"instead of the original onNext emissions: {451/}","747":"…​and get back to the onNexts: {452/}","748":"as a line in a log: {453/}","750":"Filtering a sequence","751":"I want to filter a sequence…​","752":"based on an arbitrary criteria: {454/}","753":"…​that is asynchronously computed: {455/}","754":"restricting on the type of the emitted objects: {456/}","755":"by ignoring the values altogether: {457/}","756":"by ignoring duplicates…​","757":"in the whole sequence (logical set): {458/}","758":"between subsequently emitted items (deduplication): {459/}","759":"I want to keep only a subset of the sequence…​","760":"by taking elements…​","761":"at the beginning of the sequence: {460/}","762":"…​based on a duration: {461/}","763":"…​only the first element, as a {462/}: {463/}","764":"at the end of the sequence: {464/}","765":"until a criteria is met (inclusive): {465/} (predicate-based), {466/} (companion publisher-based)","766":"while a criteria is met (exclusive): {467/}","767":"by taking at most 1 element…​","768":"at a specific position: {468/}","769":"at the end: {469/}","770":"…​and emit an error if empty: {470/}","771":"…​and emit a default value if empty: {471/}","772":"by skipping elements…​","773":"at the beginning of the sequence: {472/}","774":"…​based on a duration: {473/}","775":"at the end of the sequence: {474/}","776":"until a criteria is met (inclusive): {475/} (predicate-based), {476/} (companion publisher-based)","777":"while a criteria is met (exclusive): {477/}","778":"by sampling items…​","779":"by duration: {478/}","780":"but keeping the first element in the sampling window instead of the last: {479/}","781":"by a publisher-based window: {480/}","782":"based on a publisher \"timing out\": {481/} (each element triggers a publisher, and is emitted if that publisher doesn’t overlap with the next)","783":"I expect at most 1 element (error if more than one)…​","784":"and I want an error if the sequence is empty: {482/}","785":"and I want a default value if the sequence is empty: {483/}","786":"and I accept an empty sequence as well: {484/}","788":"Errors","789":"I want to create an erroring sequence: {485/}","790":"…​to replace the completion of a successful {486/}: {487/}","791":"…​to replace the emission of a successful {488/}: {489/}","792":"…​if too much time elapses between onNexts: {490/}","793":"I want the try/catch equivalent of…​","794":"throwing: {491/}","795":"catching an exception…​","796":"and falling back to a default value: {492/}","797":"and falling back to another {493/} or {494/}: {495/}","798":"and wrapping and re-throwing: {496/}","799":"the finally block: {497/}","800":"the using pattern from Java 7: {498/} factory method","801":"I want to recover from errors…​","802":"by falling back…​","803":"to a value: {499/}","804":"to a {500/} or {501/}, possibly different ones depending on the error: {502/} and {503/}","805":"by retrying: {504/}","806":"…​triggered by a companion control Flux: {505/}","807":"I want to deal with backpressure \"errors\"[7]…​","808":"by throwing a special {506/}: {507/}","809":"by dropping excess values: {508/}","810":"…​except the last one seen: {509/}","811":"by buffering excess values (bounded or bounded): {510/}","812":"…​and applying a strategy when bounded buffer also overflows: {511/} with a {512/}","814":"Time","815":"I want to associate emissions with a timing ({513/}) measured…​","816":"since subscription: {514/}","817":"since the dawn of time (well, computer time): {515/}","818":"I want my sequence to be interrupted if there’s too much delay between emissions: {516/}","819":"I want to get ticks from a clock, regular time intervals: {517/}","820":"I want to introduce a delay…​","821":"between each onNext signal: {518/}","822":"before the subscription happens: {519/}","824":"Splitting a {520/}","825":"I want to split a {521/} into a {522/}, by a boundary criteria…​","826":"of size: {523/}","827":"…​with overlapping or dropping windows: {524/}","828":"of time {525/}","829":"…​with overlapping or dropping windows: {526/}","830":"of size OR time (window closes when count is reached or timeout elapsed): {527/}","831":"based on a predicate on elements: {528/}","832":"…​…emitting the element that triggered the boundary in the next window ({529/} variant): {530/}","833":"…​keeping the window open while elements match a predicate: {531/} (non-matching elements are not emitted)","834":"driven by an arbitrary boundary represented by onNexts in a control Publisher: {532/}, {533/}","835":"I want to split a {534/} and buffer elements within boundaries together…​","836":"into {535/}…​","837":"by a size boundary: {536/}","838":"…​with overlapping or dropping buffers: {537/}","839":"by a duration boundary: {538/}","840":"…​with overlapping or dropping buffers: {539/}","841":"by a size OR duration boundary: {540/}","842":"by an arbitrary criteria boundary: {541/}","843":"…​putting the element that triggered the boundary in the next buffer: {542/}","844":"…​buffering while predicate matches and dropping the element that triggered the boundary: {543/}","845":"driven by an arbitrary boundary represented by onNexts in a control Publisher: {544/}, {545/}","846":"into an arbitrary \"collection\" type {546/}: use variants like {547/}","847":"I want to split a {548/} so that element that share a characteristic end up in the same sub-flux: {549/}\nTIP: Note that this returns a {550/}, each inner {551/} shares the same {552/} key accessible through {553/}.","849":"Going back to the Synchronous world","850":"I have a {554/} and I want to…​","851":"block until I can get the first element: {555/}","852":"…​with a timeout: {556/}","853":"block until I can get the last element (or null if empty): {557/}","854":"…​with a timeout: {558/}","855":"synchronously switch to an {559/}: {560/}","856":"synchronously switch to a Java 8 {561/}: {562/}","857":"I have a {563/} and I want…​","858":"to block until I can get the value: {564/}","859":"…​with a timeout: {565/}","860":"a {566/}: {567/}","861":"6. Testing","862":"Whether you have written a simple chain of {3/} operators or your very own\noperator, automated testing is always a good idea.","863":"{3/} comes with a few elements dedicated to testing, gathered into their own artifact: {568/}.","864":"You can find that project on Github inside of the {0/} repository.","865":"To use it in your tests, add it as a test dependency:","866":"reactor-test in Maven, in {569/}","867":"If you use the BOM, no need to specify a {570/}…​","868":"reactor-test in Gradle, amend the {571/} block","869":"The two main uses of {572/} are:","870":"test a sequence follows a given scenario, step-by-step, with {573/}","871":"produce data in order to test behavior of operators downstream (eg. your own\noperator) with {574/}","873":"Testing a scenario with {575/}","874":"The most common case for testing a {3/} sequence is to have a {576/} or {577/}\ndefined in your code (eg. returned by a method), and wanting to test how it\nbehaves when subscribed to.","875":"This translates well to defining a \"test scenario\", where you define your expectations in terms of events, step-by-step: what is the next expected even?","876":"Do you expect the Flux to emit a particular value?","877":"Or maybe to do nothing for the next 300ms?","878":"All of that can be expressed through the {578/} API.","879":"For instance, you could have the following utility method in your codebase that\ndecorates a {579/}:","880":"So in order to test it, you’d want to verify the following scenario:","881":"I expect this {580/} to first emit {581/}, then {582/}, then to error with the message {583/}.","882":"Subscribe and verify these expectations.","883":"In the {584/} API, this translates to:","884":"Since our method needs a source {585/}, we’ll define a simple one for\ntesting purposes.","885":"Create a {586/} builder that will wrap and verify a {587/}/{588/}…​","886":"Here we pass the flux to be tested (the result of calling our utility method)","887":"The first signal we expect to happen upon subscription is an {589/}, with\nthe value {590/}.","888":"The last signal we expect to happen is a termination of the sequence with an {591/}.","889":"The exception should have {592/} as a message.","890":"It is important to trigger the test by calling {593/}.","891":"The API is a builder.","892":"You start by creating a {594/} and passing the sequence to be tested.","893":"This offers a choice of methods that allow you to:","894":"express expectations about the next signals to occur: if any other signal is received (or the content of the signal doesn't match the expectation), the whole test will fail with a meaningful {595/}.","895":"For example {596/}, {597/}.","896":"consume the next signal.","897":"This is used when you want to skip part of the sequence OR when you want to apply a custom {598/} on the content of the signal (eg. check there is an {599/} and assert the emitted item is a list of size 5).","898":"For example {600/}.","899":"miscellaneous actions like pausing, running arbitrary code (eg. if you want to manipulate a test specific state/context).","900":"For example {601/}, {602/}.","901":"For terminal events, the corresponding expectation methods ({603/}, {604/} and all its variants) will switch to an API where you cannot express expectations anymore.","902":"In that last step, all you can do is perform some additional configuration on the {605/} then trigger the verification .","903":"What happens at this point is that the StepVerifier subscribes to the tested flux/mono and plays the sequence, comparing each new signal with the next step in the scenario.","904":"As long as these match, the test is considered a success.","905":"As soon as there is a discrepancy, an {606/} is thrown.","906":"Don't forget the {607/} step, which triggers the verification.","907":"In order to help, a few shortcut methods were added to the API that combine the terminal expectations with a call to {608/}: {609/}, {610/}, {611/}, etc.","908":"Note that if one of the lambda-based expectations throws an {612/}, it will be reported as is, failing the test.","909":"This is useful for custom assertions.","911":"Manipulating Time","912":"Another very interesting capability of {613/} is the way it can be used with time-based operators in order to avoid long run times for corresponding tests.","913":"This is done through the {614/} builder.","914":"It looks like this:","915":"The way this virtual time feature works is that it plugs in a custom {615/} in {3/}'s {616/} factory.","916":"Since these timed operators usually use the default {617/} scheduler, replacing it with a {618/} does the trick.","917":"However, an important pre-requisite is that the operator be instantiated after the virtual time scheduler has been activated.","918":"In order to increase the chances this happens correctly, the {619/} won't take a simple {620/} as input.","919":"{621/} takes a {622/}, which allows to lazily create the instance of the tested flux AFTER having done the scheduler set up.","920":"Take extra care of ensuring the {623/} can be used in a lazy fashion, otherwise virtual time is not guaranteed.","921":"Especially avoid instantiating the flux earlier in the test code and having the {624/} just return that variable, but rather always instantiate the flux inside the lambda.","922":"There are a couple of expectation methods that deal with time, and they are both\nvalid with or without virtual time:","923":"{625/} pauses the evaluation of steps (allowing a few signals\nto occur, or delays to run out)","924":"{626/} also lets the sequence play out for a given\nduration, but fails the test if any signal occurs during that time.","925":"Both methods will pause the thread for the given duration in classic mode, and\nadvance the virtual clock instead in virtual mode.","926":"{627/} also considers the {628/} as an event.","927":"If you use it as a first step, it will usually fail because the subscription signal will be detected.","928":"Use {629/} instead.","929":"So in order to quickly evaluate the behavior of our {630/} above, we can\nfinish writing up our code like this:","930":"See the tip above","931":"Expect nothing happens during a full day…​","932":"…​then expect delay emits {631/}…​","933":"…​then expect completion (and trigger the verification).","934":"We could have used {632/} above, but {633/}\nhas the benefit of guaranteeing that nothing happened earlier that it should\nhave.","935":"Note also that {634/} returns a {635/} value.","936":"This is the real time duration of the entire test.","938":"Performing post-execution assertions with {636/}","939":"After having described the final expectation of your scenario, you can switch to\na complementary assertion API instead of plainly triggering the {637/}:\nuse {638/} instead.","940":"This returns a {639/} object which you can use to assert a few elements of state once the whole scenario has played out successfully (since it does also call {640/} ).","941":"Typical (albeit advanced) usage is to capture elements that have been dropped by some operator and assert them (see the section on Hooks ).","943":"Manually emitting with {641/}","944":"For more advanced test cases, it might be useful to have complete mastery over\nthe source of data, in order to trigger finely chosen signals that closely match\nthe particular situation you want to test.","945":"Another situation is when you have implemented your own operator and you want to\nverify how it behaves with regards to the Reactive Streams specification,\nespecially if its source is not well behaved.","946":"For both cases, reactor-test offers the {642/}.","947":"This is a {643/} that lets you programmatically trigger various signals:","948":"{644/} and {645/} will trigger 1-n {646/} signals","949":"{647/} will do the same AND {648/}","950":"{649/} will terminate with an {650/} signal","951":"{651/} will terminate with an {652/} signal","952":"A well-behaved {653/} can be obtained through the {654/} factory method.","953":"Additionally, misbehaving {655/} can be created using the {656/} factory method.","954":"The later takes a number of {657/} enums that will define which parts of the specification the publisher can overlook.","955":"For instance:","956":"{658/}: Allows {659/} calls to be made despite insufficient request,\nwithout triggering an {660/}.","957":"{661/}: Allows {662/}  calls to be made with a {663/} value without\ntriggering a {664/}.","958":"{665/}: Allows termination signals to be sent several times in a row.","959":"This includes {666/}, {667/} and {668/}.","960":"Finally, the {669/} keeps track of internal state after subscription,\nwhich can be asserted through its various {670/} methods.","961":"It can be used as a {671/} or {672/} by using the conversion methods {673/}\nand {674/}.","962":"7. Debugging {3/}","963":"Switching from an imperative and synchronous programming paradigm to a reactive and asynchronous one can sometimes be daunting.","964":"One of the steepest steps in the learning curve is how to analyze and debug when something goes wrong.","965":"In the imperative world, this is usually pretty straightforward nowadays: just read the stacktrace and you'll spot where the problem originated, and more: was it entirely a failure of your code?","966":"Did the failure occur in some library code?","967":"If so, what part of your code called the library, potentially passing in improper parameters that ultimately caused the failure?","968":"(I'm looking at you, {675/}!)","970":"The typical {3/} stack trace","971":"But as soon as you shift to asynchronous code, things can get much more\ncomplicated…​","972":"Consider the following stacktrace:","973":"A typically scary {3/} stacktrace","974":"There is a lot going on there!","975":"We get an {676/} which tell us that a \" source emitted more than one item \".","976":"We can probably quickly come to assume that this source is a Flux/Mono, as confirmed by the line below that mentions {677/}.","977":"So it appears to be some sort of complaint from a {678/} operator.","978":"Referring to the javadoc for {679/} operator, we indeed remember that {680/} has a contract: the source must emit exactly one element.","979":"It appears we had a source that emitted more than one and thus violated that contract.","980":"Can we dig deeper and identify that source?","981":"The following rows don't seem very helpful.","982":"They take us on a travel inside the internals of what seems to be a reactive chain, through {681/} and {682/}…","983":"By skimming over these rows, we can at least start to form a picture of the kind of chain that went wrong: it seems to involve a {683/}, a {684/} and a {685/} (each get several rows in the trace, but overall these 3 classes are involved).","984":"So a {686/} chain maybe?","985":"But what if we use that pattern a lot in our application?","986":"This still doesn't tell us much, and simply searching for {687/} isn't going to cut it.","987":"Then the last line refers to some of our code.","988":"Finally!","989":"Hold on…​ When we go to the source file, all we see is that a pre-existing\n{688/} is subscribed to:","990":"All of this happened at subscription time, but the {689/} itself wasn't declared there.","991":"Worse, when we go to where the variable is declared, we see:","992":"The variable isn't even instantiated where it is declared.","993":"Let's assume a worst case scenario where we find out there could be a few different codepath that set it in the application… So we're still unsure of which one caused the issue.","994":"\nThis is kind of the {3/} equivalent of a runtime error, as opposed to a\ncompilation error.\n","995":"What we want to find out more easily is where the operator was added into the chain, where the {690/} was declared.","996":"We usually refer to that as the assembly of the Flux.","998":"Activating debug mode","999":"Even though the stacktrace was still able to convey some information for someone\nwith a bit of experience, we can see that it is not ideal by itself in more\nadvanced cases.","1000":"Fortunately, {3/} comes with a debugging-oriented capability of\nassembly-time instrumentation.","1001":"This is done by customizing the {691/} hook at application start\n(or at least before the incriminated flux or mono can be instantiated), like so:","1002":"The idea is that this will start instrumenting the calls to {692/} (and {693/})'s operator methods (where they are assembled into the chain) by wrapping the construction of the operator and capturing a stacktrace there.","1003":"Since this is done when the operator chain is declared, the hook should be activate before that, so the safest way is to activate it right at the start of your application.","1004":"Later on, if an exception occurs, the failing operator will be able to refer\nto that capture and append it to the stacktrace.","1005":"In the next section, we’ll see how the stacktrace differs and how to interpret\nthat new information.","1007":"Reading a stack trace in debug mode","1008":"Reusing our initial example but activating the {694/} debug\nfeature, here is the stack we now get:","1009":"This is new: what we see here is the wrapper operator that captures the\nstack.","1010":"Apart from that, the first section of the stacktrace is still the same for\nthe most part,showing a bit of operators internals (so we removed a bit of the\nsnippet here)","1011":"This is where the new stuff from debugging mode starts appearing.","1012":"First we get some details on where the operator was assembled, hurray!","1013":"We also get a traceback of the error as it propagated through the operator\nchain, from first to last (error site to subscribe site).","1014":"Each operator that saw the error is mentioned along with the class and line where it originated.","1015":"If an operator is assembled from within {3/} code, the later would be omitted.","1016":"As you can see, the captured stacktrace is appended to the original error as a suppressed {695/}.","1017":"There are two parts to it, but the first section is the most interesting.","1018":"It shows the path of construction for the operator that triggered the exception.","1019":"Here it shows that the {696/} that caused our issue was created in the {697/} method, itself called from a {698/} method that got executed through JUnit.","1020":"We are now armed with enough information to find the culprit, let’s have a look\nat that {699/} method:","1021":"Sure enough, here is our {700/}.","1022":"Now we can see what the root cause of the error was: a {701/} that performs several HTTP calls to a few urls is chained with {702/}, which seem a bit too restrictive.","1023":"After a short {703/} and a quick discussion with the author of that line, we find out he meant to use the less restrictive {704/} instead…","1024":"Congratulations, we solved our problem!","1025":"\nError has been observed by the following operator(s):\n","1026":"That second part of the debug stacktrace was not necessarily very interesting in this particular example, because the error was actually happening in the last operator in the chain (the one closest to {705/}).","1027":"Taking another example might make it clearer:","1028":"Now imagine that inside {706/} there is a {707/} that fails.","1029":"Here we would see the following final traceback:","1030":"This correspond to a flattened out version of the chain of operators, or rather\nof the section of the chain that gets notified of the error:","1031":"the exception originates in the first {708/}","1032":"it is seen by a second {709/} (both in fact correspond to the\n{710/} method)","1033":"then is is seen by a {711/} and a {712/}, which indicates us that part of\nthe chain is constructed via a reusable transformation function (here, the\n{713/} utility method).","1034":"finally it is seen by an {714/} and a {715/}.","1035":"Once again, elapsed is what is applied by the transformation function of that second transform.","1037":"Cost of debug mode","1038":"We are dealing with a form of instrumentation here, and creating a stacktrace is costly.","1039":"That is why this debugging feature should only be activated in a controlled manner, as a last resort.","1040":"There are ways of limiting the impact of that feature by restricting the hook to the type of operator that is causing an issue.","1041":"The filter to use is best determined by looking at the class in the stack trace, after removing any {716/}, {717/} and {718/} prefixes and the {719/} suffix.","1042":"For instance in our case:","1043":"We have {720/}, so {721/} operator implementation and\n{722/} as the filtering keyword.","1044":"So we could only instrument uses of the incriminating operator by doing:","1045":"Only activate for operator classes named \"single\", ignoring case and the\n\"Parallel\", \"Flux\" or \"Mono\" prefixes, as well as \"Fuseable\" suffix (as seen in\nstacktrace)","1047":"The {723/} alternative","1048":"The debug mode is global and affects every single operator assembled into a {724/} or {725/} inside the application.","1049":"This has the benefit of allowing after the fact debugging : whatever the error, we will obtain additional info to debug it.","1050":"As we saw in the \"Cost of debug mode\" above, this is at the cost of an impact on performance (due to the number of populated stacktraces).","1051":"That cost can be reduced if we have an idea of likely problematic operators.","1052":"But usually this isn't known unless we observed an error in the wild, saw we were missing assembly information and then modified the code to activate assembly tracking, hoping we can observe the same error again…","1053":"In that scenario, we have to switch into debugging gear and make preparations\nin order to better observe a second occurrence of the error, this time capturing\nall the additional information.","1054":"If you can identify reactive chains that you assemble in your application for\nwhich serviceability is critical, a mix of both world can be achieved with the\n{726/} operator.","1055":"You can chain this operator towards their end.","1056":"The {727/} operator will work like the hook version, but only for its link of that particular chain.","1057":"Additionally, there is a {728/} variant that allows you to add a description to the assembly traceback.","1058":"It could for example be a static identifier or user-readable description, or a wider correlation ID coming from a header in the case of an HTTP request for instance…","1059":"That information appears in the first line of the traceback:","1060":"{729/} is the description provided in {730/}","1061":"When both global debugging and local {731/} are enabled, checkpointed snapshot\nstacks will be appended as suppressed error after the observing operator graph and\nfollowing the same declarative order.","1063":"Logging a stream","1064":"Additionally to stacktrace debugging and analysis, another powerful tool to have\nin your toolbelt is the capability to trace and log events in an asynchronous\nsequence.","1065":"The {732/} operator can do just that.","1066":"Chained inside a sequence, it will peek at every event of the Flux/Mono upstream of it (including {733/}, {734/} and {735/} of course, but also subscriptions , cancellation and requests ).","1067":"The operator picks up common logging frameworks like Log4J and Logback through\nSLF4J, and will default to the JDK Logger in case none can be found.","1068":"For instance, supposing we have logback activated and configured, and a chain like {736/}.","1069":"By placing a {737/} just before the take , we can get some insight as to how it works and what kind of events it propagates upstream to the range :","1070":"This prints out (through the logger’s console appender):","1071":"Here, additionally to the logger’s own formatter (time, thread, level, message),\nthe {738/} operator outputs a few things in its own format:","1072":"{739/} is an automatic category for the log, in case you use the operator several times in a chain.","1073":"It allows you to distinguish which operator's events are being logged (here, the {740/}).","1074":"This can be overwritten with your own custom category using the {741/} signature.","1075":"After the few separating characters, the actual event gets printed: here we\nget {742/}, {743/}, 3 {744/} and a {745/}…​","1076":"For the first line, {746/}, we get the implementation of the {747/}, that usually correspond to the operator-specific implementation.","1077":"Between square brackets, we get additional information if the operator can be automatically optimized via synchronous or asynchronous fusion (see the appendix on Micro-fusion ).","1078":"on the second line (2) we can see that an unbounded request was propagated\nup from downstream.","1079":"Then the range sends three values in a row ((3))…​","1080":"On the last line we see a cancel.","1081":"The last line (4) is the most interesting: we can see the {748/} in action there: it operates by cutting the sequence short after it has seen enough elements emitted.","1082":"In a word, {749/} simply {750/} the source once it has emitted the user-requested amount!","1083":"8. Advanced features and concepts","1085":"Mutualizing operator usage","1086":"From a clean code perspective, code reuse is generally a good thing.","1087":"{3/} offers a few patterns that will help you reuse and mutualize code, notably for operators or combination of operators that you might want to apply regularly in your codebase.","1089":"transform","1090":"The {751/} operator lets you encapsulate a piece of an operator chain into a function.","1091":"That function will be applied to an original operator chain at assembly time to augment it with the encapsulated operators.","1092":"So this applies the same to all the subscribers of a sequence, and is basically equivalent to chaining the operators directly.","1093":"This outputs:","1095":"compose","1096":"The {752/} operator is very similar to {753/} and also lets you encapsulate operators in a function.","1097":"The major difference is that this function is applied to the original sequence on a per-subscriber basis .","1098":"It means that the function can actually produce a different operator chain for each subscription (eg. by maintaining some state).","1099":"This outputs:","1101":"Hot vs Cold","1102":"So far we have considered that all {754/} (and {755/}) are the same: they all\nrepresent an asynchronous sequence of data, and nothing happens before you\nsubscribe.","1103":"There are however in reality two broad families of publishers: cold ones and\nhot ones.","1104":"The description above applies to the cold family of publishers.","1105":"They generate data anew for each subscription, and if no subscription is done then data never start generating.","1106":"Think HTTP request: each new subscriber will trigger an HTTP call, but no call\nis made if no one is interested in the result.","1107":"Hot publishers on the other hand don't really depend on any number of subscribers.","1108":"They might start publishing data right away, and would continue doing so whenever a new {756/} comes in (in which case said subscriber would only see new elements emitted after it subscribed).","1109":"So for such hot publishers, something indeed happens before you subscribe.","1110":"One example of the few hot operators in {3/} is {757/}: it directly capture the value at assembly time, and will replay it to anybody subscribing to it later on.","1111":"To re-use the HTTP call analogy, if the captured data is the result of an HTTP call then only one network call is made, when instantiating just .","1112":"To transform {758/} into a cold publisher, you can use {759/}.","1113":"This will defer the HTTP request in our example to subscription time (and would result in a separate network call for each new subscription).","1114":"\nMost other hot publishers in {3/} are {760/}.\n","1115":"Contrast these two other examples:","1116":"Which outputs:","1117":"Compared to:","1118":"Which outputs:","1120":"Broadcast to multiple subscribers with {761/}","1121":"Sometimes, you don’t only want to defer some processing to the subscription time\nof one subscriber, but you might actually want for several of them to\nrendez-vous and then trigger the subscription / data generation.","1122":"This is what {762/} is made for.","1123":"Two main patterns are covered in the {763/} API that return a {764/}: {765/} and {766/}.","1124":"{767/} will dynamically try to respect the demand from its various subscribers, in terms of backpressure, by forwarding these requests to the source.","1125":"Most notably, if any subscriber has a pending demand of {768/}, publish will pause its requesting to the source.","1126":"{769/} will bufferize data seen through the first subscription, up to configurable limits (in time and buffer size).","1127":"It will replay these to subsequent subscribers.","1128":"A {770/} offers additional methods to manage subscriptions downstream vs subscription to the original source.","1129":"For instance:","1130":"{771/} can be called manually once you've reached enough subscriptions to the flux.","1131":"That will trigger the subscription to the upstream source.","1132":"{772/} can do the same job automatically once {773/} subscriptions\nhave been made.","1133":"{774/} not only automatically tracks incoming subscriptions but also detects when these subscriptions are cancelled.","1134":"If not enough subscribers are tracked, the source is \"disconnected\", causing a new subscription to the source later on if additional subscribers come back in.","1135":"This outputs:","1136":"With {775/}:","1137":"Which outputs:","1139":"Parallelize work with {776/}","1140":"With multi-core architectures being a commodity nowadays, being able to easily parallelize work is very important.","1141":"{3/} helps with that by providing a special type, {777/}, that exposes operators that are optimized for parallelized work.","1142":"To obtain a {778/}, one can use the {779/} operator on any {780/}.","1143":"This will not by itself parallelize the work however, but rather will divide the workload into \"rails\" (by default as many rails as there are CPU cores).","1144":"In order to tell the resulting ParallelFlux where to execute each rail (and by extension to execute rails in parallel) you have to use {781/}.","1145":"Note that there is a recommended dedicated Scheduler for parallel work: {782/}.","1146":"Contrast:","1147":"here we force a number of rails instead of relying on the number of CPU cores","1148":"with:","1149":"The first outputs:","1150":"While the second correctly parallelizes on two threads:","1151":"If once you’ve processed your sequence in parallel you want to revert back to a\n\"normal\" flux and apply the rest of the operator chain in a sequential manner,\nyou can use the {783/} method on {784/}.","1152":"Note that it is the case by default if you {785/} to the ParallelFlux with\na single provided {786/}, but not when using the lambda-based variants of\n{787/}.","1153":"You can also access individual rails or \"groups\" as a {788/} via\nthe {789/} method and apply additional operators to them via the\n{790/} method.","1155":"Backpressure and the associated rules","1157":"Global hooks","1159":"Replacing default {791/}","1160":"9. FAQ, best practices and other \"How do I…​?\"","1162":"I just used an operator on my {792/} but it doesn't seem to apply… What gives?","1163":"Check you have affected the result of the operator to the variable you {793/} to.","1164":"{3/} operators are decorators, they return a different instance that wraps the source sequence and add behavior.","1165":"That is why the preferred way of using operators is to chain the calls.","1166":"Compare the following:","1167":"without chaining (incorrect)","1168":"mistake is here, the result isn’t reaffected to {794/} variable","1169":"With:","1170":"without chaining (correct)","1171":"And even better:","1172":"with chaining (best)","1173":"The first version will output:","1174":"Whereas the two other versions will output the expected:","1176":"My {795/} continuation ({796/} or {797/}) is never called","1177":"example","1178":"If the source {798/} is either {799/} or a {800/} (a {801/} is empty for all intent and purposes), some combinations will never be called.","1179":"You should expect that if there is a callback and the combination depends on the value…","1180":"This includes the {802/} based variant of then ({803/})\nand all versions of {804/}.","1181":"In order to aVoid this problem and still invoke the continuation lazily, when\nthe source Mono terminates, use the {805/} based version:","1183":"How to use {806/} to emulate {807/}?","1184":"The {808/} operator can be quite complex.","1185":"Hopefully this snippet of code can help you understand how it works by attempting to emulate a simpler {809/}:","1186":"Trick one: use {810/} and a {811/} of \"number of acceptable retries + 1\"…​","1187":"The zip function will allow to count the retries while keeping track of the\noriginal error.","1188":"To allow for 3 retries, indexes before 4 return a value to emit…​","1189":"…​but in order to terminate the sequence in error, we throw the original\nexception after these 3 retries.","1191":"How to use {812/} for exponential backoff?","1192":"Exponential backoff produces retry attempts with a growing delay between each of the attempts, so as not to overload the source systems and risk an all out crash.","1193":"The rationale is that if the source errors, it is already in an unstable state, and not likely to immediately recover from it.","1194":"So blindly retrying immediately is likely to produce yet another error and add to the instability.","1195":"Here is how to implement an exponential backoff that delays retries and increase\nthe delay between each attempt (delay == attempt number * 100 milliseconds):","1196":"We log the time of errors","1197":"We use the {813/} + {814/} trick to propagate the error after 3 retries.","1198":"Through {815/}, we cause a delay that depends on the attempt’s index.","1199":"We also log the time at which the retry effectively occurs.","1200":"When subscribed to, this fails and terminates after printing out:","1201":"first retry after about 100ms","1202":"second retry after about 200ms","1203":"third retry after about 300ms","1204":"Appendix A: How is {3/} implemented?","1205":"Appendix B: A primer at writing an operator","1206":"Appendix C: Automatic optimizations","1207":"C.1.","1208":"Macro-fusion","1209":"C.2.","1210":"Micro-fusion","1211":"Appendix D: Migrating from RxJava","1212":"Appendix E: Choosing the right {816/}","1213":"E.1.","1214":"Sync Processors","1215":"TODO","1216":"E.1.1.","1217":"EmitterProcessor","1218":"TODO","1219":"E.1.2.","1220":"DirectProcessor","1221":"TODO","1222":"E.1.3.","1223":"UnicastProcessor","1224":"TODO","1225":"E.1.4.","1226":"ReplayProcessor","1227":"TODO","1228":"E.1.5.","1229":"MonoProcessor","1230":"TODO","1231":"E.2.","1232":"Async Processors","1233":"TODO","1234":"E.2.1.","1235":"TopicProcessor","1236":"TODO","1237":"E.2.2.","1238":"WorkQueueProcessor","1239":"TODO","1240":"1 .","1241":"Bill Of Materials , a curated list of versioned compatible artifacts","1242":"2 .","1243":"(hopefully not)","1244":"3 .","1245":"if the top section already exist in your pom, just append the contents","1246":"4 .","1247":"you can also create one from an {817/}, although it is discouraged","1248":"5 .","1249":"think {818/}.","1250":"Have a look at the {819/} method for details","1251":"6 .","1252":"sometimes referred to as \"side-effects\"","1253":"7 .","1254":"request max from upstream and apply the strategy when downstream doesn't produce enough request","1255":"\nLast updated 2017-04-19 16:53:30 +00:00\n","1256":"Table of Contents"},"errors":{},"nouns":{"0":"reactor-addons","1":"Reactor Core","2":"reactor-core","3":"Reactor","4":"Gitter"},"name":"reactor-core-zhcn","timestamp":1501765469057});</script></body></html>